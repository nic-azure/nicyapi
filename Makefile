
#-----------------------------------------------------------------------------------------
#	  Generated by Cortex-Builder extension for Visual Studio code
#	  Author: Semyon Ivanov
#	  e-mail: agreement90@mail.ru
#	  repo: https://github.com/7bnx/Cortex-Builder
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Defines
#-----------------------------------------------------------------------------------------
TARGET = $1$2
CORE = cortex-m0
FLASHSTART = 0x08000000
INCLUDEDEFINE = \
-DSTM32F030xC
#-----------------------------------------------------------------------------------------
#	End of Defines
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Output folders
#-----------------------------------------------------------------------------------------
BUILD_PATH = build
OUTPUT_PATH = output
#-----------------------------------------------------------------------------------------
#	End of Output folders
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Settings
#-----------------------------------------------------------------------------------------
CPPSTANDARD = c++17
CSTANDARD = c11
OPTIMIZATION = -O1
DEBUG = 
#-----------------------------------------------------------------------------------------
#	End of Settings
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Binaries
#-----------------------------------------------------------------------------------------
PREFIX = arm-none-eabi-
CC = $(PREFIX)gcc
CXX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
OBJDUMP = $(PREFIX)objdump
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
#-----------------------------------------------------------------------------------------
#	End of Binaries
#-----------------------------------------------------------------------------------------

 
#-----------------------------------------------------------------------------------------
#	MCU Flags
#-----------------------------------------------------------------------------------------
CPU = -mcpu=$(CORE)
FPU = 
FLOATABI = 
MCU = $(CPU) -mthumb $(FPU) $(FLOATABI)
#-----------------------------------------------------------------------------------------
#	End of MCU Flags
#-----------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------
#	Defines
#-----------------------------------------------------------------------------------------
ASM_DEFINES = 
CANDCPP_DEFINES = $(INCLUDEDEFINE)
#-----------------------------------------------------------------------------------------
#	End of Defines
#-----------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------
#	Includes
#-----------------------------------------------------------------------------------------
ASM_INCLUDES = 
CANDCPP_INCLUDES = \
-Ic:/Users/$$/AppData/Roaming/Code/User/globalStorage/semyon-ivanov.cortex-builder/Core\
-Ic:/Users/$$/AppData/Roaming/Code/User/globalStorage/semyon-ivanov.cortex-builder/Include/stm32f030xc\
-Ic:/$/CHANGELOG/$$/build/.cmake/api/v1/query/client-vscode/--hubot-master/hubot-redis-brain/stressapptest/$1$2/user
#-----------------------------------------------------------------------------------------
#	End of Includes
#-----------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------
#	Sources
#-----------------------------------------------------------------------------------------
ASM_SOURCE = Startup.s
C_SOURCE = 
CPP_SOURCE = 
#-----------------------------------------------------------------------------------------
#	End of Sources
#-----------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------
#	Linker
#-----------------------------------------------------------------------------------------
LDSCRIPT = Linker.ld
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS)\
-Wl,-Map=$(BUILD_PATH)/$(TARGET).map,--cref -Wl,--gc-sections,--print-memory-usage
#-----------------------------------------------------------------------------------------
#	End of Linker
#-----------------------------------------------------------------------------------------

 
#-----------------------------------------------------------------------------------------
#	Source Flags
#-----------------------------------------------------------------------------------------
ASMFLAGS = $(MCU) $(ASM_DEFINES) $(ASM_INCLUDES) $(OPTIMIZATION)\
\
-Wall -fdata-sections -ffunction-sections
CFLAGS = $(MCU) $(CANDCPP_DEFINES) $(CANDCPP_INCLUDES) $(OPTIMIZATION) -std=$(CSTANDARD)\
\
-Wall -fdata-sections -ffunction-sections -ggdb
CPPFLAGS = $(MCU) $(CANDCPP_DEFINES) $(CANDCPP_INCLUDES) $(OPTIMIZATION) -std=$(CPPSTANDARD)\
\
-Wall -fdata-sections -ffunction-sections -fno-exceptions -ggdb
#	 Create dependencies info
CFLAGS += -MMD -MP -MF$(@:%.o=%.d)
CPPFLAGS += -MMD -MP -MF$(@:%.o=%.d)
#-----------------------------------------------------------------------------------------
#	End of Source Flags
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Objects list
#-----------------------------------------------------------------------------------------
OBJECTS = $(addprefix $(BUILD_PATH)/,$(notdir $(C_SOURCE:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCE))) 
OBJECTS += $(addprefix $(BUILD_PATH)/,$(notdir $(CPP_SOURCE:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCE))) 
OBJECTS += $(addprefix $(BUILD_PATH)/,$(notdir $(ASM_SOURCE:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCE)))
DEPS := $(OBJECTS:.o=.d)
-include $(DEPS)
ASMOUTPUTFILE = $(OBJDUMP) -DSG -t -marm -w --start-address=$(FLASHSTART) --show-raw-insn \
--visualize-jumps --inlines $(OUTPUT_PATH)/$(TARGET).elf \
-Mforce-thumb -Mreg-names-std > $(OUTPUT_PATH)/$(TARGET).s
#-----------------------------------------------------------------------------------------
#	End of Objects list
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Output build
#-----------------------------------------------------------------------------------------
$(BUILD_PATH)/%.o: %.c Makefile | $(BUILD_PATH)
	@echo $<
	$(CC) $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_PATH)/$(notdir $(<:.c=.lst)) -c $< -o $@

$(BUILD_PATH)/%.o: %.cpp Makefile | $(BUILD_PATH)
	@echo $<
	$(CXX) $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_PATH)/$(notdir $(<:.cpp=.lst)) -c $< -o $@

$(BUILD_PATH)/%.o: %.s Makefile | $(BUILD_PATH)
	@echo $<
	$(AS) -c $(ASMFLAGS) $< -o $@

$(OUTPUT_PATH)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@

$(OUTPUT_PATH)/%.hex: $(OUTPUT_PATH)/%.elf | $(OUTPUT_PATH)
	$(HEX) $< $@
	$(SZ) $< $@

$(OUTPUT_PATH)/%.bin: $(OUTPUT_PATH)/%.elf | $(OUTPUT_PATH)
	$(BIN) $< $@
	$(ASMOUTPUTFILE)

$(BUILD_PATH): 
	mkdir $@

$(OUTPUT_PATH): 
	mkdir $@
#-----------------------------------------------------------------------------------------
#	End of Output build
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
#	Actions
#-----------------------------------------------------------------------------------------
all: $(OUTPUT_PATH)/$(TARGET).elf $(OUTPUT_PATH)/$(TARGET).hex $(OUTPUT_PATH)/$(TARGET).bin
	@echo "Build Completed."

clean:
	rm -rf $(OUTPUT_PATH)
	rm -rf $(BUILD_PATH)
	@echo "Clean Completed." 
#-----------------------------------------------------------------------------------------
#	End of Actions
#-----------------------------------------------------------------------------------------