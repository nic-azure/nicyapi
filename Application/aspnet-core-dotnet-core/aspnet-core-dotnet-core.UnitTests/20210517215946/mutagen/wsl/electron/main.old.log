[2021-04-27 16:05:35.679] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-27 16:05:35.689] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 16:05:35.690] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 16:05:35.763] [info] application ready
[2021-04-27 16:05:35.788] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:05:35.874] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:05:35.875] [info] using production config /dashboard
[2021-04-27 16:05:35.895] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:05:35.912] [info] ping received
[2021-04-27 16:05:35.959] [info] Response success for /notifications/subscriptions
[2021-04-27 16:05:35.960] [info] Response for POST /notifications/subscriptions
[2021-04-27 16:05:35.975] [verbose] 
[2021-04-27 16:05:35.969] [info] application ready
[2021-04-27 16:05:36.033] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:05:36.099] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:05:36.101] [info] using production config /dashboard
[2021-04-27 16:05:38.384] [verbose] GET /features params = null
[2021-04-27 16:05:38.389] [verbose] GET /settings params = null
[2021-04-27 16:05:38.392] [verbose] GET /versions params = null
[2021-04-27 16:05:38.396] [info] Response success for /features
[2021-04-27 16:05:38.397] [info] Response for GET /features
[2021-04-27 16:05:38.399] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:05:38.402] [verbose] GET /system/editor params = null
[2021-04-27 16:05:38.415] [verbose] GET /kubernetes params = null
[2021-04-27 16:05:38.419] [verbose] GET /registry/user params = null
[2021-04-27 16:05:38.422] [verbose] GET /docker params = null
[2021-04-27 16:05:38.427] [verbose] GET /update params = null
[2021-04-27 16:05:38.439] [info] Response success for /settings
[2021-04-27 16:05:38.441] [info] Response for GET /settings
[2021-04-27 16:05:38.442] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: false,
      showSystemContainers: false,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:05:38.458] [info] Response success for /registry/user
[2021-04-27 16:05:38.468] [info] Response for GET /registry/user
[2021-04-27 16:05:38.469] [verbose] { username: '' }
[2021-04-27 16:05:38.471] [info] Response success for /kubernetes
[2021-04-27 16:05:38.472] [info] Response for GET /kubernetes
[2021-04-27 16:05:38.474] [verbose] { state: 'stopped', enabled: false }
[2021-04-27 16:05:38.479] [info] Response success for /update
[2021-04-27 16:05:38.482] [info] Response for GET /update
[2021-04-27 16:05:38.485] [verbose] { updateAvailableTime: 0 }
[2021-04-27 16:05:38.491] [info] Response success for /docker
[2021-04-27 16:05:38.494] [info] Response for GET /docker
[2021-04-27 16:05:38.497] [verbose] { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:05:38.503] [info] Response success for /system/editor
[2021-04-27 16:05:38.505] [info] Response for GET /system/editor
[2021-04-27 16:05:38.507] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-27 16:05:38.593] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 16:05:38.692] [info] Response success for /system/disk-usage
[2021-04-27 16:05:38.693] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 16:05:38.695] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 247328
}
[2021-04-27 16:05:38.711] [verbose] GET /features params = null
[2021-04-27 16:05:38.761] [info] Response success for /features
[2021-04-27 16:05:38.762] [info] Response for GET /features
[2021-04-27 16:05:38.764] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:05:39.379] [info] Response success for /versions
[2021-04-27 16:05:39.380] [info] Response for GET /versions
[2021-04-27 16:05:39.382] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-27 16:05:45.669] [verbose] GET /settings params = null
[2021-04-27 16:05:45.672] [verbose] GET /features params = null
[2021-04-27 16:05:45.675] [info] Response success for /features
[2021-04-27 16:05:45.676] [info] Response for GET /features
[2021-04-27 16:05:45.677] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:05:45.686] [info] Response success for /settings
[2021-04-27 16:05:45.686] [info] Response for GET /settings
[2021-04-27 16:05:45.688] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: false,
      showSystemContainers: false,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:05:45.783] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 16:05:45.797] [info] Response success for /system/disk-usage
[2021-04-27 16:05:45.797] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 16:05:45.799] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 247328
}
[2021-04-27 16:05:52.962] [verbose] GET /settings/wsl2-distros params = null
[2021-04-27 16:05:53.045] [info] Response success for /settings/wsl2-distros
[2021-04-27 16:05:53.046] [info] Response for GET /settings/wsl2-distros
[2021-04-27 16:05:53.048] [verbose] []
[2021-04-27 16:05:54.823] [verbose] GET /settings/wsl2-distros params = null
[2021-04-27 16:05:54.888] [info] Response success for /settings/wsl2-distros
[2021-04-27 16:05:54.889] [info] Response for GET /settings/wsl2-distros
[2021-04-27 16:05:54.891] [verbose] []
[2021-04-27 16:13:14.038] [verbose] GET /settings params = null
[2021-04-27 16:13:14.052] [info] Response success for /settings
[2021-04-27 16:13:14.053] [info] Response for GET /settings
[2021-04-27 16:13:14.055] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: false,
      showSystemContainers: false,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:13:15.821] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":true,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-04-27 16:13:15.914] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:15.917] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:15.918] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 16:13:15.992] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:15.993] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:16.069] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:17.890] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:17.891] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:17.897] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:18.080] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:18.083] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:18.102] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:19.828] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:19.830] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:19.835] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:19.958] [info] Response success for /settings
[2021-04-27 16:13:19.959] [info] Response for POST /settings
[2021-04-27 16:13:19.972] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:13:20.007] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:20.026] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:20.036] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 16:13:20.067] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:20.088] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:20.095] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:20.204] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 16:13:20.227] [info] Response success for /system/disk-usage
[2021-04-27 16:13:20.231] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 16:13:20.234] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 247305
}
[2021-04-27 16:13:20.274] [verbose] GET /features params = null
[2021-04-27 16:13:20.278] [info] Response success for /features
[2021-04-27 16:13:20.282] [info] Response for GET /features
[2021-04-27 16:13:20.285] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:13:21.736] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:21.737] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:21.740] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:22.696] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:22.697] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:22.706] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:23.671] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-04-27 16:13:23.672] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-04-27 16:13:23.675] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-04-27 16:13:24.471] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-04-27 16:13:24.472] [info] kubernetes state notification { state: 'failed to start', enabled: true }
[2021-04-27 16:13:24.474] [info] notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-04-27 16:13:24.512] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:24.514] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:24.517] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:34.550] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: false }
[2021-04-27 16:13:34.590] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:34.591] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:34.595] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 16:13:34.853] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:34.854] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:34.857] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 16:13:34.872] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:34.873] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 16:13:34.877] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 16:13:35.085] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:35.086] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:13:35.090] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 16:13:35.162] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:35.228] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:35.236] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:36.697] [info] Response success for /desktop/cleanup
[2021-04-27 16:13:36.698] [info] Response for POST /desktop/cleanup
[2021-04-27 16:13:36.703] [verbose] 
[2021-04-27 16:13:36.707] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:36.709] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:36.713] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:38.033] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:38.035] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:38.038] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:39.493] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:39.494] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:39.498] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:13:43.880] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:43.881] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:13:43.887] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:13:45.414] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:45.415] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:13:45.419] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:14:03.236] [verbose] GET /settings params = null
[2021-04-27 16:14:03.239] [verbose] GET /features params = null
[2021-04-27 16:14:03.254] [info] Response success for /features
[2021-04-27 16:14:03.256] [info] Response for GET /features
[2021-04-27 16:14:03.258] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:14:03.265] [info] Response success for /settings
[2021-04-27 16:14:03.269] [info] Response for GET /settings
[2021-04-27 16:14:03.273] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:14:03.421] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 16:14:03.483] [info] Response success for /system/disk-usage
[2021-04-27 16:14:03.491] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 16:14:03.493] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 247311
}
[2021-04-27 16:14:13.989] [verbose] GET /settings params = null
[2021-04-27 16:14:14.003] [info] Response success for /settings
[2021-04-27 16:14:14.003] [info] Response for GET /settings
[2021-04-27 16:14:14.005] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:14:14.012] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":true,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-04-27 16:14:14.026] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 16:14:14.027] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 16:14:14.030] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 16:14:14.050] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:14:14.050] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:14:14.053] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:14:14.057] [info] Response success for /settings
[2021-04-27 16:14:14.058] [info] Response for POST /settings
[2021-04-27 16:14:14.060] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 16:14:14.267] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 16:14:14.281] [info] Response success for /system/disk-usage
[2021-04-27 16:14:14.281] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 16:14:14.284] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 247318
}
[2021-04-27 16:14:14.311] [verbose] GET /features params = null
[2021-04-27 16:14:14.314] [info] Response success for /features
[2021-04-27 16:14:14.315] [info] Response for GET /features
[2021-04-27 16:14:14.317] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:14:17.525] [verbose] POST /kubernetes/reset data = null
[2021-04-27 16:14:17.544] [info] Response success for /kubernetes/reset
[2021-04-27 16:14:17.545] [info] Response for POST /kubernetes/reset
[2021-04-27 16:14:17.550] [verbose] 
[2021-04-27 16:14:17.555] [debug] kubernetes state notification, req.body:  { state: 'stopping', enabled: true }
[2021-04-27 16:14:17.558] [info] kubernetes state notification { state: 'stopping', enabled: true }
[2021-04-27 16:14:17.561] [info] notification : {"type":"kubernetes.success","payload":{"state":"stopping","enabled":true}}
[2021-04-27 16:14:17.577] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-04-27 16:14:17.578] [info] kubernetes state notification { state: 'failed to start', enabled: true }
[2021-04-27 16:14:17.581] [info] notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-04-27 16:14:17.597] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-04-27 16:14:17.598] [info] kubernetes state notification { state: 'failed to start', enabled: true }
[2021-04-27 16:14:17.601] [info] notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-04-27 16:48:20.167] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:48:20.225] [info] application ready
[2021-04-27 16:48:20.269] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:48:20.339] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 16:48:20.343] [info] using production config /tutorial
[2021-04-27 16:48:44.402] [verbose] POST /registry/login data = { username: '', password: '' }
[2021-04-27 16:48:44.434] [info] Response success for /registry/login
[2021-04-27 16:48:44.436] [info] Response for POST /registry/login
[2021-04-27 16:48:44.439] [verbose] 
[2021-04-27 16:49:27.924] [debug] login state notification, req.body:  { username: 'neuromancer0001', logged: true }
[2021-04-27 16:49:27.926] [info] login state notification { username: 'neuromancer0001', logged: true }
[2021-04-27 16:49:27.930] [info] notification : {"type":"login.success","payload":{"username":"neuromancer0001","logged":true}}
[2021-04-27 16:49:27.958] [verbose] GET /features params = null
[2021-04-27 16:49:28.825] [info] Response success for /features
[2021-04-27 16:49:28.827] [info] Response for GET /features
[2021-04-27 16:49:28.833] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 16:49:36.529] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-04-27 16:49:36.532] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 4098.785000000149,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-04-27 16:49:36.535] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 2635.214999999851,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-04-27 16:49:36.541] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 2243.2299999999814,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-04-27 16:49:36.544] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3632.5099999997765,
    action: true,
    skip: false,
    terminal: false,
    signIn: true,
    done: true,
    name: 'Share'
  }
}
[2021-04-27 16:49:36.567] [info] Response success for /analytics/track
[2021-04-27 16:49:36.570] [info] Response for POST /analytics/track
[2021-04-27 16:49:36.572] [verbose] 
[2021-04-27 16:49:36.577] [info] Response success for /analytics/track
[2021-04-27 16:49:36.578] [info] Response for POST /analytics/track
[2021-04-27 16:49:36.580] [verbose] 
[2021-04-27 16:49:36.582] [info] Response success for /analytics/track
[2021-04-27 16:49:36.584] [info] Response for POST /analytics/track
[2021-04-27 16:49:36.586] [verbose] 
[2021-04-27 16:49:36.589] [info] Response success for /analytics/track
[2021-04-27 16:49:36.591] [info] Response for POST /analytics/track
[2021-04-27 16:49:36.593] [verbose] 
[2021-04-27 16:49:36.596] [info] Response success for /analytics/track
[2021-04-27 16:49:36.597] [info] Response for POST /analytics/track
[2021-04-27 16:49:36.599] [verbose] 
[2021-04-27 16:49:47.756] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-04-27 16:49:47.758] [info] engine state notification { state: 'starting', mode: 'windows' }
[2021-04-27 16:49:47.761] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-04-27 16:49:48.981] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-04-27 16:49:48.982] [info] engine state notification { state: 'failed to start', mode: 'windows' }
[2021-04-27 16:49:48.984] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-04-27 16:49:49.093] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 16:49:49.094] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 16:49:49.107] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 16:49:50.493] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.494] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.497] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 16:49:50.648] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 16:49:50.650] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 16:49:50.654] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 16:49:50.825] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.826] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.828] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 16:49:50.861] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:49:50.862] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 16:49:50.865] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 16:49:50.881] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.885] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 16:49:50.892] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:01:22.344] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-27 17:01:22.350] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 17:01:22.352] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 17:01:22.431] [info] application ready
[2021-04-27 17:01:22.461] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 17:01:22.545] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 17:01:22.601] [info] using production config /dashboard
[2021-04-27 17:01:22.645] [info] ping received
[2021-04-27 17:01:22.861] [info] Response success for /notifications/subscriptions
[2021-04-27 17:01:22.876] [info] Response for POST /notifications/subscriptions
[2021-04-27 17:01:22.880] [verbose] 
[2021-04-27 17:01:25.497] [verbose] GET /features params = null
[2021-04-27 17:01:25.504] [verbose] GET /settings params = null
[2021-04-27 17:01:25.514] [verbose] GET /versions params = null
[2021-04-27 17:01:25.547] [info] Response success for /features
[2021-04-27 17:01:25.549] [info] Response for GET /features
[2021-04-27 17:01:25.553] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:01:25.562] [verbose] GET /system/editor params = null
[2021-04-27 17:01:25.572] [info] Response success for /settings
[2021-04-27 17:01:25.577] [info] Response for GET /settings
[2021-04-27 17:01:25.583] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:01:25.598] [verbose] GET /kubernetes params = null
[2021-04-27 17:01:25.612] [verbose] GET /registry/user params = null
[2021-04-27 17:01:25.620] [verbose] GET /docker params = null
[2021-04-27 17:01:25.633] [verbose] GET /update params = null
[2021-04-27 17:01:25.653] [info] Response success for /system/editor
[2021-04-27 17:01:25.691] [info] Response for GET /system/editor
[2021-04-27 17:01:25.694] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-27 17:01:25.702] [info] Response success for /docker
[2021-04-27 17:01:25.704] [info] Response for GET /docker
[2021-04-27 17:01:25.709] [verbose] { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:01:25.714] [info] Response success for /kubernetes
[2021-04-27 17:01:25.717] [info] Response for GET /kubernetes
[2021-04-27 17:01:25.720] [verbose] { state: 'stopped', enabled: true }
[2021-04-27 17:01:25.725] [info] Response success for /registry/user
[2021-04-27 17:01:25.729] [info] Response for GET /registry/user
[2021-04-27 17:01:25.731] [verbose] { username: 'neuromancer0001' }
[2021-04-27 17:01:25.735] [info] Response success for /update
[2021-04-27 17:01:25.738] [info] Response for GET /update
[2021-04-27 17:01:25.742] [verbose] { updateAvailableTime: 0 }
[2021-04-27 17:01:25.899] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 17:01:25.993] [info] Response success for /system/disk-usage
[2021-04-27 17:01:25.994] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 17:01:25.997] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246961
}
[2021-04-27 17:01:26.079] [verbose] GET /features params = null
[2021-04-27 17:01:26.082] [info] Response success for /features
[2021-04-27 17:01:26.084] [info] Response for GET /features
[2021-04-27 17:01:26.087] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:01:28.205] [info] Response success for /versions
[2021-04-27 17:01:28.206] [info] Response for GET /versions
[2021-04-27 17:01:28.208] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-27 17:04:35.598] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: true }
[2021-04-27 17:04:35.679] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:35.683] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:35.691] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 17:04:35.767] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:35.771] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:35.790] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:04:35.827] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:35.843] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:35.846] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 17:04:36.024] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:36.025] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:36.035] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:04:36.057] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:36.070] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 17:04:36.075] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 17:04:36.362] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:36.364] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 17:04:36.368] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:04:36.421] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:04:36.581] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:04:36.606] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:04:38.234] [info] Response success for /desktop/cleanup
[2021-04-27 17:04:38.235] [info] Response for POST /desktop/cleanup
[2021-04-27 17:04:38.238] [verbose] 
[2021-04-27 17:04:38.243] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:04:38.246] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:04:38.249] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:04:40.631] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:04:40.632] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:04:40.637] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:04:42.233] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:04:42.234] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:04:42.237] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:04:46.707] [verbose] GET /settings params = null
[2021-04-27 17:04:46.709] [verbose] GET /features params = null
[2021-04-27 17:04:46.713] [info] Response success for /features
[2021-04-27 17:04:46.715] [info] Response for GET /features
[2021-04-27 17:04:46.717] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:04:46.725] [info] Response success for /settings
[2021-04-27 17:04:46.726] [info] Response for GET /settings
[2021-04-27 17:04:46.729] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:04:46.835] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 17:04:46.851] [info] Response success for /system/disk-usage
[2021-04-27 17:04:46.852] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 17:04:46.854] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246945
}
[2021-04-27 17:05:00.267] [verbose] POST /kubernetes/reset data = null
[2021-04-27 17:05:00.307] [info] Response success for /kubernetes/reset
[2021-04-27 17:05:00.308] [info] Response for POST /kubernetes/reset
[2021-04-27 17:05:00.313] [verbose] 
[2021-04-27 17:05:06.923] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-04-27 17:05:06.924] [info] kubernetes state notification { state: 'failed to start', enabled: true }
[2021-04-27 17:05:06.927] [info] notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-04-27 17:05:13.044] [verbose] GET /settings/wsl2-distros params = null
[2021-04-27 17:05:13.126] [info] Response success for /settings/wsl2-distros
[2021-04-27 17:05:13.127] [info] Response for GET /settings/wsl2-distros
[2021-04-27 17:05:13.129] [verbose] []
[2021-04-27 17:05:14.299] [verbose] GET /settings/wsl2-distros params = null
[2021-04-27 17:05:14.367] [info] Response success for /settings/wsl2-distros
[2021-04-27 17:05:14.367] [info] Response for GET /settings/wsl2-distros
[2021-04-27 17:05:14.370] [verbose] []
[2021-04-27 17:05:15.786] [verbose] GET /settings params = null
[2021-04-27 17:05:15.801] [info] Response success for /settings
[2021-04-27 17:05:15.802] [info] Response for GET /settings
[2021-04-27 17:05:15.804] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:05:15.811] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":true,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-04-27 17:05:15.870] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 17:05:15.871] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 17:05:15.874] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 17:05:15.986] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 17:05:15.987] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 17:05:15.993] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:05:16.053] [info] Response success for /settings
[2021-04-27 17:05:16.057] [info] Response for POST /settings
[2021-04-27 17:05:16.061] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:05:16.146] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:05:16.157] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:05:16.169] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:05:16.298] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 17:05:16.312] [info] Response success for /system/disk-usage
[2021-04-27 17:05:16.313] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 17:05:16.316] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246944
}
[2021-04-27 17:05:16.366] [verbose] GET /features params = null
[2021-04-27 17:05:16.369] [info] Response success for /features
[2021-04-27 17:05:16.370] [info] Response for GET /features
[2021-04-27 17:05:16.373] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:05:17.800] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:05:17.802] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:05:17.806] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:05:19.367] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:05:19.368] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:05:19.373] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:05:21.221] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:05:21.222] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:05:21.227] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:14:19.583] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 17:14:19.652] [info] application ready
[2021-04-27 17:14:19.688] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 17:14:19.752] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 17:14:19.753] [info] using production config /tutorial
[2021-04-27 17:14:39.047] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-04-27 17:14:39.050] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2849.6099999992875,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-04-27 17:14:39.053] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2386.45999999973,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-04-27 17:14:39.056] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2995.2050000000745,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-04-27 17:14:39.060] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2872.2550000002375,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-04-27 17:14:39.084] [info] Response success for /analytics/track
[2021-04-27 17:14:39.085] [info] Response for POST /analytics/track
[2021-04-27 17:14:39.088] [verbose] 
[2021-04-27 17:14:39.091] [info] Response success for /analytics/track
[2021-04-27 17:14:39.093] [info] Response for POST /analytics/track
[2021-04-27 17:14:39.096] [verbose] 
[2021-04-27 17:14:39.100] [info] Response success for /analytics/track
[2021-04-27 17:14:39.101] [info] Response for POST /analytics/track
[2021-04-27 17:14:39.103] [verbose] 
[2021-04-27 17:14:39.106] [info] Response success for /analytics/track
[2021-04-27 17:14:39.108] [info] Response for POST /analytics/track
[2021-04-27 17:14:39.110] [verbose] 
[2021-04-27 17:14:39.113] [info] Response success for /analytics/track
[2021-04-27 17:14:39.114] [info] Response for POST /analytics/track
[2021-04-27 17:14:39.116] [verbose] 
[2021-04-27 17:25:04.707] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-27 17:25:04.724] [info] Response success for /analytics/track
[2021-04-27 17:25:04.725] [info] Response for POST /analytics/track
[2021-04-27 17:25:04.727] [verbose] 
[2021-04-27 17:32:53.966] [verbose] GET /settings params = null
[2021-04-27 17:32:53.969] [verbose] GET /features params = null
[2021-04-27 17:32:53.974] [info] Response success for /features
[2021-04-27 17:32:53.978] [info] Response for GET /features
[2021-04-27 17:32:53.981] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:32:53.989] [info] Response success for /settings
[2021-04-27 17:32:53.992] [info] Response for GET /settings
[2021-04-27 17:32:53.995] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:32:54.113] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 17:32:54.126] [info] Response success for /system/disk-usage
[2021-04-27 17:32:54.127] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 17:32:54.129] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246920
}
[2021-04-27 17:33:07.265] [verbose] GET /settings params = null
[2021-04-27 17:33:07.279] [info] Response success for /settings
[2021-04-27 17:33:07.279] [info] Response for GET /settings
[2021-04-27 17:33:07.282] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:33:07.289] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":true,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-04-27 17:33:07.305] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 17:33:07.306] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 17:33:07.309] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 17:33:07.339] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 17:33:07.340] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 17:33:07.349] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 17:33:07.355] [info] Response success for /settings
[2021-04-27 17:33:07.366] [info] Response for POST /settings
[2021-04-27 17:33:07.370] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 17:33:07.627] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:33:07.630] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:33:07.634] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:33:07.757] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 17:33:07.773] [info] Response success for /system/disk-usage
[2021-04-27 17:33:07.775] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 17:33:07.779] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246924
}
[2021-04-27 17:33:07.817] [verbose] GET /features params = null
[2021-04-27 17:33:07.823] [info] Response success for /features
[2021-04-27 17:33:07.832] [info] Response for GET /features
[2021-04-27 17:33:07.845] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 17:33:09.561] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:33:09.562] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:33:09.568] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:33:21.982] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 17:33:21.983] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 17:33:21.987] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 17:33:23.858] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:33:23.859] [info] engine state notification { state: 'failed to start', mode: 'linux' }
[2021-04-27 17:33:23.863] [info] notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-04-27 17:37:28.837] [verbose] POST /diagnostics/gather data = null
[2021-04-27 17:37:28.844] [info] Response success for /diagnostics/gather
[2021-04-27 17:37:28.845] [info] Response for POST /diagnostics/gather
[2021-04-27 17:37:28.848] [verbose] {
  id: '5F6D035B-6A45-4D55-B1A0-36391A1FC0DF/20210427153728',
  path: 'C:\\Users\\Neuro\\AppData\\Local\\Temp\\5F6D035B-6A45-4D55-B1A0-36391A1FC0DF\\20210427153728.zip',
  status: ''
}
[2021-04-27 17:37:33.841] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:33.848] [info] Response success for /diagnostics/status
[2021-04-27 17:37:33.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:33.854] [verbose] { status: 'running' }
[2021-04-27 17:37:38.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:38.853] [info] Response success for /diagnostics/status
[2021-04-27 17:37:38.856] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:38.859] [verbose] { status: 'running' }
[2021-04-27 17:37:43.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:43.856] [info] Response success for /diagnostics/status
[2021-04-27 17:37:43.858] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:43.862] [verbose] { status: 'running' }
[2021-04-27 17:37:48.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:48.855] [info] Response success for /diagnostics/status
[2021-04-27 17:37:48.857] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:48.861] [verbose] { status: 'running' }
[2021-04-27 17:37:53.857] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:53.863] [info] Response success for /diagnostics/status
[2021-04-27 17:37:53.868] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:53.872] [verbose] { status: 'running' }
[2021-04-27 17:37:58.845] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:37:58.848] [info] Response success for /diagnostics/status
[2021-04-27 17:37:58.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:37:58.852] [verbose] { status: 'running' }
[2021-04-27 17:38:03.847] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:03.850] [info] Response success for /diagnostics/status
[2021-04-27 17:38:03.853] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:03.855] [verbose] { status: 'running' }
[2021-04-27 17:38:08.840] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:08.843] [info] Response success for /diagnostics/status
[2021-04-27 17:38:08.845] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:08.847] [verbose] { status: 'running' }
[2021-04-27 17:38:13.840] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:13.843] [info] Response success for /diagnostics/status
[2021-04-27 17:38:13.844] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:13.847] [verbose] { status: 'running' }
[2021-04-27 17:38:18.845] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:18.848] [info] Response success for /diagnostics/status
[2021-04-27 17:38:18.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:18.853] [verbose] { status: 'running' }
[2021-04-27 17:38:23.846] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:23.849] [info] Response success for /diagnostics/status
[2021-04-27 17:38:23.851] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:23.853] [verbose] { status: 'running' }
[2021-04-27 17:38:28.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:28.853] [info] Response success for /diagnostics/status
[2021-04-27 17:38:28.855] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:28.858] [verbose] { status: 'running' }
[2021-04-27 17:38:33.839] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:33.842] [info] Response success for /diagnostics/status
[2021-04-27 17:38:33.843] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:33.846] [verbose] { status: 'running' }
[2021-04-27 17:38:38.839] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:38.843] [info] Response success for /diagnostics/status
[2021-04-27 17:38:38.844] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:38.847] [verbose] { status: 'running' }
[2021-04-27 17:38:43.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:43.855] [info] Response success for /diagnostics/status
[2021-04-27 17:38:43.857] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:43.861] [verbose] { status: 'running' }
[2021-04-27 17:38:48.854] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:48.858] [info] Response success for /diagnostics/status
[2021-04-27 17:38:48.860] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:48.864] [verbose] { status: 'running' }
[2021-04-27 17:38:53.846] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:53.849] [info] Response success for /diagnostics/status
[2021-04-27 17:38:53.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:53.852] [verbose] { status: 'running' }
[2021-04-27 17:38:58.854] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:38:58.859] [info] Response success for /diagnostics/status
[2021-04-27 17:38:58.863] [info] Response for GET /diagnostics/status
[2021-04-27 17:38:58.866] [verbose] { status: 'running' }
[2021-04-27 17:39:03.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:03.855] [info] Response success for /diagnostics/status
[2021-04-27 17:39:03.857] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:03.862] [verbose] { status: 'running' }
[2021-04-27 17:39:08.848] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:08.853] [info] Response success for /diagnostics/status
[2021-04-27 17:39:08.855] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:08.859] [verbose] { status: 'running' }
[2021-04-27 17:39:13.845] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:13.847] [info] Response success for /diagnostics/status
[2021-04-27 17:39:14.263] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:14.267] [verbose] { status: 'running' }
[2021-04-27 17:39:18.842] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:18.848] [info] Response success for /diagnostics/status
[2021-04-27 17:39:18.852] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:18.858] [verbose] { status: 'running' }
[2021-04-27 17:39:23.844] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:23.849] [info] Response success for /diagnostics/status
[2021-04-27 17:39:23.853] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:23.857] [verbose] { status: 'running' }
[2021-04-27 17:39:28.852] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:28.855] [info] Response success for /diagnostics/status
[2021-04-27 17:39:28.856] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:28.858] [verbose] { status: 'running' }
[2021-04-27 17:39:33.844] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:33.850] [info] Response success for /diagnostics/status
[2021-04-27 17:39:33.852] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:33.857] [verbose] { status: 'running' }
[2021-04-27 17:39:38.846] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:38.851] [info] Response success for /diagnostics/status
[2021-04-27 17:39:38.853] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:38.857] [verbose] { status: 'running' }
[2021-04-27 17:39:43.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:43.855] [info] Response success for /diagnostics/status
[2021-04-27 17:39:43.857] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:43.861] [verbose] { status: 'running' }
[2021-04-27 17:39:48.843] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:48.848] [info] Response success for /diagnostics/status
[2021-04-27 17:39:48.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:48.854] [verbose] { status: 'running' }
[2021-04-27 17:39:53.839] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:53.842] [info] Response success for /diagnostics/status
[2021-04-27 17:39:53.843] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:53.846] [verbose] { status: 'running' }
[2021-04-27 17:39:58.846] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:39:58.849] [info] Response success for /diagnostics/status
[2021-04-27 17:39:58.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:39:58.853] [verbose] { status: 'running' }
[2021-04-27 17:40:03.850] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:40:03.853] [info] Response success for /diagnostics/status
[2021-04-27 17:40:03.855] [info] Response for GET /diagnostics/status
[2021-04-27 17:40:03.857] [verbose] { status: 'running' }
[2021-04-27 17:40:08.846] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:40:08.849] [info] Response success for /diagnostics/status
[2021-04-27 17:40:08.850] [info] Response for GET /diagnostics/status
[2021-04-27 17:40:08.853] [verbose] { status: 'running' }
[2021-04-27 17:40:13.840] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:40:13.844] [info] Response success for /diagnostics/status
[2021-04-27 17:40:13.846] [info] Response for GET /diagnostics/status
[2021-04-27 17:40:13.850] [verbose] { status: 'running' }
[2021-04-27 17:40:18.852] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:40:18.857] [info] Response success for /diagnostics/status
[2021-04-27 17:40:18.859] [info] Response for GET /diagnostics/status
[2021-04-27 17:40:18.863] [verbose] { status: 'ready' }
[2021-04-27 17:40:23.398] [verbose] POST /diagnostics/upload data = { id: '5F6D035B-6A45-4D55-B1A0-36391A1FC0DF/20210427153728' }
[2021-04-27 17:40:23.401] [info] Response success for /diagnostics/upload
[2021-04-27 17:40:23.403] [info] Response for POST /diagnostics/upload
[2021-04-27 17:40:23.406] [verbose] 
[2021-04-27 17:40:28.436] [verbose] GET /diagnostics/status params = null
[2021-04-27 17:40:28.441] [info] Response success for /diagnostics/status
[2021-04-27 17:40:28.446] [info] Response for GET /diagnostics/status
[2021-04-27 17:40:28.450] [verbose] { status: 'ready' }
[2021-04-27 17:49:39.469] [info] quitting application
[2021-04-27 17:49:39.471] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 17:49:39.481] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 18:47:38.626] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-27 18:47:38.637] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 18:47:38.640] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 18:47:38.730] [info] application ready
[2021-04-27 18:47:38.756] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 18:47:38.920] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 18:47:38.922] [info] using production config /dashboard
[2021-04-27 18:47:38.990] [info] Response success for /notifications/subscriptions
[2021-04-27 18:47:39.198] [info] Response for POST /notifications/subscriptions
[2021-04-27 18:47:39.204] [verbose] 
[2021-04-27 18:47:42.584] [verbose] GET /features params = null
[2021-04-27 18:47:42.590] [verbose] GET /settings params = null
[2021-04-27 18:47:42.596] [verbose] GET /versions params = null
[2021-04-27 18:47:42.607] [verbose] GET /system/editor params = null
[2021-04-27 18:47:42.648] [info] Response success for /features
[2021-04-27 18:47:42.649] [info] Response for GET /features
[2021-04-27 18:47:42.653] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 18:47:42.661] [verbose] GET /kubernetes params = null
[2021-04-27 18:47:42.673] [verbose] GET /registry/user params = null
[2021-04-27 18:47:42.690] [verbose] GET /docker params = null
[2021-04-27 18:47:42.715] [verbose] GET /update params = null
[2021-04-27 18:47:42.764] [info] Response success for /system/editor
[2021-04-27 18:47:42.773] [info] Response for GET /system/editor
[2021-04-27 18:47:42.776] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-27 18:47:42.782] [info] Response success for /settings
[2021-04-27 18:47:42.789] [info] Response for GET /settings
[2021-04-27 18:47:42.792] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 18:47:42.803] [info] Response success for /kubernetes
[2021-04-27 18:47:42.806] [info] Response for GET /kubernetes
[2021-04-27 18:47:42.810] [verbose] { state: 'failed to start', enabled: true }
[2021-04-27 18:47:42.815] [info] Response success for /registry/user
[2021-04-27 18:47:42.820] [info] Response for GET /registry/user
[2021-04-27 18:47:42.825] [verbose] { username: 'neuromancer0001' }
[2021-04-27 18:47:42.829] [info] Response success for /docker
[2021-04-27 18:47:42.832] [info] Response for GET /docker
[2021-04-27 18:47:42.838] [verbose] { state: 'failed to start', mode: 'linux' }
[2021-04-27 18:47:42.844] [info] Response success for /update
[2021-04-27 18:47:42.847] [info] Response for GET /update
[2021-04-27 18:47:42.854] [verbose] { updateAvailableTime: 0 }
[2021-04-27 18:47:43.015] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 18:47:43.030] [info] Response success for /system/disk-usage
[2021-04-27 18:47:43.033] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 18:47:43.037] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 246203
}
[2021-04-27 18:47:43.230] [verbose] GET /features params = null
[2021-04-27 18:47:43.237] [info] Response success for /features
[2021-04-27 18:47:43.239] [info] Response for GET /features
[2021-04-27 18:47:43.242] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 18:47:45.038] [info] Response success for /versions
[2021-04-27 18:47:45.039] [info] Response for GET /versions
[2021-04-27 18:47:45.041] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-27 18:47:59.974] [verbose] GET /registry/token params = null
[2021-04-27 18:47:59.978] [verbose] GET /registry/token params = null
[2021-04-27 18:47:59.998] [info] Response success for /registry/token
[2021-04-27 18:48:00.012] [info] Response for GET /registry/token
[2021-04-27 18:48:00.021] [info] ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-04-27 18:48:00.032] [info] Response success for /registry/token
[2021-04-27 18:48:00.038] [info] Response for GET /registry/token
[2021-04-27 18:48:00.041] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-04-27 18:48:00.664] [info] Response for GET /v2/user/orgs/?page_size=100
[2021-04-27 18:48:00.665] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-04-27 18:48:01.205] [info] Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-04-27 18:48:01.206] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 38,
      last_updated: '2021-04-15T17:14:03.645616Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 4,
      last_updated: '2021-01-15T18:47:09.497344Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-04-27 18:48:01.214] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-04-27 18:48:01.218] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-04-27 18:48:01.225] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-04-27 18:48:01.229] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-04-27 18:48:01.234] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-04-27 18:48:01.651] [info] Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-04-27 18:48:01.652] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:01.657] [info] Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-04-27 18:48:01.659] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:01.663] [info] Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-04-27 18:48:01.665] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:eb67022fc23963143ee906935abcaada4829f8e0db0a9fa08b3f533da88c5898',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 14256912,
          status: 'active',
          last_pulled: '2021-04-15T19:12:17.835775Z',
          last_pushed: '2021-04-15T17:14:03.279288Z'
        }
      ],
      last_updated: '2021-04-15T17:14:03.279288Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 14256912,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-04-15T19:12:17.835775Z',
      tag_last_pushed: '2021-04-15T17:14:03.279288Z'
    }
  ]
}
[2021-04-27 18:48:01.673] [info] Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-04-27 18:48:01.675] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'inactive',
          last_pulled: '2021-01-15T23:42:58.470166Z',
          last_pushed: '2021-01-15T18:46:57.894663Z'
        }
      ],
      last_updated: '2021-01-15T18:46:57.894663Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'inactive',
      tag_last_pulled: '2021-01-15T23:42:58.470166Z',
      tag_last_pushed: '2021-01-15T18:46:57.894663Z'
    }
  ]
}
[2021-04-27 18:48:01.691] [info] Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-04-27 18:48:01.692] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:01.755] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-04-27 18:48:01.761] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-04-27 18:48:01.767] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-04-27 18:48:01.773] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-04-27 18:48:01.777] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-04-27 18:48:02.277] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-04-27 18:48:02.277] [verbose] 
[2021-04-27 18:48:02.282] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-04-27 18:48:02.286] [verbose] 
[2021-04-27 18:48:02.292] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-04-27 18:48:02.293] [verbose] 
[2021-04-27 18:48:02.298] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-04-27 18:48:02.300] [verbose] 
[2021-04-27 18:48:02.313] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-04-27 18:48:02.314] [verbose] 
[2021-04-27 18:48:11.505] [info] ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-04-27 18:48:11.509] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-04-27 18:48:12.008] [info] Response for GET /v2/user/orgs/?page_size=100
[2021-04-27 18:48:12.009] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-04-27 18:48:12.522] [info] Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-04-27 18:48:12.523] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 38,
      last_updated: '2021-04-15T17:14:03.645616Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 4,
      last_updated: '2021-01-15T18:47:09.497344Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-04-27 18:48:12.530] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-04-27 18:48:12.535] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-04-27 18:48:12.541] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-04-27 18:48:12.545] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-04-27 18:48:12.550] [info] ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-04-27 18:48:12.955] [info] Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-04-27 18:48:12.956] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:eb67022fc23963143ee906935abcaada4829f8e0db0a9fa08b3f533da88c5898',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 14256912,
          status: 'active',
          last_pulled: '2021-04-15T19:12:17.835775Z',
          last_pushed: '2021-04-15T17:14:03.279288Z'
        }
      ],
      last_updated: '2021-04-15T17:14:03.279288Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 14256912,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-04-15T19:12:17.835775Z',
      tag_last_pushed: '2021-04-15T17:14:03.279288Z'
    }
  ]
}
[2021-04-27 18:48:12.997] [info] Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-04-27 18:48:12.997] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:13.004] [info] Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-04-27 18:48:13.007] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'inactive',
          last_pulled: '2021-01-15T23:42:58.470166Z',
          last_pushed: '2021-01-15T18:46:57.894663Z'
        }
      ],
      last_updated: '2021-01-15T18:46:57.894663Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'inactive',
      tag_last_pulled: '2021-01-15T23:42:58.470166Z',
      tag_last_pushed: '2021-01-15T18:46:57.894663Z'
    }
  ]
}
[2021-04-27 18:48:13.011] [info] Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-04-27 18:48:13.013] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:13.048] [info] Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-04-27 18:48:13.049] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-04-27 18:48:13.136] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-04-27 18:48:13.148] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-04-27 18:48:13.156] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-04-27 18:48:13.169] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-04-27 18:48:13.176] [info] ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-04-27 18:48:13.643] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-04-27 18:48:13.644] [verbose] 
[2021-04-27 18:48:13.653] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-04-27 18:48:13.689] [verbose] 
[2021-04-27 18:48:13.696] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-04-27 18:48:13.702] [verbose] 
[2021-04-27 18:48:13.708] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-04-27 18:48:13.713] [verbose] 
[2021-04-27 18:48:13.718] [info] Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-04-27 18:48:13.721] [verbose] 
[2021-04-27 18:57:48.914] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: true }
[2021-04-27 18:57:48.974] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:48.979] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:48.984] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 18:57:49.095] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.096] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.106] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 18:57:49.127] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:49.129] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:49.135] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 18:57:49.177] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.180] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.186] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 18:57:49.211] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:49.224] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-27 18:57:49.233] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-27 18:57:49.544] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.546] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-04-27 18:57:49.558] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-04-27 18:57:49.620] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-04-27 18:57:49.621] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-04-27 18:57:49.627] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-04-27 18:58:38.626] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-04-27 18:58:38.628] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-04-27 18:58:38.635] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-04-27 18:58:38.824] [info] Response success for /desktop/cleanup
[2021-04-27 18:58:38.826] [info] Response for POST /desktop/cleanup
[2021-04-27 18:58:38.831] [verbose] 
[2021-04-27 18:58:38.998] [info] Starting request on Docker socket GET /events undefined
[2021-04-27 18:58:39.014] [info] Response for GET /events
[2021-04-27 18:58:39.515] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 18:58:39.587] [info] application ready
[2021-04-27 18:58:39.627] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 18:58:39.715] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 18:58:39.766] [info] using production config /tutorial
[2021-04-27 18:58:42.827] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-04-27 18:58:42.828] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-04-27 18:58:42.831] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-04-27 19:01:52.301] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-04-27 19:01:52.305] [info] kubernetes state notification { state: 'running', enabled: true }
[2021-04-27 19:01:52.350] [info] notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-04-27 19:04:51.858] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-04-27 19:04:51.861] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 29764.70499999961,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-04-27 19:04:51.868] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 4765.770000000019,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-04-27 19:04:51.874] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 26699.65000000049,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-04-27 19:04:51.880] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 51865.874999999534,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-04-27 19:04:51.886] [info] Response success for /analytics/track
[2021-04-27 19:04:51.892] [info] Response for POST /analytics/track
[2021-04-27 19:04:51.894] [verbose] 
[2021-04-27 19:04:51.898] [info] Response success for /analytics/track
[2021-04-27 19:04:51.901] [info] Response for POST /analytics/track
[2021-04-27 19:04:51.904] [verbose] 
[2021-04-27 19:04:51.908] [info] Response success for /analytics/track
[2021-04-27 19:04:51.909] [info] Response for POST /analytics/track
[2021-04-27 19:04:51.912] [verbose] 
[2021-04-27 19:04:51.915] [info] Response success for /analytics/track
[2021-04-27 19:04:51.916] [info] Response for POST /analytics/track
[2021-04-27 19:04:51.919] [verbose] 
[2021-04-27 19:04:51.921] [info] Response success for /analytics/track
[2021-04-27 19:04:51.923] [info] Response for POST /analytics/track
[2021-04-27 19:04:51.925] [verbose] 
[2021-04-27 19:05:04.317] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-27 19:05:04.332] [info] Response success for /usage
[2021-04-27 19:05:04.332] [info] Response for POST /usage
[2021-04-27 19:05:04.335] [verbose] 
[2021-04-27 19:05:18.214] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-27 19:05:18.228] [info] Response success for /usage
[2021-04-27 19:05:18.229] [info] Response for POST /usage
[2021-04-27 19:05:18.231] [verbose] 
[2021-04-27 19:07:10.922] [info] quitting application
[2021-04-27 19:07:10.936] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 19:07:10.942] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 19:11:52.723] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-27 19:11:52.736] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 19:11:52.745] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-27 19:11:52.955] [info] application ready
[2021-04-27 19:11:52.979] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 19:11:53.264] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-27 19:11:53.265] [info] using production config /dashboard
[2021-04-27 19:11:53.448] [info] ping received
[2021-04-27 19:11:53.510] [info] Response success for /notifications/subscriptions
[2021-04-27 19:11:53.511] [info] Response for POST /notifications/subscriptions
[2021-04-27 19:11:53.515] [verbose] 
[2021-04-27 19:11:57.304] [verbose] GET /features params = null
[2021-04-27 19:11:57.311] [verbose] GET /settings params = null
[2021-04-27 19:11:57.314] [verbose] GET /versions params = null
[2021-04-27 19:11:57.321] [info] Response success for /features
[2021-04-27 19:11:57.322] [info] Response for GET /features
[2021-04-27 19:11:57.324] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 19:11:57.327] [verbose] GET /system/editor params = null
[2021-04-27 19:11:57.336] [verbose] GET /kubernetes params = null
[2021-04-27 19:11:57.343] [verbose] GET /registry/user params = null
[2021-04-27 19:11:57.351] [verbose] GET /docker params = null
[2021-04-27 19:11:57.361] [verbose] GET /update params = null
[2021-04-27 19:11:57.370] [info] Response success for /settings
[2021-04-27 19:11:57.412] [info] Response for GET /settings
[2021-04-27 19:11:57.423] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 19:11:57.450] [info] Response success for /system/editor
[2021-04-27 19:11:57.452] [info] Response for GET /system/editor
[2021-04-27 19:11:57.455] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-27 19:11:57.466] [info] Response success for /kubernetes
[2021-04-27 19:11:57.470] [info] Response for GET /kubernetes
[2021-04-27 19:11:57.474] [verbose] { state: 'running', enabled: true }
[2021-04-27 19:11:57.482] [info] Response success for /registry/user
[2021-04-27 19:11:57.483] [info] Response for GET /registry/user
[2021-04-27 19:11:57.485] [verbose] { username: 'neuromancer0001' }
[2021-04-27 19:11:57.489] [info] Response success for /docker
[2021-04-27 19:11:57.491] [info] Response for GET /docker
[2021-04-27 19:11:57.493] [verbose] { state: 'running', mode: 'linux' }
[2021-04-27 19:11:57.496] [info] Response success for /update
[2021-04-27 19:11:57.499] [info] Response for GET /update
[2021-04-27 19:11:57.503] [verbose] { updateAvailableTime: 0 }
[2021-04-27 19:11:57.634] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 19:11:57.713] [info] Response success for /system/disk-usage
[2021-04-27 19:11:57.713] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 19:11:57.720] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 242854
}
[2021-04-27 19:11:57.913] [verbose] GET /features params = null
[2021-04-27 19:11:57.942] [info] Response success for /features
[2021-04-27 19:11:57.943] [info] Response for GET /features
[2021-04-27 19:11:57.945] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-27 19:11:58.198] [info] Starting request on Docker socket GET /events undefined
[2021-04-27 19:11:58.204] [info] Response for GET /events
[2021-04-27 19:11:58.295] [info] Response success for /versions
[2021-04-27 19:11:58.296] [info] Response for GET /versions
[2021-04-27 19:11:58.300] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-27 19:11:58.695] [verbose] POST /tip/last-viewed data = { timestamp: 1619543518698, id: 12 }
[2021-04-27 19:11:58.698] [verbose] POST /analytics/track data = { event: 'actionShowTip', body: { tipId: 12 } }
[2021-04-27 19:11:58.760] [info] Response success for /tip/last-viewed
[2021-04-27 19:11:58.761] [info] Response for POST /tip/last-viewed
[2021-04-27 19:11:58.764] [verbose] 
[2021-04-27 19:11:58.788] [info] Response success for /analytics/track
[2021-04-27 19:11:58.789] [info] Response for POST /analytics/track
[2021-04-27 19:11:58.792] [verbose] 
[2021-04-27 19:12:03.502] [verbose] GET /settings params = null
[2021-04-27 19:12:03.519] [info] Response success for /settings
[2021-04-27 19:12:03.520] [info] Response for GET /settings
[2021-04-27 19:12:03.523] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-27 19:12:03.695] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-27 19:12:03.714] [info] Response success for /system/disk-usage
[2021-04-27 19:12:03.718] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-27 19:12:03.725] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 242852
}
[2021-04-27 19:12:10.106] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-27 19:12:10.122] [info] Response success for /analytics/track
[2021-04-27 19:12:10.124] [info] Response for POST /analytics/track
[2021-04-27 19:12:10.127] [verbose] 
[2021-04-27 19:24:13.213] [info] quitting application
[2021-04-27 19:24:13.215] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-27 19:24:13.221] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-28 05:40:46.428] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-28 05:40:46.442] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-28 05:40:46.446] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-28 05:40:46.644] [info] application ready
[2021-04-28 05:40:46.672] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 05:40:47.050] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 05:40:47.052] [info] using production config /dashboard
[2021-04-28 05:40:47.573] [info] ping received
[2021-04-28 05:40:47.612] [info] Response success for /notifications/subscriptions
[2021-04-28 05:40:47.613] [info] Response for POST /notifications/subscriptions
[2021-04-28 05:40:47.616] [verbose] 
[2021-04-28 05:40:51.786] [verbose] GET /features params = null
[2021-04-28 05:40:51.793] [verbose] GET /settings params = null
[2021-04-28 05:40:51.810] [verbose] GET /versions params = null
[2021-04-28 05:40:51.824] [verbose] GET /system/editor params = null
[2021-04-28 05:40:51.835] [verbose] GET /kubernetes params = null
[2021-04-28 05:40:51.843] [verbose] GET /registry/user params = null
[2021-04-28 05:40:51.859] [info] Response success for /features
[2021-04-28 05:40:51.864] [info] Response for GET /features
[2021-04-28 05:40:51.870] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 05:40:51.878] [verbose] GET /docker params = null
[2021-04-28 05:40:51.887] [verbose] GET /update params = null
[2021-04-28 05:40:51.933] [info] Response success for /system/editor
[2021-04-28 05:40:51.940] [info] Response for GET /system/editor
[2021-04-28 05:40:51.945] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-28 05:40:52.595] [info] Response success for /settings
[2021-04-28 05:40:52.596] [info] Response for GET /settings
[2021-04-28 05:40:52.605] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-28 05:40:52.610] [info] Response success for /docker
[2021-04-28 05:40:52.618] [info] Response for GET /docker
[2021-04-28 05:40:52.622] [verbose] { state: 'starting', mode: 'linux' }
[2021-04-28 05:40:52.781] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-28 05:40:53.580] [info] Response success for /kubernetes
[2021-04-28 05:40:53.581] [info] Response for GET /kubernetes
[2021-04-28 05:40:53.587] [verbose] { state: 'stopped', enabled: true }
[2021-04-28 05:40:53.592] [info] Response success for /registry/user
[2021-04-28 05:40:53.596] [info] Response for GET /registry/user
[2021-04-28 05:40:53.600] [verbose] { username: 'neuromancer0001' }
[2021-04-28 05:40:53.604] [info] Response success for /update
[2021-04-28 05:40:53.607] [info] Response for GET /update
[2021-04-28 05:40:53.612] [verbose] { updateAvailableTime: 0 }
[2021-04-28 05:40:53.767] [verbose] GET /features params = null
[2021-04-28 05:40:53.772] [info] Response success for /features
[2021-04-28 05:40:53.777] [info] Response for GET /features
[2021-04-28 05:40:53.780] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 05:40:55.580] [info] Response success for /system/disk-usage
[2021-04-28 05:40:55.582] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-28 05:40:55.586] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 228977
}
[2021-04-28 05:40:55.591] [info] Response success for /versions
[2021-04-28 05:40:55.596] [info] Response for GET /versions
[2021-04-28 05:40:55.599] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-28 05:41:24.152] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-04-28 05:41:24.158] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-04-28 05:41:24.170] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-04-28 05:41:24.363] [info] Starting request on Docker socket GET /events undefined
[2021-04-28 05:41:24.372] [info] Response for GET /events
[2021-04-28 05:41:27.040] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-04-28 05:41:27.042] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-04-28 05:41:27.045] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-04-28 05:42:48.970] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-04-28 05:42:48.973] [info] kubernetes state notification { state: 'running', enabled: true }
[2021-04-28 05:42:48.977] [info] notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-04-28 05:58:19.723] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-28 05:58:19.812] [info] Response success for /analytics/track
[2021-04-28 05:58:19.854] [info] Response for POST /analytics/track
[2021-04-28 05:58:19.858] [verbose] 
[2021-04-28 05:58:34.248] [info] quitting application
[2021-04-28 05:58:34.249] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-28 05:58:34.264] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-28 07:50:22.496] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-28 07:50:22.673] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-28 07:50:23.207] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-28 07:50:25.862] [info] application ready
[2021-04-28 07:50:26.272] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 07:50:27.501] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 07:50:27.506] [info] using production config /dashboard
[2021-04-28 07:50:30.132] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 07:50:31.289] [info] application ready
[2021-04-28 07:50:31.928] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 07:50:32.892] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 07:50:33.300] [info] using production config /tutorial
[2021-04-28 07:51:13.288] [verbose] GET /features params = null
[2021-04-28 07:51:13.525] [verbose] GET /settings params = null
[2021-04-28 07:51:13.718] [verbose] GET /versions params = null
[2021-04-28 07:51:13.927] [verbose] GET /system/editor params = null
[2021-04-28 07:51:14.113] [verbose] GET /kubernetes params = null
[2021-04-28 07:51:14.299] [verbose] GET /registry/user params = null
[2021-04-28 07:51:14.475] [verbose] GET /docker params = null
[2021-04-28 07:51:14.652] [verbose] GET /update params = null
[2021-04-28 07:51:28.714] [info] Response success for /system/editor
[2021-04-28 07:51:28.888] [info] Response for GET /system/editor
[2021-04-28 07:51:29.210] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-28 07:51:34.944] [info] Response success for /features
[2021-04-28 07:51:35.106] [info] Response for GET /features
[2021-04-28 07:51:35.452] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 08:01:27.812] [info] Response success for /update
[2021-04-28 08:01:27.814] [info] Response for GET /update
[2021-04-28 08:01:28.025] [verbose] { updateAvailableTime: 0 }
[2021-04-28 08:01:28.396] [info] Response success for /docker
[2021-04-28 08:01:28.822] [info] Response for GET /docker
[2021-04-28 08:01:29.180] [verbose] { state: 'running', mode: 'linux' }
[2021-04-28 08:01:29.507] [info] Response success for /kubernetes
[2021-04-28 08:01:29.808] [info] Response for GET /kubernetes
[2021-04-28 08:01:30.193] [verbose] { state: 'running', enabled: true }
[2021-04-28 08:01:30.531] [info] Response success for /registry/user
[2021-04-28 08:01:30.881] [info] Response for GET /registry/user
[2021-04-28 08:01:31.246] [verbose] { username: 'neuromancer0001' }
[2021-04-28 08:01:31.587] [info] Response success for /notifications/subscriptions
[2021-04-28 08:01:31.915] [info] Response for POST /notifications/subscriptions
[2021-04-28 08:01:32.268] [verbose] 
[2021-04-28 08:01:32.630] [info] Response success for /settings
[2021-04-28 08:01:32.785] [info] Response for GET /settings
[2021-04-28 08:01:33.141] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-28 08:01:34.588] [info] Starting request on Docker socket GET /events undefined
[2021-04-28 08:01:34.772] [verbose] GET /features params = null
[2021-04-28 08:01:35.377] [info] Response success for /features
[2021-04-28 08:01:35.555] [info] Response for GET /features
[2021-04-28 08:01:35.881] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 08:01:36.276] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-28 08:01:42.922] [info] Response for GET /events
[2021-04-28 08:01:59.096] [info] Response success for /system/disk-usage
[2021-04-28 08:01:59.280] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-28 08:01:59.615] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 226001
}
[2021-04-28 08:02:16.316] [info] Response success for /versions
[2021-04-28 08:02:16.475] [info] Response for GET /versions
[2021-04-28 08:02:16.812] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-28 08:10:38.823] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:38.828] [info] engine state notification { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:39.017] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-04-28 08:10:40.370] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:40.538] [info] engine state notification { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:40.768] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-04-28 08:10:43.555] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:43.753] [info] engine state notification { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:43.932] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-04-28 08:10:46.668] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:46.900] [info] engine state notification { state: 'starting', mode: 'windows' }
[2021-04-28 08:10:47.105] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-04-28 08:11:18.685] [info] ping received
[2021-04-28 08:11:48.554] [verbose] POST /usage data = { command: 'containerSortChanged', count: 1 }
[2021-04-28 08:11:57.554] [info] Response success for /usage
[2021-04-28 08:11:57.725] [info] Response for POST /usage
[2021-04-28 08:11:57.882] [verbose] 
[2021-04-28 08:12:07.593] [verbose] POST /usage data = { command: 'containerSortChanged', count: 1 }
[2021-04-28 08:12:26.836] [info] Response success for /usage
[2021-04-28 08:12:33.107] [info] Response for POST /usage
[2021-04-28 08:12:33.274] [verbose] 
[2021-04-28 08:13:26.311] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-28 08:13:26.317] [info] Response error for /analytics/track: connect ENOENT \\.\pipe\dockerWebApiServer
[2021-04-28 08:13:26.523] [error] !!! post /analytics/track
[2021-04-28 08:13:26.707] [error] Server did not respond to request
[2021-04-28 08:13:26.914] [error] {
  _writableState: {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: false,
    ended: false,
    finished: false,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: true,
    bufferProcessing: false,
    onwrite: '[function] function () { [native code] }',
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    bufferedRequest: null,
    lastBufferedRequest: null,
    pendingcb: 0,
    prefinished: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    bufferedRequestCount: 0,
    corkedRequestsFree: {
      next: null,
      entry: null,
      finish: '[function] function () { [native code] }'
    }
  },
  writable: true,
  _events: {
    response: '[function] function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '        /*eslint default-case:0*/\n' +
      "        case 'gzip':\n" +
      "        case 'compress':\n" +
      "        case 'deflate':\n" +
      '        // add the unzipper to the body stream processing pipeline\n' +
      '          stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '          // remove the content-encoding in order to not confuse downstream operations\n' +
      "          delete res.headers['content-encoding'];\n" +
      '          break;\n' +
      '        }\n' +
      '      }\n' +
      '\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      '\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {\n' +
      '            stream.destroy();\n' +
      "            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n" +
      '              config, null, lastRequest));\n' +
      '          }\n' +
      '        });\n' +
      '\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(enhanceError(err, config, null, lastRequest));\n' +
      '        });\n' +
      '\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          var responseData = Buffer.concat(responseBuffer);\n' +
      "          if (config.responseType !== 'arraybuffer') {\n" +
      '            responseData = responseData.toString(config.responseEncoding);\n' +
      "            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '              responseData = utils.stripBOM(responseData);\n' +
      '            }\n' +
      '          }\n' +
      '\n' +
      '          response.data = responseData;\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    }',
    error: '[function] function handleRequestError(err) {\n' +
      "      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n" +
      '      reject(enhanceError(err, config, null, req));\n' +
      '    }'
  },
  _eventsCount: 2,
  _options: {
    maxRedirects: 21,
    maxBodyLength: 10485760,
    protocol: 'http:',
    path: '/analytics/track',
    method: 'POST',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.21.1',
      'Content-Length': 43
    },
    agents: {},
    socketPath: '\\\\.\\pipe\\dockerWebApiServer',
    nativeProtocols: {
      'http:': {
        _connectionListener: '[function] function connectionListener(socket) {\n' +
          '  defaultTriggerAsyncIdScope(\n' +
          '    getOrSetAsyncId(socket), connectionListenerInternal, this, socket\n' +
          '  );\n' +
          '}',
        METHODS: [
          'ACL',         'BIND',       'CHECKOUT',
          'CONNECT',     'COPY',       'DELETE',
          'GET',         'HEAD',       'LINK',
          'LOCK',        'M-SEARCH',   'MERGE',
          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
          'MOVE',        'NOTIFY',     'OPTIONS',
          'PATCH',       'POST',       'PROPFIND',
          'PROPPATCH',   'PURGE',      'PUT',
          'REBIND',      'REPORT',     'SEARCH',
          'SOURCE',      'SUBSCRIBE',  'TRACE',
          'UNBIND',      'UNLINK',     'UNLOCK',
          'UNSUBSCRIBE'
        ],
        STATUS_CODES: {
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '103': 'Early Hints',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '208': 'Already Reported',
          '226': 'IM Used',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Found',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '308': 'Permanent Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Timeout',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Payload Too Large',
          '414': 'URI Too Long',
          '415': 'Unsupported Media Type',
          '416': 'Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': "I'm a Teapot",
          '421': 'Misdirected Request',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Unordered Collection',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Timeout',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '508': 'Loop Detected',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
        },
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  EventEmitter.call(this);\n' +
          '\n' +
          '  this.defaultPort = 80;\n' +
          "  this.protocol = 'http:';\n" +
          '\n' +
          '  this.options = { ...options };\n' +
          '\n' +
          "  // Don't confuse net and make it think that we're connecting to a pipe\n" +
          '  this.options.path = null;\n' +
          '  this.requests = {};\n' +
          '  this.sockets = {};\n' +
          '  this.freeSockets = {};\n' +
          '  this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;\n' +
          '  this.keepAlive = this.options.keepAlive || false;\n' +
          '  this.maxSockets = this.options.maxSockets || Agent.defaultMaxSockets;\n' +
          '  this.maxFreeSockets = this.options.maxFreeSockets || 256;\n' +
          '\n' +
          "  this.on('free', (socket, options) => {\n" +
          '    const name = this.getName(options);\n' +
          "    debug('agent.on(free)', name);\n" +
          '\n' +
          '    // TODO(ronag): socket.destroy(err) might have been called\n' +
          "    // before coming here and have an 'error' scheduled. In the\n" +
          "    // case of socket.destroy() below this 'error' has no handler\n" +
          '    // and could cause unhandled exception.\n' +
          '\n' +
          '    if (socket.writable &&\n' +
          '        this.requests[name] && this.requests[name].length) {\n' +
          '      const req = this.requests[name].shift();\n' +
          '      setRequestSocket(this, req, socket);\n' +
          '      if (this.requests[name].length === 0) {\n' +
          "        // don't leak\n" +
          '        delete this.requests[name];\n' +
          '      }\n' +
          '    } else {\n' +
          '      // If there are no pending requests, then put it in\n' +
          "      // the freeSockets pool, but only if we're allowed to do so.\n" +
          '      const req = socket._httpMessage;\n' +
          '      if (req &&\n' +
          '          req.shouldKeepAlive &&\n' +
          '          socket.writable &&\n' +
          '          this.keepAlive) {\n' +
          '        let freeSockets = this.freeSockets[name];\n' +
          '        const freeLen = freeSockets ? freeSockets.length : 0;\n' +
          '        let count = freeLen;\n' +
          '        if (this.sockets[name])\n' +
          '          count += this.sockets[name].length;\n' +
          '\n' +
          '        if (count > this.maxSockets || freeLen >= this.maxFreeSockets) {\n' +
          '          socket.destroy();\n' +
          '        } else if (this.keepSocketAlive(socket)) {\n' +
          '          freeSockets = freeSockets || [];\n' +
          '          this.freeSockets[name] = freeSockets;\n' +
          '          socket[async_id_symbol] = -1;\n' +
          '          socket._httpMessage = null;\n' +
          '          this.removeSocket(socket, options);\n' +
          '\n' +
          '          const agentTimeout = this.options.timeout || 0;\n' +
          '          if (socket.timeout !== agentTimeout) {\n' +
          '            socket.setTimeout(agentTimeout);\n' +
          '          }\n' +
          '\n' +
          "          socket.once('error', freeSocketErrorListener);\n" +
          '          freeSockets.push(socket);\n' +
          '        } else {\n' +
          "          // Implementation doesn't want to keep socket alive\n" +
          '          socket.destroy();\n' +
          '        }\n' +
          '      } else {\n' +
          '        socket.destroy();\n' +
          '      }\n' +
          '    }\n' +
          '  });\n' +
          '\n' +
          "  // Don't emit keylog events unless there is a listener for them.\n" +
          "  this.on('newListener', maybeEnableKeylog);\n" +
          '}',
        ClientRequest: '[function] function ClientRequest(input, options, cb) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (typeof input === 'string') {\n" +
          '    const urlStr = input;\n' +
          '    try {\n' +
          '      input = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      input = url.parse(urlStr);\n' +
          '      if (!input.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the http module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (input && input[searchParamsSymbol] &&\n' +
          '             input[searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    input = urlToOptions(input);\n' +
          '  } else {\n' +
          '    cb = options;\n' +
          '    options = input;\n' +
          '    input = null;\n' +
          '  }\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    cb = options;\n' +
          '    options = input || {};\n' +
          '  } else {\n' +
          '    options = ObjectAssign(input || {}, options);\n' +
          '  }\n' +
          '\n' +
          '  let agent = options.agent;\n' +
          '  const defaultAgent = options._defaultAgent || Agent.globalAgent;\n' +
          '  if (agent === false) {\n' +
          '    agent = new defaultAgent.constructor();\n' +
          '  } else if (agent === null || agent === undefined) {\n' +
          "    if (typeof options.createConnection !== 'function') {\n" +
          '      agent = defaultAgent;\n' +
          '    }\n' +
          '    // Explicitly pass through this statement as agent will not be used\n' +
          '    // when createConnection is provided.\n' +
          "  } else if (typeof agent.addRequest !== 'function') {\n" +
          "    throw new ERR_INVALID_ARG_TYPE('options.agent',\n" +
          "                                   ['Agent-like Object', 'undefined', 'false'],\n" +
          '                                   agent);\n' +
          '  }\n' +
          '  this.agent = agent;\n' +
          '\n' +
          '  const protocol = options.protocol || defaultAgent.protocol;\n' +
          '  let expectedProtocol = defaultAgent.protocol;\n' +
          '  if (this.agent && this.agent.protocol)\n' +
          '    expectedProtocol = this.agent.protocol;\n' +
          '\n' +
          '  let path;\n' +
          '  if (options.path) {\n' +
          '    path = String(options.path);\n' +
          '    if (INVALID_PATH_REGEX.test(path))\n' +
          "      throw new ERR_UNESCAPED_CHARACTERS('Request path');\n" +
          '  }\n' +
          '\n' +
          '  if (protocol !== expectedProtocol) {\n' +
          '    throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\n' +
          '  }\n' +
          '\n' +
          '  const defaultPort = options.defaultPort ||\n' +
          '                    (this.agent && this.agent.defaultPort);\n' +
          '\n' +
          '  const port = options.port = options.port || defaultPort || 80;\n' +
          "  const host = options.host = validateHost(options.hostname, 'hostname') ||\n" +
          "                            validateHost(options.host, 'host') || 'localhost';\n" +
          '\n' +
          '  const setHost = (options.setHost === undefined || Boolean(options.setHost));\n' +
          '\n' +
          '  this.socketPath = options.socketPath;\n' +
          '\n' +
          '  if (options.timeout !== undefined)\n' +
          "    this.timeout = getTimerDuration(options.timeout, 'timeout');\n" +
          '\n' +
          '  let method = options.method;\n' +
          "  const methodIsString = (typeof method === 'string');\n" +
          '  if (method !== null && method !== undefined && !methodIsString) {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options.method', 'string', method);\n" +
          '  }\n' +
          '\n' +
          '  if (methodIsString && method) {\n' +
          '    if (!checkIsHttpToken(method)) {\n' +
          "      throw new ERR_INVALID_HTTP_TOKEN('Method', method);\n" +
          '    }\n' +
          '    method = this.method = method.toUpperCase();\n' +
          '  } else {\n' +
          "    method = this.method = 'GET';\n" +
          '  }\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined &&\n' +
          "      typeof insecureHTTPParser !== 'boolean') {\n" +
          '    throw new ERR_INVALID_ARG_TYPE(\n' +
          "      'options.insecureHTTPParser', 'boolean', insecureHTTPParser);\n" +
          '  }\n' +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          "  this.path = options.path || '/';\n" +
          '  if (cb) {\n' +
          "    this.once('response', cb);\n" +
          '  }\n' +
          '\n' +
          "  if (method === 'GET' ||\n" +
          "      method === 'HEAD' ||\n" +
          "      method === 'DELETE' ||\n" +
          "      method === 'OPTIONS' ||\n" +
          "      method === 'TRACE' ||\n" +
          "      method === 'CONNECT') {\n" +
          '    this.useChunkedEncodingByDefault = false;\n' +
          '  } else {\n' +
          '    this.useChunkedEncodingByDefault = true;\n' +
          '  }\n' +
          '\n' +
          '  this._ended = false;\n' +
          '  this.res = null;\n' +
          '  this.aborted = false;\n' +
          '  this.timeoutCb = null;\n' +
          '  this.upgradeOrConnect = false;\n' +
          '  this.parser = null;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.reusedSocket = false;\n' +
          '\n' +
          '  let called = false;\n' +
          '\n' +
          '  if (this.agent) {\n' +
          '    // If there is an agent we should default to Connection:keep-alive,\n' +
          '    // but only if the Agent will actually reuse the connection!\n' +
          "    // If it's not a keepAlive agent, and the maxSockets==Infinity, then\n" +
          "    // there's never a case where this socket will actually be reused\n" +
          '    if (!this.agent.keepAlive && !NumberIsFinite(this.agent.maxSockets)) {\n' +
          '      this._last = true;\n' +
          '      this.shouldKeepAlive = false;\n' +
          '    } else {\n' +
          '      this._last = false;\n' +
          '      this.shouldKeepAlive = true;\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  const headersArray = ArrayIsArray(options.headers);\n' +
          '  if (!headersArray) {\n' +
          '    if (options.headers) {\n' +
          '      const keys = ObjectKeys(options.headers);\n' +
          '      // Retain for(;;) loop for performance reasons\n' +
          '      // Refs: https://github.com/nodejs/node/pull/30958\n' +
          '      for (let i = 0; i < keys.length; i++) {\n' +
          '        const key = keys[i];\n' +
          '        this.setHeader(key, options.headers[key]);\n' +
          '      }\n' +
          '    }\n' +
          '\n' +
          "    if (host && !this.getHeader('host') && setHost) {\n" +
          '      let hostHeader = host;\n' +
          '\n' +
          '      // For the Host header, ensure that IPv6 addresses are enclosed\n' +
          '      // in square brackets, as defined by URI formatting\n' +
          '      // https://tools.ietf.org/html/rfc3986#section-3.2.2\n' +
          "      const posColon = hostHeader.indexOf(':');\n" +
          '      if (posColon !== -1 &&\n' +
          "          hostHeader.includes(':', posColon + 1) &&\n" +
          "          hostHeader.charCodeAt(0) !== 91/* '[' */) {\n" +
          '        hostHeader = `[${hostHeader}]`;\n' +
          '      }\n' +
          '\n' +
          '      if (port && +port !== defaultPort) {\n' +
          "        hostHeader += ':' + port;\n" +
          '      }\n' +
          "      this.setHeader('Host', hostHeader);\n" +
          '    }\n' +
          '\n' +
          "    if (options.auth && !this.getHeader('Authorization')) {\n" +
          "      this.setHeader('Authorization', 'Basic ' +\n" +
          "                     Buffer.from(options.auth).toString('base64'));\n" +
          '    }\n' +
          '\n' +
          "    if (this.getHeader('expect')) {\n" +
          '      if (this._header) {\n' +
          "        throw new ERR_HTTP_HEADERS_SENT('render');\n" +
          '      }\n' +
          '\n' +
          "      this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                        this[kOutHeaders]);\n' +
          '    }\n' +
          '  } else {\n' +
          "    this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                      options.headers);\n' +
          '  }\n' +
          '\n' +
          '  const oncreate = (err, socket) => {\n' +
          '    if (called)\n' +
          '      return;\n' +
          '    called = true;\n' +
          '    if (err) {\n' +
          "      process.nextTick(() => this.emit('error', err));\n" +
          '      return;\n' +
          '    }\n' +
          '    this.onSocket(socket);\n' +
          '    this._deferToConnect(null, null, () => this._flush());\n' +
          '  };\n' +
          '\n' +
          '  // initiate connection\n' +
          '  if (this.agent) {\n' +
          '    this.agent.addRequest(this, options);\n' +
          '  } else {\n' +
          '    // No agent, default to Connection:close.\n' +
          '    this._last = true;\n' +
          '    this.shouldKeepAlive = false;\n' +
          "    if (typeof options.createConnection === 'function') {\n" +
          '      const newSocket = options.createConnection(options, oncreate);\n' +
          '      if (newSocket && !called) {\n' +
          '        called = true;\n' +
          '        this.onSocket(newSocket);\n' +
          '      } else {\n' +
          '        return;\n' +
          '      }\n' +
          '    } else {\n' +
          "      debug('CLIENT use net.createConnection', options);\n" +
          '      this.onSocket(net.createConnection(options));\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  this._deferToConnect(null, null, () => this._flush());\n' +
          '}',
        IncomingMessage: '[function] function IncomingMessage(socket) {\n' +
          '  let streamOptions;\n' +
          '\n' +
          '  if (socket) {\n' +
          '    streamOptions = {\n' +
          '      highWaterMark: socket.readableHighWaterMark\n' +
          '    };\n' +
          '  }\n' +
          '\n' +
          '  Stream.Readable.call(this, streamOptions);\n' +
          '\n' +
          '  this._readableState.readingMore = true;\n' +
          '\n' +
          '  this.socket = socket;\n' +
          '  this.connection = socket;\n' +
          '\n' +
          '  this.httpVersionMajor = null;\n' +
          '  this.httpVersionMinor = null;\n' +
          '  this.httpVersion = null;\n' +
          '  this.complete = false;\n' +
          '  this.headers = {};\n' +
          '  this.rawHeaders = [];\n' +
          '  this.trailers = {};\n' +
          '  this.rawTrailers = [];\n' +
          '\n' +
          '  this.readable = true;\n' +
          '\n' +
          '  this.aborted = false;\n' +
          '\n' +
          '  this.upgrade = null;\n' +
          '\n' +
          '  // request (server) only\n' +
          "  this.url = '';\n" +
          '  this.method = null;\n' +
          '\n' +
          '  // response (client) only\n' +
          '  this.statusCode = null;\n' +
          '  this.statusMessage = null;\n' +
          '  this.client = socket;\n' +
          '\n' +
          '  this._consuming = false;\n' +
          '  // Flag for when we decide that this message cannot possibly be\n' +
          "  // read by the user, so there's no point continuing to handle it.\n" +
          '  this._dumped = false;\n' +
          '}',
        OutgoingMessage: '[function] function OutgoingMessage() {\n' +
          '  Stream.call(this);\n' +
          '\n' +
          '  // Queue that holds all currently pending data, until the response will be\n' +
          '  // assigned to the socket (until it will its turn in the HTTP pipeline).\n' +
          '  this.outputData = [];\n' +
          '\n' +
          '  // `outputSize` is an approximate measure of how much data is queued on this\n' +
          '  // response. `_onPendingData` will be invoked to update similar global\n' +
          '  // per-connection counter. That counter will be used to pause/unpause the\n' +
          '  // TCP socket and HTTP Parser and thus handle the backpressure.\n' +
          '  this.outputSize = 0;\n' +
          '\n' +
          '  this.writable = true;\n' +
          '\n' +
          '  this._last = false;\n' +
          '  this.chunkedEncoding = false;\n' +
          '  this.shouldKeepAlive = true;\n' +
          '  this.useChunkedEncodingByDefault = true;\n' +
          '  this.sendDate = false;\n' +
          '  this._removedConnection = false;\n' +
          '  this._removedContLen = false;\n' +
          '  this._removedTE = false;\n' +
          '\n' +
          '  this._contentLength = null;\n' +
          '  this._hasBody = true;\n' +
          "  this._trailer = '';\n" +
          '  this[kNeedDrain] = false;\n' +
          '\n' +
          '  this.finished = false;\n' +
          '  this._headerSent = false;\n' +
          '  this[kCorked] = 0;\n' +
          '\n' +
          '  this.socket = null;\n' +
          '  this.connection = null;\n' +
          '  this._header = null;\n' +
          '  this[kOutHeaders] = null;\n' +
          '\n' +
          '  this._onPendingData = noopPendingOutput;\n' +
          '}',
        Server: '[function] function Server(options, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(options, requestListener);\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    requestListener = options;\n' +
          '    options = {};\n' +
          "  } else if (options == null || typeof options === 'object') {\n" +
          '    options = { ...options };\n' +
          '  } else {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options', 'object', options);\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = options.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined &&\n' +
          "      typeof insecureHTTPParser !== 'boolean') {\n" +
          '    throw new ERR_INVALID_ARG_TYPE(\n' +
          "      'options.insecureHTTPParser', 'boolean', insecureHTTPParser);\n" +
          '  }\n' +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          '  net.Server.call(this, { allowHalfOpen: true });\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.on('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          '  // Similar option to this. Too lazy to write my own docs.\n' +
          '  // http://www.squid-cache.org/Doc/config/half_closed_clients/\n' +
          '  // http://wiki.squid-cache.org/SquidFaq/InnerWorkings#What_is_a_half-closed_filedescriptor.3F\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          "  this.on('connection', connectionListener);\n" +
          '\n' +
          '  this.timeout = kDefaultHttpServerTimeout;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '}',
        ServerResponse: '[function] function ServerResponse(req) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (req.method === 'HEAD') this._hasBody = false;\n" +
          '\n' +
          '  this.sendDate = true;\n' +
          '  this._sent100 = false;\n' +
          '  this._expect_continue = false;\n' +
          '\n' +
          '  if (req.httpVersionMajor < 1 || req.httpVersionMinor < 1) {\n' +
          '    this.useChunkedEncodingByDefault = chunkExpression.test(req.headers.te);\n' +
          '    this.shouldKeepAlive = false;\n' +
          '  }\n' +
          '\n' +
          '  const httpObserverCount = observerCounts[NODE_PERFORMANCE_ENTRY_TYPE_HTTP];\n' +
          '  if (httpObserverCount > 0) {\n' +
          '    this[kServerResponseStatistics] = {\n' +
          '      startTime: process.hrtime()\n' +
          '    };\n' +
          '  }\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        get: '[function] function get(url, options, cb) {\n' +
          '  const req = request(url, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(url, options, cb) {\n' +
          '  return new ClientRequest(url, options, cb);\n' +
          '}',
        maxHeaderSize: 8192,
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (socket.writable &&\n' +
              '        this.requests[name] && this.requests[name].length) {\n' +
              '      const req = this.requests[name].shift();\n' +
              '      setRequestSocket(this, req, socket);\n' +
              '      if (this.requests[name].length === 0) {\n' +
              "        // don't leak\n" +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '    } else {\n' +
              '      // If there are no pending requests, then put it in\n' +
              "      // the freeSockets pool, but only if we're allowed to do so.\n" +
              '      const req = socket._httpMessage;\n' +
              '      if (req &&\n' +
              '          req.shouldKeepAlive &&\n' +
              '          socket.writable &&\n' +
              '          this.keepAlive) {\n' +
              '        let freeSockets = this.freeSockets[name];\n' +
              '        const freeLen = freeSockets ? freeSockets.length : 0;\n' +
              '        let count = freeLen;\n' +
              '        if (this.sockets[name])\n' +
              '          count += this.sockets[name].length;\n' +
              '\n' +
              '        if (count > this.maxSockets || freeLen >= this.maxFreeSockets) {\n' +
              '          socket.destroy();\n' +
              '        } else if (this.keepSocketAlive(socket)) {\n' +
              '          freeSockets = freeSockets || [];\n' +
              '          this.freeSockets[name] = freeSockets;\n' +
              '          socket[async_id_symbol] = -1;\n' +
              '          socket._httpMessage = null;\n' +
              '          this.removeSocket(socket, options);\n' +
              '\n' +
              '          const agentTimeout = this.options.timeout || 0;\n' +
              '          if (socket.timeout !== agentTimeout) {\n' +
              '            socket.setTimeout(agentTimeout);\n' +
              '          }\n' +
              '\n' +
              "          socket.once('error', freeSocketErrorListener);\n" +
              '          freeSockets.push(socket);\n' +
              '        } else {\n' +
              "          // Implementation doesn't want to keep socket alive\n" +
              '          socket.destroy();\n' +
              '        }\n' +
              '      } else {\n' +
              '        socket.destroy();\n' +
              '      }\n' +
              '    }\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: { 'localhost:80::\\\\.\\pipe\\dockerWebApiServer': [Array] },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256
        }
      },
      'https:': {
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  HttpAgent.call(this, options);\n' +
          '  this.defaultPort = 443;\n' +
          "  this.protocol = 'https:';\n" +
          '  this.maxCachedSessions = this.options.maxCachedSessions;\n' +
          '  if (this.maxCachedSessions === undefined)\n' +
          '    this.maxCachedSessions = 100;\n' +
          '\n' +
          '  this._sessionCache = {\n' +
          '    map: {},\n' +
          '    list: []\n' +
          '  };\n' +
          '}',
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (socket.writable &&\n' +
              '        this.requests[name] && this.requests[name].length) {\n' +
              '      const req = this.requests[name].shift();\n' +
              '      setRequestSocket(this, req, socket);\n' +
              '      if (this.requests[name].length === 0) {\n' +
              "        // don't leak\n" +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '    } else {\n' +
              '      // If there are no pending requests, then put it in\n' +
              "      // the freeSockets pool, but only if we're allowed to do so.\n" +
              '      const req = socket._httpMessage;\n' +
              '      if (req &&\n' +
              '          req.shouldKeepAlive &&\n' +
              '          socket.writable &&\n' +
              '          this.keepAlive) {\n' +
              '        let freeSockets = this.freeSockets[name];\n' +
              '        const freeLen = freeSockets ? freeSockets.length : 0;\n' +
              '        let count = freeLen;\n' +
              '        if (this.sockets[name])\n' +
              '          count += this.sockets[name].length;\n' +
              '\n' +
              '        if (count > this.maxSockets || freeLen >= this.maxFreeSockets) {\n' +
              '          socket.destroy();\n' +
              '        } else if (this.keepSocketAlive(socket)) {\n' +
              '          freeSockets = freeSockets || [];\n' +
              '          this.freeSockets[name] = freeSockets;\n' +
              '          socket[async_id_symbol] = -1;\n' +
              '          socket._httpMessage = null;\n' +
              '          this.removeSocket(socket, options);\n' +
              '\n' +
              '          const agentTimeout = this.options.timeout || 0;\n' +
              '          if (socket.timeout !== agentTimeout) {\n' +
              '            socket.setTimeout(agentTimeout);\n' +
              '          }\n' +
              '\n' +
              "          socket.once('error', freeSocketErrorListener);\n" +
              '          freeSockets.push(socket);\n' +
              '        } else {\n' +
              "          // Implementation doesn't want to keep socket alive\n" +
              '          socket.destroy();\n' +
              '        }\n' +
              '      } else {\n' +
              '        socket.destroy();\n' +
              '      }\n' +
              '    }\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 443,
          protocol: 'https:',
          options: { path: null },
          requests: {},
          sockets: {},
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] }
        },
        Server: '[function] function Server(opts, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(opts, requestListener);\n' +
          '\n' +
          "  if (typeof opts === 'function') {\n" +
          '    requestListener = opts;\n' +
          '    opts = undefined;\n' +
          '  }\n' +
          '  opts = { ...opts };\n' +
          '\n' +
          '  if (!opts.ALPNProtocols) {\n' +
          '    // http/1.0 is not defined as Protocol IDs in IANA\n' +
          '    // http://www.iana.org/assignments/tls-extensiontype-values\n' +
          '    //       /tls-extensiontype-values.xhtml#alpn-protocol-ids\n' +
          "    opts.ALPNProtocols = ['http/1.1'];\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = opts.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = opts.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  tls.Server.call(this, opts, _connectionListener);\n' +
          '\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.addListener('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          "  this.addListener('tlsClientError', function addListener(err, conn) {\n" +
          "    if (!this.emit('clientError', err, conn))\n" +
          '      conn.destroy(err);\n' +
          '  });\n' +
          '\n' +
          '  this.timeout = kDefaultHttpServerTimeout;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        get: '[function] function get(input, options, cb) {\n' +
          '  const req = request(input, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(...args) {\n' +
          '  let options = {};\n' +
          '\n' +
          "  if (typeof args[0] === 'string') {\n" +
          '    const urlStr = args.shift();\n' +
          '    try {\n' +
          '      options = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      options = url.parse(urlStr);\n' +
          '      if (!options.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the https module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (args[0] && args[0][searchParamsSymbol] &&\n' +
          '             args[0][searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    options = urlToOptions(args.shift());\n' +
          '  }\n' +
          '\n' +
          "  if (args[0] && typeof args[0] !== 'function') {\n" +
          '    ObjectAssign(options, args.shift());\n' +
          '  }\n' +
          '\n' +
          '  options._defaultAgent = module.exports.globalAgent;\n' +
          '  args.unshift(options);\n' +
          '\n' +
          '  return new ClientRequest(...args);\n' +
          '}'
      }
    },
    pathname: '/analytics/track'
  },
  _ended: false,
  _ending: true,
  _redirectCount: 0,
  _redirects: [],
  _requestBodyLength: 43,
  _requestBodyBuffers: [
    {
      data: {
        type: 'Buffer',
        data: [
          123,  34, 101, 118, 101, 110, 116,  34,  58,
           34,  97,  99, 116, 105, 111, 110,  68, 101,
          118,  69, 110, 118, 105, 114, 111, 110, 109,
          101, 110, 116, 115,  71, 101, 116,  83, 116,
           97, 114, 116, 101, 100,  34, 125
        ]
      }
    }
  ],
  _onNativeResponse: '[function] function (response) {\n    self._processResponse(response);\n  }',
  _currentUrl: 'http:/analytics/track'
}
[2021-04-28 21:11:51.653] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-28 21:11:51.735] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-28 21:11:51.847] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-28 21:11:52.903] [info] application ready
[2021-04-28 21:11:53.089] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 21:11:53.690] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-28 21:11:53.818] [info] using production config /tutorial
[2021-04-28 21:11:54.068] [info] ping received
[2021-04-28 21:11:54.281] [info] Response success for /notifications/subscriptions
[2021-04-28 21:11:54.367] [info] Response for POST /notifications/subscriptions
[2021-04-28 21:11:54.526] [verbose] 
[2021-04-28 21:12:05.535] [verbose] GET /features params = null
[2021-04-28 21:12:05.619] [verbose] GET /settings params = null
[2021-04-28 21:12:05.733] [verbose] GET /versions params = null
[2021-04-28 21:12:05.872] [verbose] GET /system/editor params = null
[2021-04-28 21:12:06.022] [verbose] GET /kubernetes params = null
[2021-04-28 21:12:06.080] [verbose] GET /registry/user params = null
[2021-04-28 21:12:06.212] [info] Response success for /settings
[2021-04-28 21:12:06.323] [info] Response for GET /settings
[2021-04-28 21:12:06.502] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-28 21:12:06.691] [verbose] GET /docker params = null
[2021-04-28 21:12:06.840] [verbose] GET /update params = null
[2021-04-28 21:12:07.066] [info] Response success for /kubernetes
[2021-04-28 21:12:07.121] [info] Response for GET /kubernetes
[2021-04-28 21:12:07.262] [verbose] { state: 'running', enabled: true }
[2021-04-28 21:12:07.365] [info] Response success for /registry/user
[2021-04-28 21:12:07.449] [info] Response for GET /registry/user
[2021-04-28 21:12:07.617] [verbose] { username: 'neuromancer0001' }
[2021-04-28 21:12:07.729] [info] Response success for /docker
[2021-04-28 21:12:07.825] [info] Response for GET /docker
[2021-04-28 21:12:07.960] [verbose] { state: 'running', mode: 'linux' }
[2021-04-28 21:12:08.106] [info] Response success for /update
[2021-04-28 21:12:08.185] [info] Response for GET /update
[2021-04-28 21:12:08.294] [verbose] { updateAvailableTime: 0 }
[2021-04-28 21:12:08.768] [verbose] GET /features params = null
[2021-04-28 21:12:08.859] [info] Starting request on Docker socket GET /events undefined
[2021-04-28 21:12:10.302] [info] Response for GET /events
[2021-04-28 21:12:12.508] [info] Response success for /features
[2021-04-28 21:12:12.581] [info] Response for GET /features
[2021-04-28 21:12:12.698] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 21:12:12.706] [info] Response success for /features
[2021-04-28 21:12:12.753] [info] Response for GET /features
[2021-04-28 21:12:12.857] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 21:12:13.134] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-28 21:12:13.412] [info] Response success for /system/disk-usage
[2021-04-28 21:12:13.468] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-28 21:12:13.586] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 221316
}
[2021-04-28 21:12:13.940] [info] Response success for /system/editor
[2021-04-28 21:12:14.014] [info] Response for GET /system/editor
[2021-04-28 21:12:14.117] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-28 21:13:45.440] [info] Response success for /versions
[2021-04-28 21:13:45.515] [info] Response for GET /versions
[2021-04-28 21:13:45.571] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-28 21:38:42.485] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-04-28 21:38:42.501] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 635600.3999999994,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-04-28 21:38:42.508] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 452100.44500000007,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-04-28 21:38:42.535] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 432325.8000000005,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-04-28 21:38:42.560] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 47290.07500000065,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-04-28 21:38:43.812] [info] Response success for /analytics/track
[2021-04-28 21:38:43.819] [info] Response for POST /analytics/track
[2021-04-28 21:38:43.834] [verbose] 
[2021-04-28 21:38:43.846] [info] Response success for /analytics/track
[2021-04-28 21:38:43.865] [info] Response for POST /analytics/track
[2021-04-28 21:38:43.883] [verbose] 
[2021-04-28 21:38:43.896] [info] Response success for /analytics/track
[2021-04-28 21:38:43.908] [info] Response for POST /analytics/track
[2021-04-28 21:38:43.925] [verbose] 
[2021-04-28 21:38:43.936] [info] Response success for /analytics/track
[2021-04-28 21:38:43.942] [info] Response for POST /analytics/track
[2021-04-28 21:38:43.957] [verbose] 
[2021-04-28 21:38:43.962] [info] Response success for /analytics/track
[2021-04-28 21:38:43.970] [info] Response for POST /analytics/track
[2021-04-28 21:38:43.986] [verbose] 
[2021-04-28 21:39:08.932] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-28 21:39:08.950] [info] Response success for /usage
[2021-04-28 21:39:08.954] [info] Response for POST /usage
[2021-04-28 21:39:08.958] [verbose] 
[2021-04-28 21:44:16.239] [verbose] GET /settings params = null
[2021-04-28 21:44:16.252] [verbose] GET /features params = null
[2021-04-28 21:44:16.308] [info] Response success for /features
[2021-04-28 21:44:16.310] [info] Response for GET /features
[2021-04-28 21:44:16.317] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-28 21:44:16.335] [info] Response success for /settings
[2021-04-28 21:44:16.341] [info] Response for GET /settings
[2021-04-28 21:44:16.345] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-28 21:44:16.477] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-28 21:44:16.508] [info] Response success for /system/disk-usage
[2021-04-28 21:44:16.509] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-28 21:44:16.516] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 221137
}
[2021-04-28 21:44:37.904] [info] quitting application
[2021-04-28 21:44:37.905] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-28 21:44:37.915] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-30 06:53:48.634] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-30 06:53:48.650] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-30 06:53:48.651] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-30 06:53:48.844] [info] application ready
[2021-04-30 06:53:48.869] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 06:53:49.169] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 06:53:49.173] [info] using production config /dashboard
[2021-04-30 06:53:49.240] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 06:53:49.291] [info] ping received
[2021-04-30 06:53:49.373] [info] application ready
[2021-04-30 06:53:49.420] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 06:53:49.439] [info] Response success for /notifications/subscriptions
[2021-04-30 06:53:49.440] [info] Response for POST /notifications/subscriptions
[2021-04-30 06:53:49.444] [verbose] 
[2021-04-30 06:53:49.494] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 06:53:49.496] [info] using production config /dashboard
[2021-04-30 06:53:52.097] [verbose] GET /features params = null
[2021-04-30 06:53:52.104] [verbose] GET /settings params = null
[2021-04-30 06:53:52.108] [verbose] GET /versions params = null
[2021-04-30 06:53:52.114] [verbose] GET /system/editor params = null
[2021-04-30 06:53:52.120] [verbose] GET /kubernetes params = null
[2021-04-30 06:53:52.125] [verbose] GET /registry/user params = null
[2021-04-30 06:53:52.131] [verbose] GET /docker params = null
[2021-04-30 06:53:52.134] [verbose] GET /update params = null
[2021-04-30 06:53:52.147] [info] Response success for /features
[2021-04-30 06:53:52.148] [info] Response for GET /features
[2021-04-30 06:53:52.151] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 06:53:52.230] [info] Response success for /kubernetes
[2021-04-30 06:53:52.231] [info] Response for GET /kubernetes
[2021-04-30 06:53:52.240] [verbose] { state: 'running', enabled: true }
[2021-04-30 06:53:52.250] [info] Response success for /update
[2021-04-30 06:53:52.254] [info] Response for GET /update
[2021-04-30 06:53:52.259] [verbose] { updateAvailableTime: 0 }
[2021-04-30 06:53:52.266] [info] Response success for /registry/user
[2021-04-30 06:53:52.268] [info] Response for GET /registry/user
[2021-04-30 06:53:52.272] [verbose] { username: 'neuromancer0001' }
[2021-04-30 06:53:52.278] [info] Response success for /system/editor
[2021-04-30 06:53:52.280] [info] Response for GET /system/editor
[2021-04-30 06:53:52.283] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-30 06:53:52.288] [info] Response success for /docker
[2021-04-30 06:53:52.291] [info] Response for GET /docker
[2021-04-30 06:53:52.296] [verbose] { state: 'running', mode: 'linux' }
[2021-04-30 06:53:52.333] [verbose] GET /features params = null
[2021-04-30 06:53:52.336] [info] Response success for /features
[2021-04-30 06:53:52.337] [info] Response for GET /features
[2021-04-30 06:53:52.339] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 06:53:52.374] [info] Starting request on Docker socket GET /events undefined
[2021-04-30 06:53:52.476] [info] Response for GET /events
[2021-04-30 06:53:52.697] [info] Response success for /settings
[2021-04-30 06:53:52.698] [info] Response for GET /settings
[2021-04-30 06:53:52.700] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-30 06:53:52.801] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-30 06:53:53.749] [info] Response success for /system/disk-usage
[2021-04-30 06:53:53.750] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-30 06:53:53.755] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 244211
}
[2021-04-30 06:53:53.762] [info] Response success for /versions
[2021-04-30 06:53:53.777] [info] Response for GET /versions
[2021-04-30 06:53:53.781] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-30 06:58:42.137] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-30 06:58:42.165] [info] Response success for /usage
[2021-04-30 06:58:42.166] [info] Response for POST /usage
[2021-04-30 06:58:42.169] [verbose] 
[2021-04-30 06:58:52.503] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-30 06:58:52.519] [info] Response success for /usage
[2021-04-30 06:58:52.521] [info] Response for POST /usage
[2021-04-30 06:58:52.523] [verbose] 
[2021-04-30 06:58:54.508] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-30 06:58:54.523] [info] Response success for /usage
[2021-04-30 06:58:54.524] [info] Response for POST /usage
[2021-04-30 06:58:54.527] [verbose] 
[2021-04-30 06:58:56.067] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-04-30 06:58:56.081] [info] Response success for /usage
[2021-04-30 06:58:56.083] [info] Response for POST /usage
[2021-04-30 06:58:56.086] [verbose] 
[2021-04-30 06:59:13.323] [verbose] GET /settings params = null
[2021-04-30 06:59:13.326] [verbose] GET /features params = null
[2021-04-30 06:59:13.330] [info] Response success for /features
[2021-04-30 06:59:13.332] [info] Response for GET /features
[2021-04-30 06:59:13.335] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 06:59:13.350] [info] Response success for /settings
[2021-04-30 06:59:13.351] [info] Response for GET /settings
[2021-04-30 06:59:13.353] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-30 06:59:13.516] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-30 06:59:13.534] [info] Response success for /system/disk-usage
[2021-04-30 06:59:13.535] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-30 06:59:13.537] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 245247
}
[2021-04-30 06:59:24.222] [verbose] GET /settings params = null
[2021-04-30 06:59:24.238] [info] Response success for /settings
[2021-04-30 06:59:24.239] [info] Response for GET /settings
[2021-04-30 06:59:24.241] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-30 06:59:24.249] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false,"features":{"buildkit":true}}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-04-30 06:59:24.491] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-04-30 06:59:24.495] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-04-30 06:59:24.496] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-04-30 06:59:24.780] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-04-30 06:59:24.781] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-04-30 06:59:24.784] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-04-30 06:59:24.790] [info] Response success for /settings
[2021-04-30 06:59:24.794] [info] Response for POST /settings
[2021-04-30 06:59:24.796] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-30 06:59:24.896] [info] Starting request on Docker socket GET /events undefined
[2021-04-30 06:59:24.902] [info] Response for GET /events
[2021-04-30 06:59:25.014] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-30 06:59:25.030] [info] Response success for /system/disk-usage
[2021-04-30 06:59:25.030] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-30 06:59:25.033] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 245247
}
[2021-04-30 06:59:25.074] [verbose] GET /features params = null
[2021-04-30 06:59:25.077] [info] Response success for /features
[2021-04-30 06:59:25.078] [info] Response for GET /features
[2021-04-30 06:59:25.081] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 06:59:34.066] [info] quitting application
[2021-04-30 06:59:34.068] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-30 06:59:34.079] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-30 20:17:07.588] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-04-30 20:17:07.619] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-04-30 20:17:07.674] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-04-30 20:17:07.979] [info] application ready
[2021-04-30 20:17:08.029] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 20:17:08.339] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 20:17:08.342] [info] using production config /dashboard
[2021-04-30 20:17:08.404] [info] open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 20:17:08.456] [info] ping received
[2021-04-30 20:17:08.497] [info] application ready
[2021-04-30 20:17:08.530] [info] Response success for /notifications/subscriptions
[2021-04-30 20:17:08.539] [info] Response for POST /notifications/subscriptions
[2021-04-30 20:17:08.546] [verbose] 
[2021-04-30 20:17:08.557] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 20:17:08.652] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-04-30 20:17:08.654] [info] using production config /dashboard
[2021-04-30 20:17:13.835] [verbose] GET /features params = null
[2021-04-30 20:17:13.848] [verbose] GET /settings params = null
[2021-04-30 20:17:13.856] [verbose] GET /versions params = null
[2021-04-30 20:17:13.863] [verbose] GET /system/editor params = null
[2021-04-30 20:17:13.874] [verbose] GET /kubernetes params = null
[2021-04-30 20:17:13.885] [verbose] GET /registry/user params = null
[2021-04-30 20:17:13.891] [verbose] GET /docker params = null
[2021-04-30 20:17:13.897] [info] Response success for /features
[2021-04-30 20:17:13.898] [info] Response for GET /features
[2021-04-30 20:17:13.905] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 20:17:13.914] [verbose] GET /update params = null
[2021-04-30 20:17:13.940] [info] Response success for /settings
[2021-04-30 20:17:13.953] [info] Response for GET /settings
[2021-04-30 20:17:13.966] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-04-30 20:17:13.974] [info] Response success for /registry/user
[2021-04-30 20:17:13.980] [info] Response for GET /registry/user
[2021-04-30 20:17:13.984] [verbose] { username: 'neuromancer0001' }
[2021-04-30 20:17:13.989] [info] Response success for /docker
[2021-04-30 20:17:13.993] [info] Response for GET /docker
[2021-04-30 20:17:13.996] [verbose] { state: 'running', mode: 'linux' }
[2021-04-30 20:17:14.009] [info] Response success for /kubernetes
[2021-04-30 20:17:14.010] [info] Response for GET /kubernetes
[2021-04-30 20:17:14.013] [verbose] { state: 'running', enabled: true }
[2021-04-30 20:17:14.016] [info] Response success for /update
[2021-04-30 20:17:14.018] [info] Response for GET /update
[2021-04-30 20:17:14.020] [verbose] { updateAvailableTime: 0 }
[2021-04-30 20:17:14.024] [info] Response success for /system/editor
[2021-04-30 20:17:14.026] [info] Response for GET /system/editor
[2021-04-30 20:17:14.028] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-04-30 20:17:14.103] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-04-30 20:17:14.150] [verbose] GET /features params = null
[2021-04-30 20:17:14.155] [info] Response success for /features
[2021-04-30 20:17:14.158] [info] Response for GET /features
[2021-04-30 20:17:14.161] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-04-30 20:17:14.271] [info] Response success for /system/disk-usage
[2021-04-30 20:17:14.272] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-04-30 20:17:14.276] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 245149
}
[2021-04-30 20:17:14.546] [info] Starting request on Docker socket GET /events undefined
[2021-04-30 20:17:14.554] [info] Response for GET /events
[2021-04-30 20:17:14.848] [info] Response success for /versions
[2021-04-30 20:17:14.850] [info] Response for GET /versions
[2021-04-30 20:17:14.855] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-04-30 20:22:12.376] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-30 20:22:12.437] [info] Response success for /analytics/track
[2021-04-30 20:22:12.438] [info] Response for POST /analytics/track
[2021-04-30 20:22:12.446] [verbose] 
[2021-04-30 21:32:17.328] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-04-30 21:32:17.368] [info] Response success for /analytics/track
[2021-04-30 21:32:17.369] [info] Response for POST /analytics/track
[2021-04-30 21:32:17.372] [verbose] 
[2021-04-30 21:32:27.503] [info] quitting application
[2021-04-30 21:32:27.505] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-04-30 21:32:27.513] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 12:56:18.107] [info] application ready
[2021-05-07 12:56:18.167] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"about","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:56:18.466] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"about","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:56:18.467] [info] using production config /about
[2021-05-07 12:56:21.298] [verbose] GET /features params = null
[2021-05-07 12:56:21.319] [verbose] GET /settings params = null
[2021-05-07 12:56:21.326] [verbose] GET /versions params = null
[2021-05-07 12:56:21.341] [info] Response success for /features
[2021-05-07 12:56:21.342] [info] Response for GET /features
[2021-05-07 12:56:21.344] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:56:21.349] [verbose] GET /system/editor params = null
[2021-05-07 12:56:21.359] [verbose] GET /kubernetes params = null
[2021-05-07 12:56:21.363] [verbose] GET /registry/user params = null
[2021-05-07 12:56:21.372] [verbose] GET /docker params = null
[2021-05-07 12:56:21.377] [verbose] GET /update params = null
[2021-05-07 12:56:21.429] [info] Response success for /settings
[2021-05-07 12:56:21.438] [info] Response for GET /settings
[2021-05-07 12:56:21.446] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: true
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 12:56:21.463] [info] Response success for /kubernetes
[2021-05-07 12:56:21.469] [info] Response for GET /kubernetes
[2021-05-07 12:56:21.474] [verbose] { state: 'running', enabled: true }
[2021-05-07 12:56:21.481] [info] Response success for /docker
[2021-05-07 12:56:21.485] [info] Response for GET /docker
[2021-05-07 12:56:21.489] [verbose] { state: 'running', mode: 'linux' }
[2021-05-07 12:56:21.495] [info] Response success for /update
[2021-05-07 12:56:21.497] [info] Response for GET /update
[2021-05-07 12:56:21.500] [verbose] { updateAvailableTime: 0 }
[2021-05-07 12:56:21.505] [info] Response success for /registry/user
[2021-05-07 12:56:21.508] [info] Response for GET /registry/user
[2021-05-07 12:56:21.511] [verbose] { username: 'neuromancer0001' }
[2021-05-07 12:56:21.536] [info] Response success for /system/editor
[2021-05-07 12:56:21.537] [info] Response for GET /system/editor
[2021-05-07 12:56:21.540] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 12:56:21.580] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 12:56:21.678] [info] Response success for /system/disk-usage
[2021-05-07 12:56:21.680] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 12:56:21.683] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 182362
}
[2021-05-07 12:56:21.895] [verbose] GET /features params = null
[2021-05-07 12:56:21.907] [info] Response success for /features
[2021-05-07 12:56:21.910] [info] Response for GET /features
[2021-05-07 12:56:21.913] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:56:22.100] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 12:56:22.148] [info] Response for GET /events
[2021-05-07 12:56:22.376] [info] Response success for /versions
[2021-05-07 12:56:22.377] [info] Response for GET /versions
[2021-05-07 12:56:22.380] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 12:56:31.121] [verbose] POST /analytics/track data = { event: 'actionOpenReleaseNotes' }
[2021-05-07 12:56:31.159] [info] Response success for /analytics/track
[2021-05-07 12:56:31.160] [info] Response for POST /analytics/track
[2021-05-07 12:56:31.163] [verbose] 
[2021-05-07 12:57:11.399] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 12:57:11.412] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 12:57:11.419] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 12:57:11.567] [info] application ready
[2021-05-07 12:57:11.630] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:11.737] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:11.739] [info] using production config /tutorial
[2021-05-07 12:57:11.816] [info] ping received
[2021-05-07 12:57:11.995] [info] Response success for /notifications/subscriptions
[2021-05-07 12:57:12.506] [info] Response for POST /notifications/subscriptions
[2021-05-07 12:57:12.516] [verbose] 
[2021-05-07 12:57:20.371] [verbose] GET /features params = null
[2021-05-07 12:57:20.378] [verbose] GET /settings params = null
[2021-05-07 12:57:20.384] [verbose] GET /versions params = null
[2021-05-07 12:57:20.393] [info] Response success for /features
[2021-05-07 12:57:20.408] [info] Response for GET /features
[2021-05-07 12:57:20.412] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:57:20.421] [verbose] GET /system/editor params = null
[2021-05-07 12:57:20.429] [verbose] GET /kubernetes params = null
[2021-05-07 12:57:20.440] [verbose] GET /registry/user params = null
[2021-05-07 12:57:20.451] [verbose] GET /docker params = null
[2021-05-07 12:57:20.466] [verbose] GET /update params = null
[2021-05-07 12:57:20.499] [info] Response success for /settings
[2021-05-07 12:57:20.503] [info] Response for GET /settings
[2021-05-07 12:57:20.509] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1619543518698,
    tipLastId: 12,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 12:57:20.533] [info] Response success for /kubernetes
[2021-05-07 12:57:20.569] [info] Response for GET /kubernetes
[2021-05-07 12:57:20.577] [verbose] { state: 'running', enabled: true }
[2021-05-07 12:57:20.587] [info] Response success for /registry/user
[2021-05-07 12:57:20.597] [info] Response for GET /registry/user
[2021-05-07 12:57:20.604] [verbose] { username: 'neuromancer0001' }
[2021-05-07 12:57:20.610] [info] Response success for /docker
[2021-05-07 12:57:20.631] [info] Response for GET /docker
[2021-05-07 12:57:20.637] [verbose] { state: 'running', mode: 'windows' }
[2021-05-07 12:57:20.643] [info] Response success for /system/editor
[2021-05-07 12:57:20.648] [info] Response for GET /system/editor
[2021-05-07 12:57:20.652] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 12:57:20.667] [info] Response success for /update
[2021-05-07 12:57:20.676] [info] Response for GET /update
[2021-05-07 12:57:20.681] [verbose] { updateAvailableTime: 0 }
[2021-05-07 12:57:20.810] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 12:57:20.833] [info] Response success for /system/disk-usage
[2021-05-07 12:57:20.834] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 12:57:20.840] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 181810
}
[2021-05-07 12:57:20.919] [verbose] GET /features params = null
[2021-05-07 12:57:20.934] [info] Response success for /features
[2021-05-07 12:57:20.939] [info] Response for GET /features
[2021-05-07 12:57:20.945] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:57:21.082] [info] Response success for /versions
[2021-05-07 12:57:21.096] [info] Response for GET /versions
[2021-05-07 12:57:21.104] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 12:57:21.473] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 12:57:21.478] [info] Response for GET /events
[2021-05-07 12:57:21.895] [verbose] POST /tip/last-viewed data = { timestamp: 1620385041894, id: 13 }
[2021-05-07 12:57:21.900] [verbose] POST /analytics/track data = { event: 'actionShowTip', body: { tipId: 13 } }
[2021-05-07 12:57:21.923] [info] Response success for /analytics/track
[2021-05-07 12:57:21.972] [info] Response for POST /analytics/track
[2021-05-07 12:57:21.977] [verbose] 
[2021-05-07 12:57:21.983] [info] Response success for /tip/last-viewed
[2021-05-07 12:57:21.988] [info] Response for POST /tip/last-viewed
[2021-05-07 12:57:21.996] [verbose] 
[2021-05-07 12:57:23.640] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:23.652] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:23.653] [info] using production config /update
[2021-05-07 12:57:23.807] [info] application ready
[2021-05-07 12:57:23.859] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:23.975] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 12:57:24.025] [info] using production config /update
[2021-05-07 12:57:24.685] [verbose] GET /features params = null
[2021-05-07 12:57:24.692] [verbose] GET /settings params = null
[2021-05-07 12:57:24.707] [verbose] GET /versions params = null
[2021-05-07 12:57:24.722] [verbose] GET /system/editor params = null
[2021-05-07 12:57:24.732] [info] Response success for /features
[2021-05-07 12:57:24.745] [info] Response for GET /features
[2021-05-07 12:57:24.756] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:57:24.763] [verbose] GET /kubernetes params = null
[2021-05-07 12:57:24.781] [verbose] GET /registry/user params = null
[2021-05-07 12:57:24.793] [verbose] GET /docker params = null
[2021-05-07 12:57:24.818] [verbose] GET /update params = null
[2021-05-07 12:57:24.838] [info] Response success for /settings
[2021-05-07 12:57:24.847] [info] Response for GET /settings
[2021-05-07 12:57:24.853] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 12:57:24.877] [info] Response success for /kubernetes
[2021-05-07 12:57:24.890] [info] Response for GET /kubernetes
[2021-05-07 12:57:24.901] [verbose] { state: 'running', enabled: true }
[2021-05-07 12:57:24.912] [info] Response success for /docker
[2021-05-07 12:57:24.919] [info] Response for GET /docker
[2021-05-07 12:57:24.925] [verbose] { state: 'running', mode: 'windows' }
[2021-05-07 12:57:24.953] [info] Response success for /registry/user
[2021-05-07 12:57:24.963] [info] Response for GET /registry/user
[2021-05-07 12:57:24.967] [verbose] { username: 'neuromancer0001' }
[2021-05-07 12:57:24.973] [info] Response success for /update
[2021-05-07 12:57:24.977] [info] Response for GET /update
[2021-05-07 12:57:24.980] [verbose] { updateAvailableTime: 0 }
[2021-05-07 12:57:24.985] [info] Response success for /system/editor
[2021-05-07 12:57:24.988] [info] Response for GET /system/editor
[2021-05-07 12:57:24.991] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 12:57:25.068] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 12:57:25.088] [info] Response success for /system/disk-usage
[2021-05-07 12:57:25.093] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 12:57:25.096] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 181810
}
[2021-05-07 12:57:25.260] [info] Response success for /versions
[2021-05-07 12:57:25.261] [info] Response for GET /versions
[2021-05-07 12:57:25.266] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 12:57:25.358] [verbose] GET /features params = null
[2021-05-07 12:57:25.361] [info] Response success for /features
[2021-05-07 12:57:25.362] [info] Response for GET /features
[2021-05-07 12:57:25.365] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 12:57:26.883] [verbose] POST /analytics/track data = {
  event: 'actionUpdatePopupInstall',
  body: { mode: 'ready-to-download', numberOfDaysOld: 18754 }
}
[2021-05-07 12:57:26.908] [info] Response success for /analytics/track
[2021-05-07 12:57:26.911] [info] Response for POST /analytics/track
[2021-05-07 12:57:26.917] [verbose] 
[2021-05-07 12:57:26.922] [verbose] POST /update data = { appcastURL: null, mode: 'ready-to-download' }
[2021-05-07 12:57:31.309] [info] Response success for /update
[2021-05-07 12:57:31.311] [info] Response for POST /update
[2021-05-07 12:57:31.314] [verbose] 
[2021-05-07 12:57:31.778] [verbose] GET /settings params = null
[2021-05-07 12:57:31.807] [info] Response success for /settings
[2021-05-07 12:57:31.809] [info] Response for GET /settings
[2021-05-07 12:57:31.816] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 12:57:31.984] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 12:57:32.085] [info] Response success for /system/disk-usage
[2021-05-07 12:57:32.088] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 12:57:32.090] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 181697
}
[2021-05-07 12:57:36.561] [debug] new update available { updateAvailableTime: 0 }
[2021-05-07 12:57:36.562] [info] notification : {"type":"settings-desktop.update-ready","payload":{"updateAvailableTime":0}}
[2021-05-07 12:58:15.834] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-07 12:58:15.837] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3292.975000000297,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-07 12:58:15.841] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 14440.465000000586,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-07 12:58:15.846] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5041.299999999865,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-07 12:58:15.853] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5817.370000000665,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-07 12:58:15.861] [info] Response success for /analytics/track
[2021-05-07 12:58:15.869] [info] Response for POST /analytics/track
[2021-05-07 12:58:15.872] [verbose] 
[2021-05-07 12:58:15.875] [info] Response success for /analytics/track
[2021-05-07 12:58:15.877] [info] Response for POST /analytics/track
[2021-05-07 12:58:15.880] [verbose] 
[2021-05-07 12:58:15.883] [info] Response success for /analytics/track
[2021-05-07 12:58:15.884] [info] Response for POST /analytics/track
[2021-05-07 12:58:15.887] [verbose] 
[2021-05-07 12:58:15.892] [info] Response success for /analytics/track
[2021-05-07 12:58:15.893] [info] Response for POST /analytics/track
[2021-05-07 12:58:15.896] [verbose] 
[2021-05-07 12:58:15.899] [info] Response success for /analytics/track
[2021-05-07 12:58:15.901] [info] Response for POST /analytics/track
[2021-05-07 12:58:15.903] [verbose] 
[2021-05-07 12:58:38.501] [info] quitting application
[2021-05-07 12:58:38.503] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 12:58:38.523] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:03:51.400] [verbose] GET /resources/open params = { file: 'acknowledgements' }
[2021-05-07 13:03:51.533] [info] Response success for /resources/open
[2021-05-07 13:03:51.534] [info] Response for GET /resources/open?file=acknowledgements
[2021-05-07 13:03:51.539] [verbose] 
[2021-05-07 13:04:01.444] [info] quitting application
[2021-05-07 13:04:01.446] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:04:01.452] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:30:46.220] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:30:46.231] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:30:46.238] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:30:46.365] [info] application ready
[2021-05-07 13:30:46.418] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:30:46.571] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:30:46.581] [info] using production config /dashboard
[2021-05-07 13:30:48.289] [info] ping received
[2021-05-07 13:30:50.718] [info] Response success for /notifications/subscriptions
[2021-05-07 13:30:50.736] [info] Response for POST /notifications/subscriptions
[2021-05-07 13:30:50.740] [verbose] 
[2021-05-07 13:30:51.389] [verbose] GET /features params = null
[2021-05-07 13:30:51.402] [verbose] GET /settings params = null
[2021-05-07 13:30:51.414] [verbose] GET /versions params = null
[2021-05-07 13:30:51.440] [verbose] GET /system/editor params = null
[2021-05-07 13:30:51.457] [verbose] GET /kubernetes params = null
[2021-05-07 13:30:51.479] [verbose] GET /registry/user params = null
[2021-05-07 13:30:51.504] [verbose] GET /docker params = null
[2021-05-07 13:30:51.524] [verbose] GET /update params = null
[2021-05-07 13:30:51.557] [info] Response success for /settings
[2021-05-07 13:30:51.568] [info] Response for GET /settings
[2021-05-07 13:30:51.574] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:30:51.612] [info] Response success for /features
[2021-05-07 13:30:51.616] [info] Response for GET /features
[2021-05-07 13:30:51.620] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:30:51.807] [info] Response success for /system/editor
[2021-05-07 13:30:51.822] [info] Response for GET /system/editor
[2021-05-07 13:30:51.835] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 13:30:51.878] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:30:56.960] [info] Response success for /kubernetes
[2021-05-07 13:30:56.969] [info] Response for GET /kubernetes
[2021-05-07 13:30:56.988] [verbose] { state: 'stopped', enabled: true }
[2021-05-07 13:30:57.019] [info] Response success for /docker
[2021-05-07 13:30:57.033] [info] Response for GET /docker
[2021-05-07 13:30:57.050] [verbose] { state: 'running', mode: 'windows' }
[2021-05-07 13:30:57.069] [info] Response success for /registry/user
[2021-05-07 13:30:57.073] [info] Response for GET /registry/user
[2021-05-07 13:30:57.077] [verbose] { username: 'neuromancer0001' }
[2021-05-07 13:30:57.082] [info] Response success for /update
[2021-05-07 13:30:57.086] [info] Response for GET /update
[2021-05-07 13:30:57.091] [verbose] { updateAvailableTime: 0 }
[2021-05-07 13:30:57.096] [info] Response success for /versions
[2021-05-07 13:30:57.101] [info] Response for GET /versions
[2021-05-07 13:30:57.105] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 13:30:57.113] [info] Response success for /system/disk-usage
[2021-05-07 13:30:57.117] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:30:57.121] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 180852
}
[2021-05-07 13:30:57.289] [verbose] GET /features params = null
[2021-05-07 13:30:57.297] [info] Response success for /features
[2021-05-07 13:30:57.301] [info] Response for GET /features
[2021-05-07 13:30:57.306] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:30:57.382] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:30:57.389] [info] Response for GET /events
[2021-05-07 13:31:08.861] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-07 13:31:08.865] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-05-07 13:31:08.872] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-07 13:31:32.368] [verbose] GET /settings params = null
[2021-05-07 13:31:32.371] [verbose] GET /features params = null
[2021-05-07 13:31:32.376] [info] Response success for /features
[2021-05-07 13:31:32.380] [info] Response for GET /features
[2021-05-07 13:31:32.383] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:31:32.391] [info] Response success for /settings
[2021-05-07 13:31:32.392] [info] Response for GET /settings
[2021-05-07 13:31:32.396] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:31:32.566] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:31:32.584] [info] Response success for /system/disk-usage
[2021-05-07 13:31:32.585] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:31:32.587] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 180844
}
[2021-05-07 13:31:33.080] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:31:33.081] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:31:33.084] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:31:33.178] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:31:33.184] [info] Response for GET /events
[2021-05-07 13:31:36.082] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-05-07 13:31:36.083] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-05-07 13:31:36.086] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-05-07 13:32:05.698] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-05-07 13:32:05.700] [info] kubernetes state notification { state: 'running', enabled: true }
[2021-05-07 13:32:05.703] [info] notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-05-07 13:32:33.751] [verbose] GET /settings params = null
[2021-05-07 13:32:33.767] [info] Response success for /settings
[2021-05-07 13:32:33.768] [info] Response for GET /settings
[2021-05-07 13:32:33.771] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:32:33.778] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":false}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    Tip: {
      name: 'Tip of the Week',
      label: 'Enable Tip of the Week',
      description: 'Enable Tip of the Week',
      enabled: true,
      type: 1
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-05-07 13:32:33.840] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-07 13:32:33.841] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-05-07 13:32:33.844] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-07 13:32:34.006] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-07 13:32:34.008] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-05-07 13:32:34.016] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-07 13:32:34.023] [info] Response success for /settings
[2021-05-07 13:32:34.033] [info] Response for POST /settings
[2021-05-07 13:32:34.039] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:32:34.505] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:32:34.545] [info] Response success for /system/disk-usage
[2021-05-07 13:32:34.572] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:32:34.581] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 180842
}
[2021-05-07 13:32:34.661] [verbose] GET /features params = null
[2021-05-07 13:32:34.682] [info] Response success for /features
[2021-05-07 13:32:34.744] [info] Response for GET /features
[2021-05-07 13:32:34.768] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:32:42.629] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-05-07 13:32:42.631] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-05-07 13:32:42.635] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-05-07 13:32:42.655] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-07 13:32:42.662] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-05-07 13:32:42.666] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-07 13:33:13.946] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:33:13.948] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:33:13.966] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:33:14.230] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:33:14.467] [info] Response for GET /events
[2021-05-07 13:33:35.398] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:33:35.400] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:33:35.444] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:33:48.401] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:33:48.402] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:33:48.408] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:33:53.802] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-05-07 13:33:53.805] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-05-07 13:33:53.811] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-05-07 13:35:12.500] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-05-07 13:35:12.502] [info] kubernetes state notification { state: 'running', enabled: true }
[2021-05-07 13:35:12.507] [info] notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-05-07 13:37:25.445] [verbose] GET /settings params = null
[2021-05-07 13:37:25.472] [info] Response success for /settings
[2021-05-07 13:37:25.473] [info] Response for GET /settings
[2021-05-07 13:37:25.475] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:37:25.484] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":true,"experimental":true}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  cli: { useGrpcfuse: false }
}
[2021-05-07 13:37:25.505] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-07 13:37:25.506] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-05-07 13:37:25.508] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-07 13:37:25.639] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-07 13:37:25.641] [info] engine state notification { state: 'updating', mode: 'linux' }
[2021-05-07 13:37:25.647] [info] notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-07 13:37:25.866] [info] Response success for /settings
[2021-05-07 13:37:25.876] [info] Response for POST /settings
[2021-05-07 13:37:25.880] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:37:26.305] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:37:26.328] [info] Response success for /system/disk-usage
[2021-05-07 13:37:26.330] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:37:26.332] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 179576
}
[2021-05-07 13:37:26.364] [verbose] GET /features params = null
[2021-05-07 13:37:26.369] [info] Response success for /features
[2021-05-07 13:37:26.371] [info] Response for GET /features
[2021-05-07 13:37:26.375] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:37:35.517] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-05-07 13:37:35.519] [info] engine state notification { state: 'stopped', mode: 'linux' }
[2021-05-07 13:37:35.524] [info] notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-05-07 13:37:35.543] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-07 13:37:35.547] [info] engine state notification { state: 'starting', mode: 'linux' }
[2021-05-07 13:37:35.551] [info] notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-07 13:37:55.595] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:37:55.596] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:37:55.600] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:37:55.777] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:37:55.784] [info] Response for GET /events
[2021-05-07 13:37:58.285] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-05-07 13:37:58.286] [info] kubernetes state notification { state: 'starting', enabled: true }
[2021-05-07 13:37:58.289] [info] notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-05-07 13:38:36.868] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-05-07 13:38:36.870] [info] kubernetes state notification { state: 'running', enabled: true }
[2021-05-07 13:38:36.873] [info] notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-05-07 13:51:55.955] [info] quitting application
[2021-05-07 13:51:55.957] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:51:55.962] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:52:13.636] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:52:13.643] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:52:13.646] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:52:13.733] [info] application ready
[2021-05-07 13:52:13.754] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:52:13.843] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:52:13.846] [info] using production config /tutorial
[2021-05-07 13:52:13.900] [info] Response success for /notifications/subscriptions
[2021-05-07 13:52:13.934] [info] Response for POST /notifications/subscriptions
[2021-05-07 13:52:13.943] [verbose] 
[2021-05-07 13:52:16.281] [verbose] GET /features params = null
[2021-05-07 13:52:16.288] [verbose] GET /settings params = null
[2021-05-07 13:52:16.299] [verbose] GET /versions params = null
[2021-05-07 13:52:16.308] [info] Response success for /features
[2021-05-07 13:52:16.309] [info] Response for GET /features
[2021-05-07 13:52:16.314] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:52:16.319] [verbose] GET /system/editor params = null
[2021-05-07 13:52:16.326] [info] Response success for /settings
[2021-05-07 13:52:16.329] [info] Response for GET /settings
[2021-05-07 13:52:16.332] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620385042996,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:52:16.337] [verbose] GET /kubernetes params = null
[2021-05-07 13:52:16.342] [verbose] GET /registry/user params = null
[2021-05-07 13:52:16.349] [verbose] GET /docker params = null
[2021-05-07 13:52:16.355] [verbose] GET /update params = null
[2021-05-07 13:52:16.373] [info] Response success for /kubernetes
[2021-05-07 13:52:16.376] [info] Response for GET /kubernetes
[2021-05-07 13:52:16.379] [verbose] { state: 'running', enabled: true }
[2021-05-07 13:52:16.384] [info] Response success for /registry/user
[2021-05-07 13:52:16.387] [info] Response for GET /registry/user
[2021-05-07 13:52:16.392] [verbose] { username: 'neuromancer0001' }
[2021-05-07 13:52:16.397] [info] Response success for /docker
[2021-05-07 13:52:16.399] [info] Response for GET /docker
[2021-05-07 13:52:16.402] [verbose] { state: 'running', mode: 'linux' }
[2021-05-07 13:52:16.409] [info] Response success for /update
[2021-05-07 13:52:16.411] [info] Response for GET /update
[2021-05-07 13:52:16.415] [verbose] { updateAvailableTime: 0 }
[2021-05-07 13:52:16.420] [info] Response success for /system/editor
[2021-05-07 13:52:16.421] [info] Response for GET /system/editor
[2021-05-07 13:52:16.428] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 13:52:16.502] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:52:16.519] [info] Response success for /system/disk-usage
[2021-05-07 13:52:16.520] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:52:16.522] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 179548
}
[2021-05-07 13:52:16.601] [verbose] GET /features params = null
[2021-05-07 13:52:16.604] [info] Response success for /features
[2021-05-07 13:52:16.606] [info] Response for GET /features
[2021-05-07 13:52:16.609] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:52:16.782] [info] Response success for /versions
[2021-05-07 13:52:16.783] [info] Response for GET /versions
[2021-05-07 13:52:16.785] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 13:52:17.029] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:52:17.035] [info] Response for GET /events
[2021-05-07 13:54:44.485] [debug] engine state notification, req.body:  { state: 'running', mode: 'windows' }
[2021-05-07 13:54:44.492] [info] engine state notification { state: 'running', mode: 'windows' }
[2021-05-07 13:54:44.499] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"windows"}}
[2021-05-07 13:54:45.046] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:54:45.070] [info] Response for GET /events
[2021-05-07 13:55:01.666] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-07 13:55:01.671] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 9509.075000000394,
    action: false,
    skip: false,
    terminal: true,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-07 13:55:01.674] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 68824.45499999994,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-07 13:55:01.681] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3219.4050000002753,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-07 13:55:01.686] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 16957.859999999986,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-07 13:55:02.741] [info] Response success for /analytics/track
[2021-05-07 13:55:02.743] [info] Response for POST /analytics/track
[2021-05-07 13:55:02.745] [verbose] 
[2021-05-07 13:55:02.749] [info] Response success for /analytics/track
[2021-05-07 13:55:02.752] [info] Response for POST /analytics/track
[2021-05-07 13:55:02.754] [verbose] 
[2021-05-07 13:55:02.758] [info] Response success for /analytics/track
[2021-05-07 13:55:02.760] [info] Response for POST /analytics/track
[2021-05-07 13:55:02.762] [verbose] 
[2021-05-07 13:55:02.765] [info] Response success for /analytics/track
[2021-05-07 13:55:02.767] [info] Response for POST /analytics/track
[2021-05-07 13:55:02.770] [verbose] 
[2021-05-07 13:55:02.773] [info] Response success for /analytics/track
[2021-05-07 13:55:02.775] [info] Response for POST /analytics/track
[2021-05-07 13:55:02.777] [verbose] 
[2021-05-07 13:55:17.478] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 13:55:17.482] [info] engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 13:55:17.490] [info] notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 13:55:17.643] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:55:41.663] [info] quitting application
[2021-05-07 13:55:41.666] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:55:41.675] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:55:52.229] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:55:52.237] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:55:52.240] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:55:52.313] [info] application ready
[2021-05-07 13:55:52.327] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:55:52.395] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"update","mode":"ready-to-download","version":"3.3.3 (64133)","date":"May 6 2021","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:55:52.397] [info] using production config /update
[2021-05-07 13:55:52.446] [info] Response success for /notifications/subscriptions
[2021-05-07 13:55:52.479] [info] Response for POST /notifications/subscriptions
[2021-05-07 13:55:52.483] [verbose] 
[2021-05-07 13:55:54.534] [verbose] GET /features params = null
[2021-05-07 13:55:54.542] [verbose] GET /settings params = null
[2021-05-07 13:55:54.570] [verbose] GET /versions params = null
[2021-05-07 13:55:54.576] [info] Response success for /features
[2021-05-07 13:55:54.583] [info] Response for GET /features
[2021-05-07 13:55:54.589] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:55:54.594] [verbose] GET /system/editor params = null
[2021-05-07 13:55:54.602] [verbose] GET /kubernetes params = null
[2021-05-07 13:55:54.609] [verbose] GET /registry/user params = null
[2021-05-07 13:55:54.618] [info] Response success for /settings
[2021-05-07 13:55:54.623] [info] Response for GET /settings
[2021-05-07 13:55:54.627] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:55:54.634] [verbose] GET /docker params = null
[2021-05-07 13:55:54.642] [verbose] GET /update params = null
[2021-05-07 13:55:54.659] [info] Response success for /kubernetes
[2021-05-07 13:55:54.669] [info] Response for GET /kubernetes
[2021-05-07 13:55:54.673] [verbose] { state: 'running', enabled: true }
[2021-05-07 13:55:54.681] [info] Response success for /registry/user
[2021-05-07 13:55:54.685] [info] Response for GET /registry/user
[2021-05-07 13:55:54.687] [verbose] { username: 'neuromancer0001' }
[2021-05-07 13:55:54.692] [info] Response success for /docker
[2021-05-07 13:55:54.698] [info] Response for GET /docker
[2021-05-07 13:55:54.704] [verbose] { state: 'running', mode: 'linux' }
[2021-05-07 13:55:54.708] [info] Response success for /system/editor
[2021-05-07 13:55:54.711] [info] Response for GET /system/editor
[2021-05-07 13:55:54.714] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 13:55:54.720] [info] Response success for /update
[2021-05-07 13:55:54.725] [info] Response for GET /update
[2021-05-07 13:55:54.728] [verbose] { updateAvailableTime: 0 }
[2021-05-07 13:55:54.814] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:55:54.830] [info] Response success for /system/disk-usage
[2021-05-07 13:55:54.831] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:55:54.834] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 179541
}
[2021-05-07 13:55:54.901] [verbose] GET /features params = null
[2021-05-07 13:55:54.909] [info] Response success for /features
[2021-05-07 13:55:54.921] [info] Response for GET /features
[2021-05-07 13:55:54.924] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:55:55.027] [info] Response success for /versions
[2021-05-07 13:55:55.028] [info] Response for GET /versions
[2021-05-07 13:55:55.031] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 13:55:57.405] [verbose] POST /analytics/track data = {
  event: 'actionUpdatePopupInstall',
  body: { mode: 'ready-to-download', numberOfDaysOld: 18754 }
}
[2021-05-07 13:55:57.426] [info] Response success for /analytics/track
[2021-05-07 13:55:57.427] [info] Response for POST /analytics/track
[2021-05-07 13:55:57.429] [verbose] 
[2021-05-07 13:55:57.433] [verbose] POST /update data = { appcastURL: null, mode: 'ready-to-download' }
[2021-05-07 13:56:01.459] [info] Response success for /update
[2021-05-07 13:56:01.461] [info] Response for POST /update
[2021-05-07 13:56:01.464] [verbose] 
[2021-05-07 13:56:01.489] [info] quitting application
[2021-05-07 13:56:01.491] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:56:01.495] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:56:05.650] [info] server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:56:05.658] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:56:05.661] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 13:56:05.754] [info] application ready
[2021-05-07 13:56:05.780] [info] open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:56:05.863] [info] main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 13:56:05.865] [info] using production config /tutorial
[2021-05-07 13:56:05.921] [info] Response success for /notifications/subscriptions
[2021-05-07 13:56:06.087] [info] Response for POST /notifications/subscriptions
[2021-05-07 13:56:06.094] [verbose] 
[2021-05-07 13:56:06.801] [debug] new update available { updateAvailableTime: 0 }
[2021-05-07 13:56:06.802] [info] notification : {"type":"settings-desktop.update-ready","payload":{"updateAvailableTime":0}}
[2021-05-07 13:56:08.532] [verbose] GET /features params = null
[2021-05-07 13:56:08.539] [verbose] GET /settings params = null
[2021-05-07 13:56:08.547] [verbose] GET /versions params = null
[2021-05-07 13:56:08.551] [info] Response success for /features
[2021-05-07 13:56:08.552] [info] Response for GET /features
[2021-05-07 13:56:08.555] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:56:08.559] [verbose] GET /system/editor params = null
[2021-05-07 13:56:08.569] [info] Response success for /settings
[2021-05-07 13:56:08.574] [info] Response for GET /settings
[2021-05-07 13:56:08.580] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true\r\n' +
      '}',
    fileSharing: [],
    kubernetes: {
      enabled: true,
      showSystemContainers: true,
      stackOrchestrator: false
    },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 13:56:08.585] [verbose] GET /kubernetes params = null
[2021-05-07 13:56:08.592] [verbose] GET /registry/user params = null
[2021-05-07 13:56:08.598] [verbose] GET /docker params = null
[2021-05-07 13:56:08.605] [verbose] GET /update params = null
[2021-05-07 13:56:08.626] [info] Response success for /kubernetes
[2021-05-07 13:56:08.630] [info] Response for GET /kubernetes
[2021-05-07 13:56:08.634] [verbose] { state: 'running', enabled: true }
[2021-05-07 13:56:08.639] [info] Response success for /registry/user
[2021-05-07 13:56:08.643] [info] Response for GET /registry/user
[2021-05-07 13:56:08.647] [verbose] { username: 'neuromancer0001' }
[2021-05-07 13:56:08.651] [info] Response success for /docker
[2021-05-07 13:56:08.655] [info] Response for GET /docker
[2021-05-07 13:56:08.658] [verbose] { state: 'running', mode: 'linux' }
[2021-05-07 13:56:08.663] [info] Response success for /system/editor
[2021-05-07 13:56:08.665] [info] Response for GET /system/editor
[2021-05-07 13:56:08.668] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 13:56:08.674] [info] Response success for /update
[2021-05-07 13:56:08.675] [info] Response for GET /update
[2021-05-07 13:56:08.679] [verbose] { updateAvailableTime: 0 }
[2021-05-07 13:56:08.774] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 13:56:08.807] [info] Response success for /system/disk-usage
[2021-05-07 13:56:08.811] [info] Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 13:56:08.817] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 179424
}
[2021-05-07 13:56:08.950] [info] Response success for /versions
[2021-05-07 13:56:08.951] [info] Response for GET /versions
[2021-05-07 13:56:08.953] [verbose] {
  gitCommit: '6b70fc1f64d103396b0f5d514398e25cc0b1a003',
  appVersion: '3.3.1',
  buildNumber: '63152',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.5',
  composeVersion: '1.29.0',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.461.0'
}
[2021-05-07 13:56:08.981] [verbose] GET /features params = null
[2021-05-07 13:56:08.987] [info] Response success for /features
[2021-05-07 13:56:08.990] [info] Response for GET /features
[2021-05-07 13:56:08.993] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  Tip: {
    name: 'Tip of the Week',
    label: 'Enable Tip of the Week',
    description: 'Enable Tip of the Week',
    enabled: true,
    type: 1
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 13:56:09.373] [info] Starting request on Docker socket GET /events undefined
[2021-05-07 13:56:09.379] [info] Response for GET /events
[2021-05-07 13:57:00.290] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-07 13:57:00.295] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 15150.145000000066,
    action: false,
    skip: false,
    terminal: true,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-07 13:57:00.302] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 7074.309999999965,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-07 13:57:00.310] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3963.1199999998935,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-07 13:57:00.314] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 9321.684999999889,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-07 13:57:00.322] [info] Response success for /analytics/track
[2021-05-07 13:57:00.327] [info] Response for POST /analytics/track
[2021-05-07 13:57:00.329] [verbose] 
[2021-05-07 13:57:00.335] [info] Response success for /analytics/track
[2021-05-07 13:57:00.336] [info] Response for POST /analytics/track
[2021-05-07 13:57:00.338] [verbose] 
[2021-05-07 13:57:00.342] [info] Response success for /analytics/track
[2021-05-07 13:57:00.343] [info] Response for POST /analytics/track
[2021-05-07 13:57:00.345] [verbose] 
[2021-05-07 13:57:00.348] [info] Response success for /analytics/track
[2021-05-07 13:57:00.350] [info] Response for POST /analytics/track
[2021-05-07 13:57:00.353] [verbose] 
[2021-05-07 13:57:00.356] [info] Response success for /analytics/track
[2021-05-07 13:57:00.358] [info] Response for POST /analytics/track
[2021-05-07 13:57:00.360] [verbose] 
[2021-05-07 13:57:22.097] [verbose] POST /usage data = { command: 'containerDetailsViewOpen', count: 1 }
[2021-05-07 13:57:22.113] [info] Response success for /usage
[2021-05-07 13:57:22.115] [info] Response for POST /usage
[2021-05-07 13:57:22.118] [verbose] 
[2021-05-07 13:57:34.952] [info] quitting application
[2021-05-07 13:57:34.954] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 13:57:34.969] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 14:07:12.780] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-07 14:07:12.795] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 14:07:12.803] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-07 14:07:12.921] [info]  application ready
[2021-05-07 14:07:13.022] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 14:07:13.101] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-07 14:07:13.186] [info]  using production config /dashboard
[2021-05-07 14:07:14.093] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-07 14:07:14.316] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:07:14.439] [verbose] GET /features params = null
[2021-05-07 14:07:14.443] [verbose] GET /settings params = null
[2021-05-07 14:07:14.456] [verbose] GET /versions params = null
[2021-05-07 14:07:14.463] [verbose] GET /system/editor params = null
[2021-05-07 14:07:14.476] [verbose] GET /kubernetes params = null
[2021-05-07 14:07:14.483] [verbose] GET /registry/user params = null
[2021-05-07 14:07:14.489] [verbose] GET /docker params = null
[2021-05-07 14:07:14.493] [verbose] GET /update params = null
[2021-05-07 14:07:14.521] [info]  Response success for /features
[2021-05-07 14:07:14.549] [info]  Response for GET /features
[2021-05-07 14:07:14.567] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 14:07:14.625] [info]  Response success for /system/editor
[2021-05-07 14:07:14.633] [info]  Response for GET /system/editor
[2021-05-07 14:07:14.637] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-07 14:07:16.516] [info]  Response success for /docker
[2021-05-07 14:07:16.517] [info]  Response for GET /docker
[2021-05-07 14:07:16.523] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-07 14:07:16.532] [info]  Response success for /kubernetes
[2021-05-07 14:07:16.538] [info]  Response for GET /kubernetes
[2021-05-07 14:07:16.541] [verbose] { state: 'stopped', enabled: true }
[2021-05-07 14:07:16.545] [info]  Response success for /settings
[2021-05-07 14:07:16.549] [info]  Response for GET /settings
[2021-05-07 14:07:16.554] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": true,\r\n' +
      '  "experimental": true,\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-07 14:07:16.558] [info]  Response success for /update
[2021-05-07 14:07:16.563] [info]  Response for GET /update
[2021-05-07 14:07:16.567] [verbose] { updateAvailableTime: 0 }
[2021-05-07 14:07:16.572] [info]  Response success for /registry/user
[2021-05-07 14:07:16.580] [info]  Response for GET /registry/user
[2021-05-07 14:07:16.585] [verbose] { username: 'neuromancer0001' }
[2021-05-07 14:07:16.595] [info]  ping received
[2021-05-07 14:07:16.608] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-07 14:07:16.622] [info]  Response success for /usage
[2021-05-07 14:07:16.631] [info]  Response for POST /usage
[2021-05-07 14:07:16.636] [verbose] 
[2021-05-07 14:07:16.659] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-07 14:07:16.672] [verbose] GET /features params = null
[2021-05-07 14:07:16.709] [info]  Response success for /features
[2021-05-07 14:07:16.736] [info]  Response for GET /features
[2021-05-07 14:07:16.743] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-07 14:07:16.759] [info]  Response success for /notifications/subscriptions
[2021-05-07 14:07:16.770] [info]  Response for POST /notifications/subscriptions
[2021-05-07 14:07:16.773] [verbose] 
[2021-05-07 14:07:17.515] [info]  Response success for /system/disk-usage
[2021-05-07 14:07:17.516] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-07 14:07:17.520] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 179218
}
[2021-05-07 14:07:19.514] [info]  Response success for /versions
[2021-05-07 14:07:19.516] [info]  Response for GET /versions
[2021-05-07 14:07:19.521] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-07 14:08:05.781] [debug] engine state notification, req.body:  { state: 'running', mode: 'linux' }
[2021-05-07 14:08:05.785] [info]  engine state notification { state: 'running', mode: 'linux' }
[2021-05-07 14:08:05.788] [info]  notification : {"type":"engine.success","payload":{"state":"running","mode":"linux"}}
[2021-05-07 14:08:06.086] [info]  received: init-docker-socket, context: dashboard-stream, url: /events
[2021-05-07 14:08:06.088] [info]  Starting request on Docker socket GET /events undefined
[2021-05-07 14:08:06.096] [info]  Response success for GET /events
[2021-05-07 14:08:06.099] [info]  Start listening to Docker socket : /events
[2021-05-07 14:08:08.794] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-05-07 14:08:08.795] [info]  kubernetes state notification { state: 'starting', enabled: true }
[2021-05-07 14:08:08.798] [info]  notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-05-07 14:08:24.100] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:08:24.123] [info]  Response success for /usage
[2021-05-07 14:08:24.125] [info]  Response for POST /usage
[2021-05-07 14:08:24.130] [verbose] 
[2021-05-07 14:08:31.194] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:08:31.218] [info]  Response success for /usage
[2021-05-07 14:08:31.226] [info]  Response for POST /usage
[2021-05-07 14:08:31.229] [verbose] 
[2021-05-07 14:08:39.583] [debug] kubernetes state notification, req.body:  { state: 'running', enabled: true }
[2021-05-07 14:08:39.586] [info]  kubernetes state notification { state: 'running', enabled: true }
[2021-05-07 14:08:39.593] [info]  notification : {"type":"kubernetes.success","payload":{"state":"running","enabled":true}}
[2021-05-07 14:08:42.746] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:08:42.762] [info]  Response success for /usage
[2021-05-07 14:08:42.764] [info]  Response for POST /usage
[2021-05-07 14:08:42.768] [verbose] 
[2021-05-07 14:08:44.268] [info]  received: docker-run-container, options:["neuromancer0001/docker101tutorial:<none>",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:08:44.452] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:08:44.471] [info]  Response success for /usage
[2021-05-07 14:08:44.473] [info]  Response for POST /usage
[2021-05-07 14:08:44.477] [verbose] 
[2021-05-07 14:08:48.658] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:08:48.678] [info]  Response success for /usage
[2021-05-07 14:08:48.683] [info]  Response for POST /usage
[2021-05-07 14:08:48.689] [verbose] 
[2021-05-07 14:08:53.307] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:08:53.331] [info]  Response success for /usage
[2021-05-07 14:08:53.332] [info]  Response for POST /usage
[2021-05-07 14:08:53.335] [verbose] 
[2021-05-07 14:08:54.938] [info]  received: docker-run-container, options:["docker101tutorial:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:08:55.144] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:08:55.159] [info]  Response success for /usage
[2021-05-07 14:08:55.162] [info]  Response for POST /usage
[2021-05-07 14:08:55.167] [verbose] 
[2021-05-07 14:09:04.355] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:09:04.374] [info]  Response success for /usage
[2021-05-07 14:09:04.377] [info]  Response for POST /usage
[2021-05-07 14:09:04.380] [verbose] 
[2021-05-07 14:09:16.174] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:09:16.192] [info]  Response success for /usage
[2021-05-07 14:09:16.194] [info]  Response for POST /usage
[2021-05-07 14:09:16.197] [verbose] 
[2021-05-07 14:09:21.762] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:09:21.781] [info]  Response success for /usage
[2021-05-07 14:09:21.783] [info]  Response for POST /usage
[2021-05-07 14:09:21.787] [verbose] 
[2021-05-07 14:09:23.267] [info]  received: docker-run-container, options:["neuromancer0001/docker101tutorial:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:09:23.441] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:09:23.458] [info]  Response success for /usage
[2021-05-07 14:09:23.470] [info]  Response for POST /usage
[2021-05-07 14:09:23.477] [verbose] 
[2021-05-07 14:09:30.725] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:09:30.742] [info]  Response success for /usage
[2021-05-07 14:09:30.746] [info]  Response for POST /usage
[2021-05-07 14:09:30.750] [verbose] 
[2021-05-07 14:09:35.025] [verbose] POST /usage data = { command: 'imagePull', count: 1 }
[2021-05-07 14:09:35.040] [info]  Response success for /usage
[2021-05-07 14:09:35.042] [info]  Response for POST /usage
[2021-05-07 14:09:35.049] [verbose] 
[2021-05-07 14:09:48.513] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:09:48.532] [info]  Response success for /usage
[2021-05-07 14:09:48.533] [info]  Response for POST /usage
[2021-05-07 14:09:48.537] [verbose] 
[2021-05-07 14:09:49.899] [info]  received: docker-run-container, options:["webapplication1:dev",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:09:50.114] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:09:50.130] [info]  Response success for /usage
[2021-05-07 14:09:50.131] [info]  Response for POST /usage
[2021-05-07 14:09:50.136] [verbose] 
[2021-05-07 14:09:57.109] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:09:57.126] [info]  Response success for /usage
[2021-05-07 14:09:57.129] [info]  Response for POST /usage
[2021-05-07 14:09:57.132] [verbose] 
[2021-05-07 14:10:06.786] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:10:06.800] [info]  Response success for /usage
[2021-05-07 14:10:06.806] [info]  Response for POST /usage
[2021-05-07 14:10:06.811] [verbose] 
[2021-05-07 14:10:08.226] [info]  received: docker-run-container, options:["b3log/siyuan:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:10:08.471] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:10:08.487] [info]  Response success for /usage
[2021-05-07 14:10:08.491] [info]  Response for POST /usage
[2021-05-07 14:10:08.496] [verbose] 
[2021-05-07 14:10:15.341] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:10:15.357] [info]  Response success for /usage
[2021-05-07 14:10:15.360] [info]  Response for POST /usage
[2021-05-07 14:10:15.363] [verbose] 
[2021-05-07 14:10:18.257] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:10:18.275] [info]  Response success for /usage
[2021-05-07 14:10:18.281] [info]  Response for POST /usage
[2021-05-07 14:10:18.286] [verbose] 
[2021-05-07 14:10:28.865] [verbose] POST /usage data = { command: 'containerRemoveClicked', count: 1 }
[2021-05-07 14:10:28.880] [info]  Response success for /usage
[2021-05-07 14:10:28.883] [info]  Response for POST /usage
[2021-05-07 14:10:28.889] [verbose] 
[2021-05-07 14:10:33.406] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:10:33.424] [info]  Response success for /usage
[2021-05-07 14:10:33.441] [info]  Response for POST /usage
[2021-05-07 14:10:33.452] [verbose] 
[2021-05-07 14:10:38.069] [verbose] POST /usage data = { command: 'imagePush', count: 1 }
[2021-05-07 14:10:38.082] [info]  Response success for /usage
[2021-05-07 14:10:38.083] [info]  Response for POST /usage
[2021-05-07 14:10:38.086] [verbose] 
[2021-05-07 14:10:46.338] [verbose] POST /usage data = { command: 'imagePull', count: 1 }
[2021-05-07 14:10:46.359] [info]  Response success for /usage
[2021-05-07 14:10:46.366] [info]  Response for POST /usage
[2021-05-07 14:10:46.377] [verbose] 
[2021-05-07 14:10:56.073] [verbose] POST /usage data = { command: 'imagePull', count: 1 }
[2021-05-07 14:10:56.087] [info]  Response success for /usage
[2021-05-07 14:10:56.089] [info]  Response for POST /usage
[2021-05-07 14:10:56.096] [verbose] 
[2021-05-07 14:11:05.897] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:11:05.916] [info]  Response success for /usage
[2021-05-07 14:11:05.917] [info]  Response for POST /usage
[2021-05-07 14:11:05.920] [verbose] 
[2021-05-07 14:11:07.402] [info]  received: docker-run-container, options:["b3log/siyuan:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:11:07.572] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:11:07.586] [info]  Response success for /usage
[2021-05-07 14:11:07.587] [info]  Response for POST /usage
[2021-05-07 14:11:07.590] [verbose] 
[2021-05-07 14:11:13.315] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:11:13.335] [info]  Response success for /usage
[2021-05-07 14:11:13.338] [info]  Response for POST /usage
[2021-05-07 14:11:13.343] [verbose] 
[2021-05-07 14:11:13.481] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:11:13.498] [info]  Response success for /usage
[2021-05-07 14:11:13.500] [info]  Response for POST /usage
[2021-05-07 14:11:13.505] [verbose] 
[2021-05-07 14:11:18.615] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:11:18.634] [info]  Response success for /usage
[2021-05-07 14:11:18.636] [info]  Response for POST /usage
[2021-05-07 14:11:18.638] [verbose] 
[2021-05-07 14:11:22.153] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:11:22.168] [info]  Response success for /usage
[2021-05-07 14:11:22.169] [info]  Response for POST /usage
[2021-05-07 14:11:22.173] [verbose] 
[2021-05-07 14:11:23.578] [info]  received: docker-run-container, options:["docker/getting-started:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:11:23.741] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:11:23.763] [info]  Response success for /usage
[2021-05-07 14:11:23.766] [info]  Response for POST /usage
[2021-05-07 14:11:23.772] [verbose] 
[2021-05-07 14:12:00.264] [verbose] POST /usage data = { command: 'containerRemoveClicked', count: 1 }
[2021-05-07 14:12:00.284] [info]  Response success for /usage
[2021-05-07 14:12:00.286] [info]  Response for POST /usage
[2021-05-07 14:12:00.289] [verbose] 
[2021-05-07 14:12:00.457] [verbose] POST /usage data = { command: 'containerRowClicked', count: 1 }
[2021-05-07 14:12:00.470] [info]  Response success for /usage
[2021-05-07 14:12:00.472] [info]  Response for POST /usage
[2021-05-07 14:12:00.475] [verbose] 
[2021-05-07 14:12:00.604] [info]  received: init-docker-socket, context: container-logs-stream, url: /events
[2021-05-07 14:12:00.605] [info]  Starting request on Docker socket GET /events undefined
[2021-05-07 14:12:00.613] [info]  Response success for GET /events
[2021-05-07 14:12:00.617] [info]  Start listening to Docker socket : /events
[2021-05-07 14:12:08.651] [info]  received: destroy-docker-stream, context: container-logs-stream, engineState: undefined
[2021-05-07 14:12:08.659] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:12:08.681] [info]  Response success for /usage
[2021-05-07 14:12:08.682] [info]  Response for POST /usage
[2021-05-07 14:12:08.685] [verbose] 
[2021-05-07 14:12:25.521] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:12:25.537] [info]  Response success for /usage
[2021-05-07 14:12:25.539] [info]  Response for POST /usage
[2021-05-07 14:12:25.541] [verbose] 
[2021-05-07 14:12:26.817] [info]  received: docker-run-container, options:["neuromancer0001/docker101tutorial:<none>",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:12:26.944] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:12:26.957] [info]  Response success for /usage
[2021-05-07 14:12:26.958] [info]  Response for POST /usage
[2021-05-07 14:12:26.961] [verbose] 
[2021-05-07 14:12:35.292] [verbose] POST /usage data = { command: 'containerSortChanged', count: 1 }
[2021-05-07 14:12:35.306] [info]  Response success for /usage
[2021-05-07 14:12:35.307] [info]  Response for POST /usage
[2021-05-07 14:12:35.310] [verbose] 
[2021-05-07 14:12:42.405] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:12:42.423] [info]  Response success for /usage
[2021-05-07 14:12:42.425] [info]  Response for POST /usage
[2021-05-07 14:12:42.428] [verbose] 
[2021-05-07 14:12:44.600] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:12:44.617] [info]  Response success for /usage
[2021-05-07 14:12:44.618] [info]  Response for POST /usage
[2021-05-07 14:12:44.622] [verbose] 
[2021-05-07 14:12:46.792] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:12:46.808] [info]  Response success for /usage
[2021-05-07 14:12:46.810] [info]  Response for POST /usage
[2021-05-07 14:12:46.813] [verbose] 
[2021-05-07 14:12:48.560] [verbose] POST /usage data = { command: 'containerStartClicked', count: 1 }
[2021-05-07 14:12:48.577] [info]  Response success for /usage
[2021-05-07 14:12:48.578] [info]  Response for POST /usage
[2021-05-07 14:12:48.582] [verbose] 
[2021-05-07 14:12:52.904] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:12:52.921] [info]  Response success for /usage
[2021-05-07 14:12:52.924] [info]  Response for POST /usage
[2021-05-07 14:12:52.927] [verbose] 
[2021-05-07 14:13:02.425] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:13:02.443] [info]  Response success for /usage
[2021-05-07 14:13:02.444] [info]  Response for POST /usage
[2021-05-07 14:13:02.448] [verbose] 
[2021-05-07 14:13:03.635] [info]  received: docker-run-container, options:["neuromancer0001/local_image-new_repo:latest",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:13:03.832] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:13:03.849] [info]  Response success for /usage
[2021-05-07 14:13:03.850] [info]  Response for POST /usage
[2021-05-07 14:13:03.854] [verbose] 
[2021-05-07 14:13:18.464] [verbose] POST /usage data = { command: 'containerRemoveClicked', count: 1 }
[2021-05-07 14:13:18.480] [info]  Response success for /usage
[2021-05-07 14:13:18.483] [info]  Response for POST /usage
[2021-05-07 14:13:18.489] [verbose] 
[2021-05-07 14:13:20.393] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:13:20.411] [info]  Response success for /usage
[2021-05-07 14:13:20.413] [info]  Response for POST /usage
[2021-05-07 14:13:20.416] [verbose] 
[2021-05-07 14:13:31.400] [verbose] POST /usage data = { command: 'imagePush', count: 1 }
[2021-05-07 14:13:31.444] [info]  Response success for /usage
[2021-05-07 14:13:31.446] [info]  Response for POST /usage
[2021-05-07 14:13:31.452] [verbose] 
[2021-05-07 14:13:47.814] [verbose] POST /usage data = { command: 'imagePull', count: 1 }
[2021-05-07 14:13:47.829] [info]  Response success for /usage
[2021-05-07 14:13:47.834] [info]  Response for POST /usage
[2021-05-07 14:13:47.838] [verbose] 
[2021-05-07 14:13:51.739] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:13:51.759] [info]  Response success for /usage
[2021-05-07 14:13:51.761] [info]  Response for POST /usage
[2021-05-07 14:13:51.764] [verbose] 
[2021-05-07 14:13:53.297] [info]  received: docker-run-container, options:["k8s.gcr.io/etcd:3.4.13-0",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:13:53.448] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:13:53.462] [info]  Response success for /usage
[2021-05-07 14:13:53.463] [info]  Response for POST /usage
[2021-05-07 14:13:53.466] [verbose] 
[2021-05-07 14:14:02.402] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-07 14:14:02.419] [info]  Response success for /usage
[2021-05-07 14:14:02.421] [info]  Response for POST /usage
[2021-05-07 14:14:02.424] [verbose] 
[2021-05-07 14:14:13.767] [verbose] POST /usage data = { command: 'imageRun', count: 1 }
[2021-05-07 14:14:13.783] [info]  Response success for /usage
[2021-05-07 14:14:13.784] [info]  Response for POST /usage
[2021-05-07 14:14:13.788] [verbose] 
[2021-05-07 14:14:15.200] [info]  received: docker-run-container, options:["k8s.gcr.io/pause:3.2",[],null,{"name":"","HostConfig":{"PortBindings":{},"Binds":[]}}]
[2021-05-07 14:14:15.365] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:14:15.380] [info]  Response success for /usage
[2021-05-07 14:14:15.382] [info]  Response for POST /usage
[2021-05-07 14:14:15.386] [verbose] 
[2021-05-07 14:14:23.661] [verbose] POST /usage data = { command: 'containerRowClicked', count: 1 }
[2021-05-07 14:14:23.675] [info]  Response success for /usage
[2021-05-07 14:14:23.676] [info]  Response for POST /usage
[2021-05-07 14:14:23.682] [verbose] 
[2021-05-07 14:14:23.797] [info]  received: init-docker-socket, context: container-logs-stream, url: /events
[2021-05-07 14:14:23.798] [info]  Starting request on Docker socket GET /events undefined
[2021-05-07 14:14:23.806] [info]  Response success for GET /events
[2021-05-07 14:14:23.810] [info]  Start listening to Docker socket : /events
[2021-05-07 14:14:27.707] [verbose] POST /usage data = { command: 'detailedContainerCliClicked', count: 1 }
[2021-05-07 14:14:27.743] [info]  Response success for /usage
[2021-05-07 14:14:27.744] [info]  Response for POST /usage
[2021-05-07 14:14:27.748] [verbose] 
[2021-05-07 14:14:34.815] [verbose] POST /usage data = { command: 'detailedContainerStatsClicked', count: 1 }
[2021-05-07 14:14:34.828] [info]  Response success for /usage
[2021-05-07 14:14:34.831] [info]  Response for POST /usage
[2021-05-07 14:14:34.837] [verbose] 
[2021-05-07 14:14:34.857] [info]  received: destroy-docker-stream, context: container-logs-stream, engineState: undefined
[2021-05-07 14:14:34.873] [info]  received: init-docker-socket, context: stats-stream, url: /containers/6ffed9465a1f10017cbc1186d5d3cf4a3929812a31b68dcc340727faed887797/stats
[2021-05-07 14:14:34.875] [info]  Starting request on Docker socket GET /containers/6ffed9465a1f10017cbc1186d5d3cf4a3929812a31b68dcc340727faed887797/stats undefined
[2021-05-07 14:14:34.883] [info]  Response success for GET /containers/6ffed9465a1f10017cbc1186d5d3cf4a3929812a31b68dcc340727faed887797/stats
[2021-05-07 14:14:34.888] [info]  Start listening to Docker socket : /containers/6ffed9465a1f10017cbc1186d5d3cf4a3929812a31b68dcc340727faed887797/stats
[2021-05-07 14:14:38.008] [info]  received: destroy-docker-stream, context: stats-stream, engineState: running
[2021-05-07 14:14:40.639] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-07 14:14:40.791] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-07 14:14:41.596] [info]  Response success for /analytics/track
[2021-05-07 14:14:41.599] [info]  Response for POST /analytics/track
[2021-05-07 14:14:41.607] [verbose] 
[2021-05-07 14:14:41.733] [info]  Response success for /analytics/track
[2021-05-07 14:14:41.735] [info]  Response for POST /analytics/track
[2021-05-07 14:14:41.738] [verbose] 
[2021-05-07 14:15:29.071] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:15:29.087] [info]  Response success for /usage
[2021-05-07 14:15:29.088] [info]  Response for POST /usage
[2021-05-07 14:15:29.094] [verbose] 
[2021-05-07 14:15:36.551] [verbose] POST /usage data = { command: 'containerRowClicked', count: 1 }
[2021-05-07 14:15:36.566] [info]  Response success for /usage
[2021-05-07 14:15:36.569] [info]  Response for POST /usage
[2021-05-07 14:15:36.574] [verbose] 
[2021-05-07 14:15:36.681] [info]  received: init-docker-socket, context: container-logs-stream, url: /events
[2021-05-07 14:15:36.683] [info]  Starting request on Docker socket GET /events undefined
[2021-05-07 14:15:36.703] [info]  Response success for GET /events
[2021-05-07 14:15:36.745] [info]  Start listening to Docker socket : /events
[2021-05-07 14:15:38.951] [verbose] POST /usage data = { command: 'detailedContainerCliClicked', count: 1 }
[2021-05-07 14:15:38.987] [info]  Response success for /usage
[2021-05-07 14:15:38.988] [info]  Response for POST /usage
[2021-05-07 14:15:38.991] [verbose] 
[2021-05-07 14:15:48.789] [info]  received: destroy-docker-stream, context: container-logs-stream, engineState: undefined
[2021-05-07 14:15:48.804] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-07 14:15:48.817] [info]  Response success for /usage
[2021-05-07 14:15:48.818] [info]  Response for POST /usage
[2021-05-07 14:15:48.821] [verbose] 
[2021-05-07 14:15:56.095] [verbose] POST /usage data = { command: 'containerRowClicked', count: 1 }
[2021-05-07 14:15:56.108] [info]  Response success for /usage
[2021-05-07 14:15:56.109] [info]  Response for POST /usage
[2021-05-07 14:15:56.113] [verbose] 
[2021-05-07 14:15:56.188] [info]  received: init-docker-socket, context: container-logs-stream, url: /events
[2021-05-07 14:15:56.189] [info]  Starting request on Docker socket GET /events undefined
[2021-05-07 14:15:56.199] [info]  Response success for GET /events
[2021-05-07 14:15:56.203] [info]  Start listening to Docker socket : /events
[2021-05-07 14:15:58.455] [verbose] POST /usage data = { command: 'detailedContainerCliClicked', count: 1 }
[2021-05-07 14:15:58.491] [info]  Response success for /usage
[2021-05-07 14:15:58.493] [info]  Response for POST /usage
[2021-05-07 14:15:58.497] [verbose] 
[2021-05-07 14:16:01.990] [info]  quitting application
[2021-05-07 14:16:01.993] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-07 14:16:01.997] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-12 23:38:51.838] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-12 23:38:51.972] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-12 23:38:52.182] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-12 23:38:53.546] [info]  application ready
[2021-05-12 23:38:53.679] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:38:54.502] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:38:55.178] [info]  using production config /dashboard
[2021-05-12 23:38:55.837] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:38:57.013] [info]  application ready
[2021-05-12 23:38:59.398] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:38:59.813] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:38:59.892] [info]  using production config /dashboard
[2021-05-12 23:39:06.897] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-12 23:39:09.880] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-12 23:39:11.356] [info]  ping received
[2021-05-12 23:39:12.292] [verbose] GET /features params = null
[2021-05-12 23:39:12.296] [verbose] GET /settings params = null
[2021-05-12 23:39:12.387] [verbose] GET /versions params = null
[2021-05-12 23:39:12.391] [verbose] GET /system/editor params = null
[2021-05-12 23:39:12.407] [verbose] GET /kubernetes params = null
[2021-05-12 23:39:12.410] [verbose] GET /registry/user params = null
[2021-05-12 23:39:12.413] [verbose] GET /docker params = null
[2021-05-12 23:39:12.416] [verbose] GET /update params = null
[2021-05-12 23:39:12.519] [info]  Response success for /usage
[2021-05-12 23:39:12.520] [info]  Response for POST /usage
[2021-05-12 23:39:12.545] [verbose] 
[2021-05-12 23:39:12.988] [info]  Response success for /notifications/subscriptions
[2021-05-12 23:39:12.989] [info]  Response for POST /notifications/subscriptions
[2021-05-12 23:39:12.994] [verbose] 
[2021-05-12 23:39:15.060] [info]  Response success for /docker
[2021-05-12 23:39:15.062] [info]  Response for GET /docker
[2021-05-12 23:39:15.071] [verbose] { state: 'running', mode: 'windows' }
[2021-05-12 23:39:15.146] [info]  Response success for /settings
[2021-05-12 23:39:15.262] [info]  Response for GET /settings
[2021-05-12 23:39:15.409] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-12 23:39:15.555] [info]  Response success for /kubernetes
[2021-05-12 23:39:15.557] [info]  Response for GET /kubernetes
[2021-05-12 23:39:15.563] [verbose] { state: 'stopped', enabled: true }
[2021-05-12 23:39:15.574] [info]  Response success for /registry/user
[2021-05-12 23:39:15.575] [info]  Response for GET /registry/user
[2021-05-12 23:39:15.578] [verbose] { username: 'neuromancer0001' }
[2021-05-12 23:39:15.581] [info]  Response success for /update
[2021-05-12 23:39:15.583] [info]  Response for GET /update
[2021-05-12 23:39:15.586] [verbose] { updateAvailableTime: 0 }
[2021-05-12 23:39:15.779] [verbose] GET /features params = null
[2021-05-12 23:39:22.431] [info]  Response success for /features
[2021-05-12 23:39:22.433] [info]  Response for GET /features
[2021-05-12 23:39:22.919] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-12 23:39:23.387] [info]  Response success for /features
[2021-05-12 23:39:23.389] [info]  Response for GET /features
[2021-05-12 23:39:23.413] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-12 23:39:23.420] [info]  Response success for /system/editor
[2021-05-12 23:39:23.425] [info]  Response for GET /system/editor
[2021-05-12 23:39:23.430] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-12 23:39:23.744] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-12 23:39:27.426] [info]  Response success for /system/disk-usage
[2021-05-12 23:39:27.427] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-12 23:39:27.522] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 115422
}
[2021-05-12 23:39:28.333] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-12 23:39:28.393] [info]  Response success for /usage
[2021-05-12 23:39:28.402] [info]  Response for POST /usage
[2021-05-12 23:39:28.407] [verbose] 
[2021-05-12 23:39:31.440] [info]  Response success for /versions
[2021-05-12 23:39:31.441] [info]  Response for GET /versions
[2021-05-12 23:39:33.294] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-12 23:39:46.660] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-12 23:39:47.384] [verbose] GET /registry/token params = null
[2021-05-12 23:39:47.575] [verbose] GET /registry/token params = null
[2021-05-12 23:39:47.957] [info]  Response success for /usage
[2021-05-12 23:39:48.160] [info]  Response for POST /usage
[2021-05-12 23:39:48.190] [verbose] 
[2021-05-12 23:39:48.208] [info]  Response success for /registry/token
[2021-05-12 23:39:48.302] [info]  Response for GET /registry/token
[2021-05-12 23:39:48.684] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-12 23:39:48.758] [info]  Response success for /registry/token
[2021-05-12 23:39:48.834] [info]  Response for GET /registry/token
[2021-05-12 23:39:48.878] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-12 23:39:51.265] [info]  received: init-docker-socket, context: dashboard-stream, url: /events
[2021-05-12 23:39:51.267] [info]  Starting request on Docker socket GET /events undefined
[2021-05-12 23:39:51.398] [info]  Response success for GET /events
[2021-05-12 23:39:52.017] [info]  Start listening to Docker socket : /events
[2021-05-12 23:39:52.280] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-12 23:39:52.282] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-12 23:39:52.991] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-12 23:39:52.992] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 53,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 9,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-12 23:39:53.129] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-12 23:39:53.203] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-12 23:39:53.243] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-12 23:39:53.270] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-12 23:39:53.336] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-12 23:39:53.851] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-12 23:39:53.873] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-12 23:39:54.005] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-12 23:39:54.047] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-12 23:39:54.056] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-12 23:39:54.074] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-12 23:39:54.770] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-12 23:39:54.772] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: null,
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: null,
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-12 23:39:55.166] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-12 23:39:58.964] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: null,
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: null,
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-12 23:40:10.563] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-12 23:40:21.013] [info]  Response success for /analytics/track
[2021-05-12 23:40:21.014] [info]  Response for POST /analytics/track
[2021-05-12 23:40:21.053] [verbose] 
[2021-05-12 23:40:30.360] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-12 23:40:31.520] [info]  Response success for /analytics/track
[2021-05-12 23:40:31.523] [info]  Response for POST /analytics/track
[2021-05-12 23:40:31.546] [verbose] 
[2021-05-12 23:42:15.108] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-12 23:42:15.117] [info]  engine state notification { state: 'starting', mode: 'linux' }
[2021-05-12 23:42:15.275] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-12 23:42:16.021] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-12 23:42:39.937] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-12 23:42:39.988] [info]  Response success for /usage
[2021-05-12 23:42:40.006] [info]  Response for POST /usage
[2021-05-12 23:42:40.011] [verbose] 
[2021-05-12 23:42:40.604] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:42:42.502] [info]  application ready
[2021-05-12 23:42:44.424] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:42:50.958] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:43:17.935] [info]  using production config /dashboard
[2021-05-12 23:48:25.758] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-12 23:48:26.733] [info]  Response success for /usage
[2021-05-12 23:50:49.387] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-12 23:50:50.280] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-12 23:50:58.952] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-12 23:51:02.401] [info]  application ready
[2021-05-12 23:51:08.551] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:51:29.377] [info]  application ready
[2021-05-12 23:51:29.370] [info]  application ready
[2021-05-12 23:51:47.471] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:51:47.575] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:51:55.782] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:51:55.780] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-12 23:52:04.227] [info]  using production config /dashboard
[2021-05-13 00:11:33.549] [info]  using production config /dashboard
[2021-05-13 11:23:16.802] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-13 11:23:16.901] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-13 11:23:16.981] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-13 11:23:17.605] [info]  application ready
[2021-05-13 11:23:17.652] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 11:23:18.225] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 11:23:18.281] [info]  using production config /dashboard
[2021-05-13 11:23:18.577] [info]  ping received
[2021-05-13 11:23:19.095] [info]  Response success for /notifications/subscriptions
[2021-05-13 11:23:19.107] [info]  Response for POST /notifications/subscriptions
[2021-05-13 11:23:19.112] [verbose] 
[2021-05-13 11:23:20.400] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-13 11:23:21.949] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-13 11:23:22.054] [verbose] GET /features params = null
[2021-05-13 11:23:22.110] [verbose] GET /settings params = null
[2021-05-13 11:23:22.124] [verbose] GET /versions params = null
[2021-05-13 11:23:22.138] [verbose] GET /system/editor params = null
[2021-05-13 11:23:22.148] [verbose] GET /kubernetes params = null
[2021-05-13 11:23:22.169] [verbose] GET /registry/user params = null
[2021-05-13 11:23:22.179] [verbose] GET /docker params = null
[2021-05-13 11:23:22.190] [verbose] GET /update params = null
[2021-05-13 11:23:22.814] [info]  Response success for /features
[2021-05-13 11:23:22.891] [info]  Response for GET /features
[2021-05-13 11:23:22.924] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 11:23:23.371] [info]  Response success for /system/editor
[2021-05-13 11:23:23.376] [info]  Response for GET /system/editor
[2021-05-13 11:23:23.387] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-13 11:23:29.022] [info]  Response success for /registry/user
[2021-05-13 11:23:29.054] [info]  Response for GET /registry/user
[2021-05-13 11:23:29.096] [verbose] { username: 'neuromancer0001' }
[2021-05-13 11:23:29.105] [info]  Response success for /docker
[2021-05-13 11:23:29.126] [info]  Response for GET /docker
[2021-05-13 11:23:29.152] [verbose] { state: 'running', mode: 'windows' }
[2021-05-13 11:23:29.175] [info]  Response success for /update
[2021-05-13 11:23:29.202] [info]  Response for GET /update
[2021-05-13 11:23:29.213] [verbose] { updateAvailableTime: 0 }
[2021-05-13 11:23:29.231] [verbose] GET /features params = null
[2021-05-13 11:23:29.262] [info]  Response success for /usage
[2021-05-13 11:23:29.301] [info]  Response for POST /usage
[2021-05-13 11:23:29.322] [verbose] 
[2021-05-13 11:23:29.353] [info]  Response success for /features
[2021-05-13 11:23:29.371] [info]  Response for GET /features
[2021-05-13 11:23:29.381] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 11:23:30.368] [info]  received: init-docker-socket, context: dashboard-stream, url: /events
[2021-05-13 11:23:30.373] [info]  Starting request on Docker socket GET /events undefined
[2021-05-13 11:23:30.397] [info]  Response success for GET /events
[2021-05-13 11:23:30.403] [info]  Start listening to Docker socket : /events
[2021-05-13 11:23:35.818] [info]  Response success for /kubernetes
[2021-05-13 11:23:35.823] [info]  Response for GET /kubernetes
[2021-05-13 11:23:35.877] [verbose] { state: 'stopped', enabled: true }
[2021-05-13 11:23:35.900] [info]  Response success for /settings
[2021-05-13 11:23:35.914] [info]  Response for GET /settings
[2021-05-13 11:23:35.927] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 11:23:35.940] [info]  Response success for /versions
[2021-05-13 11:23:35.944] [info]  Response for GET /versions
[2021-05-13 11:23:35.973] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-13 11:23:35.996] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 11:23:36.334] [info]  Response success for /system/disk-usage
[2021-05-13 11:23:36.343] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 11:23:36.359] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 49581
}
[2021-05-13 11:24:39.958] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-13 11:24:39.978] [info]  Response success for /usage
[2021-05-13 11:24:39.999] [info]  Response for POST /usage
[2021-05-13 11:24:40.016] [verbose] 
[2021-05-13 11:24:53.461] [verbose] GET /settings params = null
[2021-05-13 11:24:53.464] [verbose] GET /features params = null
[2021-05-13 11:24:53.511] [info]  Response success for /settings
[2021-05-13 11:24:53.543] [info]  Response for GET /settings
[2021-05-13 11:24:53.559] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 11:24:53.765] [info]  Response success for /features
[2021-05-13 11:24:53.772] [info]  Response for GET /features
[2021-05-13 11:24:53.778] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 11:24:53.788] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 11:24:53.843] [info]  Response success for /system/disk-usage
[2021-05-13 11:24:53.858] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 11:24:53.869] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 49597
}
[2021-05-13 11:25:02.822] [verbose] GET /settings params = null
[2021-05-13 11:25:03.603] [info]  Response success for /settings
[2021-05-13 11:25:03.744] [info]  Response for GET /settings
[2021-05-13 11:25:04.043] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 11:25:04.187] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-05-13 11:25:07.036] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:07.110] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:07.209] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:07.618] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 11:25:08.051] [info]  Response success for /settings
[2021-05-13 11:25:08.205] [info]  Response for POST /settings
[2021-05-13 11:25:08.403] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 11:25:08.531] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 11:25:08.806] [verbose] GET /features params = null
[2021-05-13 11:25:09.013] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:09.288] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:09.438] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:11.433] [info]  Response success for /features
[2021-05-13 11:25:11.508] [info]  Response for GET /features
[2021-05-13 11:25:11.643] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 11:25:11.826] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:11.893] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:12.034] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:14.030] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:14.351] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:14.627] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:15.222] [info]  Response success for /system/disk-usage
[2021-05-13 11:25:15.360] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 11:25:15.688] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 49624
}
[2021-05-13 11:25:16.009] [info]  ping received
[2021-05-13 11:25:16.690] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:16.838] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:17.248] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:19.317] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:19.530] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:25:19.939] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:25:46.062] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-13 11:25:46.073] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-13 11:25:46.105] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-13 11:25:46.205] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 11:25:47.029] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-13 11:25:47.037] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-13 11:25:47.051] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-13 11:25:47.090] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-13 11:26:15.046] [debug] engine state notification, req.body:  { state: 'running', mode: 'windows' }
[2021-05-13 11:26:15.048] [info]  engine state notification { state: 'running', mode: 'windows' }
[2021-05-13 11:26:15.064] [info]  notification : {"type":"engine.success","payload":{"state":"running","mode":"windows"}}
[2021-05-13 11:26:15.281] [info]  received: init-docker-socket, context: dashboard-stream, url: /events
[2021-05-13 11:26:15.577] [info]  Starting request on Docker socket GET /events undefined
[2021-05-13 11:26:15.615] [info]  Response success for GET /events
[2021-05-13 11:26:15.632] [info]  Start listening to Docker socket : /events
[2021-05-13 11:27:17.375] [verbose] POST /desktop/cleanup data = { hyperv: false, wsl2: false, windowsContainers: true }
[2021-05-13 11:27:17.677] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:17.716] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:17.729] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:27:17.781] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 11:27:19.754] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:19.786] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:19.806] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:27:22.146] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-13 11:27:22.210] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-13 11:27:22.267] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-13 11:27:22.403] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 11:27:22.998] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:23.004] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 11:27:23.013] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 11:27:23.046] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 11:27:40.160] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-13 11:27:40.235] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-13 11:27:40.292] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-13 11:27:40.424] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 11:27:42.064] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-13 11:27:42.189] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-13 11:27:42.465] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-13 11:27:42.628] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-13 11:28:40.848] [info]  Response success for /desktop/cleanup
[2021-05-13 11:28:40.851] [info]  Response for POST /desktop/cleanup
[2021-05-13 11:28:40.873] [verbose] 
[2021-05-13 11:28:40.882] [debug] engine state notification, req.body:  { state: 'running', mode: 'windows' }
[2021-05-13 11:28:40.908] [info]  engine state notification { state: 'running', mode: 'windows' }
[2021-05-13 11:28:40.991] [info]  notification : {"type":"engine.success","payload":{"state":"running","mode":"windows"}}
[2021-05-13 11:28:42.036] [info]  received: init-docker-socket, context: dashboard-stream, url: /events
[2021-05-13 11:28:42.038] [info]  Starting request on Docker socket GET /events undefined
[2021-05-13 11:28:42.098] [info]  Response success for GET /events
[2021-05-13 11:28:42.121] [info]  Start listening to Docker socket : /events
[2021-05-13 11:32:13.791] [info]  quitting application
[2021-05-13 11:32:13.794] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-13 11:32:14.205] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-13 16:32:12.698] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-13 16:32:12.717] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-13 16:32:12.744] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-13 16:32:12.922] [info]  application ready
[2021-05-13 16:32:12.954] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 16:32:13.207] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 16:32:13.212] [info]  using production config /tutorial
[2021-05-13 16:32:13.338] [info]  ping received
[2021-05-13 16:32:13.376] [info]  Response success for /notifications/subscriptions
[2021-05-13 16:32:13.549] [info]  Response for POST /notifications/subscriptions
[2021-05-13 16:32:13.559] [verbose] 
[2021-05-13 16:32:14.406] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-13 16:32:14.728] [verbose] GET /features params = null
[2021-05-13 16:32:14.735] [verbose] GET /settings params = null
[2021-05-13 16:32:14.765] [verbose] GET /versions params = null
[2021-05-13 16:32:14.781] [verbose] GET /system/editor params = null
[2021-05-13 16:32:14.801] [verbose] GET /kubernetes params = null
[2021-05-13 16:32:14.822] [verbose] GET /registry/user params = null
[2021-05-13 16:32:14.850] [verbose] GET /docker params = null
[2021-05-13 16:32:14.858] [verbose] GET /update params = null
[2021-05-13 16:32:14.899] [info]  Response success for /registry/user
[2021-05-13 16:32:14.950] [info]  Response for GET /registry/user
[2021-05-13 16:32:14.955] [verbose] { username: 'neuromancer0001' }
[2021-05-13 16:32:14.978] [info]  Response success for /features
[2021-05-13 16:32:14.982] [info]  Response for GET /features
[2021-05-13 16:32:14.997] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 16:32:15.008] [info]  Response success for /kubernetes
[2021-05-13 16:32:15.012] [info]  Response for GET /kubernetes
[2021-05-13 16:32:15.019] [verbose] { state: 'stopped', enabled: true }
[2021-05-13 16:32:15.028] [info]  Response success for /update
[2021-05-13 16:32:15.031] [info]  Response for GET /update
[2021-05-13 16:32:15.033] [verbose] { updateAvailableTime: 0 }
[2021-05-13 16:32:15.037] [info]  Response success for /docker
[2021-05-13 16:32:15.040] [info]  Response for GET /docker
[2021-05-13 16:32:15.043] [verbose] { state: 'failed to start', mode: 'windows' }
[2021-05-13 16:32:15.046] [info]  Response success for /settings
[2021-05-13 16:32:15.049] [info]  Response for GET /settings
[2021-05-13 16:32:15.053] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 16:32:15.132] [verbose] GET /features params = null
[2021-05-13 16:32:15.143] [info]  Response success for /features
[2021-05-13 16:32:15.148] [info]  Response for GET /features
[2021-05-13 16:32:15.153] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 16:32:15.168] [info]  Response success for /system/editor
[2021-05-13 16:32:15.177] [info]  Response for GET /system/editor
[2021-05-13 16:32:15.191] [verbose] {
  id: 'vscode',
  name: 'Visual Studio Code',
  command: 'C:\\Users\\Neuro\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\Code.cmd'
}
[2021-05-13 16:32:15.196] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-13 16:32:15.208] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 16:32:15.351] [info]  Response success for /system/disk-usage
[2021-05-13 16:32:15.355] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 16:32:15.359] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 54176
}
[2021-05-13 16:32:17.584] [info]  Response success for /versions
[2021-05-13 16:32:17.585] [info]  Response for GET /versions
[2021-05-13 16:32:17.590] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-13 16:32:45.267] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-13 16:32:45.272] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3909.6799999999803,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-13 16:32:45.278] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 4270.389999999907,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-13 16:32:45.284] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3222.5250000001324,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-13 16:32:45.296] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5065.830000000005,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-13 16:32:45.561] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-13 16:32:45.578] [info]  Response success for /usage
[2021-05-13 16:32:45.582] [info]  Response for POST /usage
[2021-05-13 16:32:45.585] [verbose] 
[2021-05-13 16:32:46.224] [info]  Response success for /analytics/track
[2021-05-13 16:32:46.225] [info]  Response for POST /analytics/track
[2021-05-13 16:32:46.228] [verbose] 
[2021-05-13 16:32:46.242] [info]  Response success for /analytics/track
[2021-05-13 16:32:46.243] [info]  Response for POST /analytics/track
[2021-05-13 16:32:46.246] [verbose] 
[2021-05-13 16:32:46.276] [info]  Response success for /analytics/track
[2021-05-13 16:32:46.277] [info]  Response for POST /analytics/track
[2021-05-13 16:32:46.280] [verbose] 
[2021-05-13 16:32:46.283] [info]  Response success for /analytics/track
[2021-05-13 16:32:46.287] [info]  Response for POST /analytics/track
[2021-05-13 16:32:46.290] [verbose] 
[2021-05-13 16:32:46.294] [info]  Response success for /analytics/track
[2021-05-13 16:32:46.295] [info]  Response for POST /analytics/track
[2021-05-13 16:32:46.298] [verbose] 
[2021-05-13 16:33:05.045] [verbose] POST /desktop/cleanup data = { hyperv: false, wsl2: false, windowsContainers: true }
[2021-05-13 16:33:05.128] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 16:33:05.132] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 16:33:05.175] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 16:33:05.205] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 16:33:05.264] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-13 16:33:05.266] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-13 16:33:05.274] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-13 16:33:05.336] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 16:33:05.533] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-13 16:33:05.540] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-13 16:33:05.560] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-13 16:33:05.593] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-13 16:35:43.807] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-05-13 16:35:43.810] [info]  engine state notification { state: 'failed to start', mode: 'windows' }
[2021-05-13 16:35:43.819] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-05-13 16:35:43.846] [info]  Response success for /desktop/cleanup
[2021-05-13 16:35:43.856] [info]  Response for POST /desktop/cleanup
[2021-05-13 16:35:43.863] [verbose] 
[2021-05-13 16:35:43.886] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-13 16:43:24.609] [verbose] GET /settings params = null
[2021-05-13 16:43:24.612] [verbose] GET /features params = null
[2021-05-13 16:43:24.621] [info]  Response success for /features
[2021-05-13 16:43:24.624] [info]  Response for GET /features
[2021-05-13 16:43:24.627] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 16:43:24.635] [info]  Response success for /settings
[2021-05-13 16:43:24.639] [info]  Response for GET /settings
[2021-05-13 16:43:24.642] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 16:43:24.657] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 16:43:24.673] [info]  Response success for /system/disk-usage
[2021-05-13 16:43:24.694] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 16:43:24.698] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 54232
}
[2021-05-13 16:43:47.531] [verbose] GET /settings params = null
[2021-05-13 16:43:47.549] [info]  Response success for /settings
[2021-05-13 16:43:47.551] [info]  Response for GET /settings
[2021-05-13 16:43:47.553] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'manual', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 16:43:47.558] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-05-13 16:43:47.652] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 16:43:47.653] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 16:43:47.657] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 16:43:47.671] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 16:43:47.757] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-13 16:43:47.759] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-13 16:43:47.764] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-13 16:43:47.774] [info]  Response success for /settings
[2021-05-13 16:43:47.792] [info]  Response for POST /settings
[2021-05-13 16:43:47.795] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 16:43:47.824] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-13 16:43:47.829] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-13 16:43:47.839] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-13 16:43:47.857] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 16:43:47.862] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 16:43:47.872] [verbose] GET /features params = null
[2021-05-13 16:43:47.890] [info]  Response success for /features
[2021-05-13 16:43:47.977] [info]  Response for GET /features
[2021-05-13 16:43:48.076] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 16:43:48.086] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-13 16:43:48.094] [info]  Response success for /system/disk-usage
[2021-05-13 16:43:48.103] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 16:43:48.108] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 54230
}
[2021-05-13 16:46:24.396] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-05-13 16:46:24.398] [info]  engine state notification { state: 'failed to start', mode: 'windows' }
[2021-05-13 16:46:24.415] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-05-13 16:46:24.439] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-13 17:53:23.862] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-13 17:53:24.007] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-13 17:53:24.174] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-13 17:53:25.951] [info]  application ready
[2021-05-13 17:53:26.259] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 17:53:27.063] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 17:53:27.072] [info]  using production config /dashboard
[2021-05-13 17:53:27.667] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 17:53:28.807] [info]  application ready
[2021-05-13 17:53:29.072] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 17:53:29.363] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 17:53:29.576] [info]  using production config /settings
[2021-05-13 17:53:32.035] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-13 17:53:33.309] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-13 17:53:33.479] [verbose] GET /features params = null
[2021-05-13 17:53:33.625] [verbose] GET /settings params = null
[2021-05-13 17:53:33.859] [verbose] GET /versions params = null
[2021-05-13 17:53:34.080] [verbose] GET /system/editor params = null
[2021-05-13 17:53:34.088] [verbose] GET /kubernetes params = null
[2021-05-13 17:53:34.307] [verbose] GET /registry/user params = null
[2021-05-13 17:53:34.427] [verbose] GET /docker params = null
[2021-05-13 17:53:34.633] [verbose] GET /update params = null
[2021-05-13 17:53:34.859] [info]  Response error for /features: connect ENOENT \\.\pipe\dockerBackendApiServer
[2021-05-13 17:53:35.041] [error] !!! get /features
[2021-05-13 17:53:35.246] [error] Server did not respond to request
[2021-05-13 17:53:35.527] [error] {
  _writableState: {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: false,
    ended: false,
    finished: false,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: true,
    bufferProcessing: false,
    onwrite: '[function] function () { [native code] }',
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    buffered: [],
    bufferedIndex: 0,
    allBuffers: true,
    allNoop: true,
    pendingcb: 0,
    prefinished: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    errored: null,
    closed: false
  },
  _events: {
    response: '[function] function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '        /*eslint default-case:0*/\n' +
      "        case 'gzip':\n" +
      "        case 'compress':\n" +
      "        case 'deflate':\n" +
      '        // add the unzipper to the body stream processing pipeline\n' +
      '          stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '          // remove the content-encoding in order to not confuse downstream operations\n' +
      "          delete res.headers['content-encoding'];\n" +
      '          break;\n' +
      '        }\n' +
      '      }\n' +
      '\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      '\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {\n' +
      '            stream.destroy();\n' +
      "            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n" +
      '              config, null, lastRequest));\n' +
      '          }\n' +
      '        });\n' +
      '\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(enhanceError(err, config, null, lastRequest));\n' +
      '        });\n' +
      '\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          var responseData = Buffer.concat(responseBuffer);\n' +
      "          if (config.responseType !== 'arraybuffer') {\n" +
      '            responseData = responseData.toString(config.responseEncoding);\n' +
      "            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '              responseData = utils.stripBOM(responseData);\n' +
      '            }\n' +
      '          }\n' +
      '\n' +
      '          response.data = responseData;\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    }',
    error: '[function] function handleRequestError(err) {\n' +
      "      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n" +
      '      reject(enhanceError(err, config, null, req));\n' +
      '    }'
  },
  _eventsCount: 2,
  _options: {
    maxRedirects: 21,
    maxBodyLength: 10485760,
    protocol: 'http:',
    path: '/features',
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.21.1'
    },
    agents: {},
    socketPath: '\\\\.\\pipe\\dockerBackendApiServer',
    nativeProtocols: {
      'http:': {
        _connectionListener: '[function] function connectionListener(socket) {\n' +
          '  defaultTriggerAsyncIdScope(\n' +
          '    getOrSetAsyncId(socket), connectionListenerInternal, this, socket\n' +
          '  );\n' +
          '}',
        METHODS: [
          'ACL',        'BIND',        'CHECKOUT',
          'CONNECT',    'COPY',        'DELETE',
          'GET',        'HEAD',        'LINK',
          'LOCK',       'M-SEARCH',    'MERGE',
          'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
          'MOVE',       'NOTIFY',      'OPTIONS',
          'PATCH',      'POST',        'PRI',
          'PROPFIND',   'PROPPATCH',   'PURGE',
          'PUT',        'REBIND',      'REPORT',
          'SEARCH',     'SOURCE',      'SUBSCRIBE',
          'TRACE',      'UNBIND',      'UNLINK',
          'UNLOCK',     'UNSUBSCRIBE'
        ],
        STATUS_CODES: {
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '103': 'Early Hints',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '208': 'Already Reported',
          '226': 'IM Used',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Found',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '308': 'Permanent Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Timeout',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Payload Too Large',
          '414': 'URI Too Long',
          '415': 'Unsupported Media Type',
          '416': 'Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': "I'm a Teapot",
          '421': 'Misdirected Request',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Too Early',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Timeout',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '508': 'Loop Detected',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
        },
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  EventEmitter.call(this);\n' +
          '\n' +
          '  this.defaultPort = 80;\n' +
          "  this.protocol = 'http:';\n" +
          '\n' +
          '  this.options = { ...options };\n' +
          '\n' +
          "  // Don't confuse net and make it think that we're connecting to a pipe\n" +
          '  this.options.path = null;\n' +
          '  this.requests = {};\n' +
          '  this.sockets = {};\n' +
          '  this.freeSockets = {};\n' +
          '  this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;\n' +
          '  this.keepAlive = this.options.keepAlive || false;\n' +
          '  this.maxSockets = this.options.maxSockets || Agent.defaultMaxSockets;\n' +
          '  this.maxFreeSockets = this.options.maxFreeSockets || 256;\n' +
          "  this.scheduling = this.options.scheduling || 'fifo';\n" +
          '  this.maxTotalSockets = this.options.maxTotalSockets;\n' +
          '  this.totalSocketCount = 0;\n' +
          '\n' +
          "  validateOneOf(this.scheduling, 'scheduling', ['fifo', 'lifo'], true);\n" +
          '\n' +
          '  if (this.maxTotalSockets !== undefined) {\n' +
          "    validateNumber(this.maxTotalSockets, 'maxTotalSockets');\n" +
          '    if (this.maxTotalSockets <= 0 || NumberIsNaN(this.maxTotalSockets))\n' +
          "      throw new ERR_OUT_OF_RANGE('maxTotalSockets', '> 0',\n" +
          '                                 this.maxTotalSockets);\n' +
          '  } else {\n' +
          '    this.maxTotalSockets = Infinity;\n' +
          '  }\n' +
          '\n' +
          "  this.on('free', (socket, options) => {\n" +
          '    const name = this.getName(options);\n' +
          "    debug('agent.on(free)', name);\n" +
          '\n' +
          '    // TODO(ronag): socket.destroy(err) might have been called\n' +
          "    // before coming here and have an 'error' scheduled. In the\n" +
          "    // case of socket.destroy() below this 'error' has no handler\n" +
          '    // and could cause unhandled exception.\n' +
          '\n' +
          '    if (!socket.writable) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const requests = this.requests[name];\n' +
          '    if (requests && requests.length) {\n' +
          '      const req = requests.shift();\n' +
          '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
          '      if (reqAsyncRes) {\n' +
          '        // Run request within the original async context.\n' +
          '        reqAsyncRes.runInAsyncScope(() => {\n' +
          '          asyncResetHandle(socket);\n' +
          '          setRequestSocket(this, req, socket);\n' +
          '        });\n' +
          '        req[kRequestAsyncResource] = null;\n' +
          '      } else {\n' +
          '        setRequestSocket(this, req, socket);\n' +
          '      }\n' +
          '      if (requests.length === 0) {\n' +
          '        delete this.requests[name];\n' +
          '      }\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    // If there are no pending requests, then put it in\n' +
          "    // the freeSockets pool, but only if we're allowed to do so.\n" +
          '    const req = socket._httpMessage;\n' +
          '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const freeSockets = this.freeSockets[name] || [];\n' +
          '    const freeLen = freeSockets.length;\n' +
          '    let count = freeLen;\n' +
          '    if (this.sockets[name])\n' +
          '      count += this.sockets[name].length;\n' +
          '\n' +
          '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
          '        count > this.maxSockets ||\n' +
          '        freeLen >= this.maxFreeSockets ||\n' +
          '        !this.keepSocketAlive(socket)) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    this.freeSockets[name] = freeSockets;\n' +
          '    socket[async_id_symbol] = -1;\n' +
          '    socket._httpMessage = null;\n' +
          '    this.removeSocket(socket, options);\n' +
          '\n' +
          "    socket.once('error', freeSocketErrorListener);\n" +
          '    freeSockets.push(socket);\n' +
          '  });\n' +
          '\n' +
          "  // Don't emit keylog events unless there is a listener for them.\n" +
          "  this.on('newListener', maybeEnableKeylog);\n" +
          '}',
        ClientRequest: '[function] function ClientRequest(input, options, cb) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (typeof input === 'string') {\n" +
          '    const urlStr = input;\n' +
          '    try {\n' +
          '      input = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      input = url.parse(urlStr);\n' +
          '      if (!input.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the http module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (input && input[searchParamsSymbol] &&\n' +
          '             input[searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    input = urlToOptions(input);\n' +
          '  } else {\n' +
          '    cb = options;\n' +
          '    options = input;\n' +
          '    input = null;\n' +
          '  }\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    cb = options;\n' +
          '    options = input || {};\n' +
          '  } else {\n' +
          '    options = ObjectAssign(input || {}, options);\n' +
          '  }\n' +
          '\n' +
          '  let agent = options.agent;\n' +
          '  const defaultAgent = options._defaultAgent || Agent.globalAgent;\n' +
          '  if (agent === false) {\n' +
          '    agent = new defaultAgent.constructor();\n' +
          '  } else if (agent === null || agent === undefined) {\n' +
          "    if (typeof options.createConnection !== 'function') {\n" +
          '      agent = defaultAgent;\n' +
          '    }\n' +
          '    // Explicitly pass through this statement as agent will not be used\n' +
          '    // when createConnection is provided.\n' +
          "  } else if (typeof agent.addRequest !== 'function') {\n" +
          "    throw new ERR_INVALID_ARG_TYPE('options.agent',\n" +
          "                                   ['Agent-like Object', 'undefined', 'false'],\n" +
          '                                   agent);\n' +
          '  }\n' +
          '  this.agent = agent;\n' +
          '\n' +
          '  const protocol = options.protocol || defaultAgent.protocol;\n' +
          '  let expectedProtocol = defaultAgent.protocol;\n' +
          '  if (this.agent && this.agent.protocol)\n' +
          '    expectedProtocol = this.agent.protocol;\n' +
          '\n' +
          '  if (options.path) {\n' +
          '    const path = String(options.path);\n' +
          '    if (INVALID_PATH_REGEX.test(path))\n' +
          "      throw new ERR_UNESCAPED_CHARACTERS('Request path');\n" +
          '  }\n' +
          '\n' +
          '  if (protocol !== expectedProtocol) {\n' +
          '    throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\n' +
          '  }\n' +
          '\n' +
          '  const defaultPort = options.defaultPort ||\n' +
          '                    (this.agent && this.agent.defaultPort);\n' +
          '\n' +
          '  const port = options.port = options.port || defaultPort || 80;\n' +
          "  const host = options.host = validateHost(options.hostname, 'hostname') ||\n" +
          "                            validateHost(options.host, 'host') || 'localhost';\n" +
          '\n' +
          '  const setHost = (options.setHost === undefined || Boolean(options.setHost));\n' +
          '\n' +
          '  this.socketPath = options.socketPath;\n' +
          '\n' +
          '  if (options.timeout !== undefined)\n' +
          "    this.timeout = getTimerDuration(options.timeout, 'timeout');\n" +
          '\n' +
          '  let method = options.method;\n' +
          "  const methodIsString = (typeof method === 'string');\n" +
          '  if (method !== null && method !== undefined && !methodIsString) {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options.method', 'string', method);\n" +
          '  }\n' +
          '\n' +
          '  if (methodIsString && method) {\n' +
          '    if (!checkIsHttpToken(method)) {\n' +
          "      throw new ERR_INVALID_HTTP_TOKEN('Method', method);\n" +
          '    }\n' +
          '    method = this.method = method.toUpperCase();\n' +
          '  } else {\n' +
          "    method = this.method = 'GET';\n" +
          '  }\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined &&\n' +
          "      typeof insecureHTTPParser !== 'boolean') {\n" +
          '    throw new ERR_INVALID_ARG_TYPE(\n' +
          "      'options.insecureHTTPParser', 'boolean', insecureHTTPParser);\n" +
          '  }\n' +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          "  this.path = options.path || '/';\n" +
          '  if (cb) {\n' +
          "    this.once('response', cb);\n" +
          '  }\n' +
          '\n' +
          "  if (method === 'GET' ||\n" +
          "      method === 'HEAD' ||\n" +
          "      method === 'DELETE' ||\n" +
          "      method === 'OPTIONS' ||\n" +
          "      method === 'TRACE' ||\n" +
          "      method === 'CONNECT') {\n" +
          '    this.useChunkedEncodingByDefault = false;\n' +
          '  } else {\n' +
          '    this.useChunkedEncodingByDefault = true;\n' +
          '  }\n' +
          '\n' +
          '  this._ended = false;\n' +
          '  this.res = null;\n' +
          '  this.aborted = false;\n' +
          '  this.timeoutCb = null;\n' +
          '  this.upgradeOrConnect = false;\n' +
          '  this.parser = null;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.reusedSocket = false;\n' +
          '  this.host = host;\n' +
          '  this.protocol = protocol;\n' +
          '\n' +
          '  let called = false;\n' +
          '\n' +
          '  if (this.agent) {\n' +
          '    // If there is an agent we should default to Connection:keep-alive,\n' +
          '    // but only if the Agent will actually reuse the connection!\n' +
          "    // If it's not a keepAlive agent, and the maxSockets==Infinity, then\n" +
          "    // there's never a case where this socket will actually be reused\n" +
          '    if (!this.agent.keepAlive && !NumberIsFinite(this.agent.maxSockets)) {\n' +
          '      this._last = true;\n' +
          '      this.shouldKeepAlive = false;\n' +
          '    } else {\n' +
          '      this._last = false;\n' +
          '      this.shouldKeepAlive = true;\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  const headersArray = ArrayIsArray(options.headers);\n' +
          '  if (!headersArray) {\n' +
          '    if (options.headers) {\n' +
          '      const keys = ObjectKeys(options.headers);\n' +
          '      // Retain for(;;) loop for performance reasons\n' +
          '      // Refs: https://github.com/nodejs/node/pull/30958\n' +
          '      for (let i = 0; i < keys.length; i++) {\n' +
          '        const key = keys[i];\n' +
          '        this.setHeader(key, options.headers[key]);\n' +
          '      }\n' +
          '    }\n' +
          '\n' +
          "    if (host && !this.getHeader('host') && setHost) {\n" +
          '      let hostHeader = host;\n' +
          '\n' +
          '      // For the Host header, ensure that IPv6 addresses are enclosed\n' +
          '      // in square brackets, as defined by URI formatting\n' +
          '      // https://tools.ietf.org/html/rfc3986#section-3.2.2\n' +
          "      const posColon = hostHeader.indexOf(':');\n" +
          '      if (posColon !== -1 &&\n' +
          "          hostHeader.includes(':', posColon + 1) &&\n" +
          "          hostHeader.charCodeAt(0) !== 91/* '[' */) {\n" +
          '        hostHeader = `[${hostHeader}]`;\n' +
          '      }\n' +
          '\n' +
          '      if (port && +port !== defaultPort) {\n' +
          "        hostHeader += ':' + port;\n" +
          '      }\n' +
          "      this.setHeader('Host', hostHeader);\n" +
          '    }\n' +
          '\n' +
          "    if (options.auth && !this.getHeader('Authorization')) {\n" +
          "      this.setHeader('Authorization', 'Basic ' +\n" +
          "                     Buffer.from(options.auth).toString('base64'));\n" +
          '    }\n' +
          '\n' +
          "    if (this.getHeader('expect')) {\n" +
          '      if (this._header) {\n' +
          "        throw new ERR_HTTP_HEADERS_SENT('render');\n" +
          '      }\n' +
          '\n' +
          "      this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                        this[kOutHeaders]);\n' +
          '    }\n' +
          '  } else {\n' +
          "    this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                      options.headers);\n' +
          '  }\n' +
          '\n' +
          '  const oncreate = (err, socket) => {\n' +
          '    if (called)\n' +
          '      return;\n' +
          '    called = true;\n' +
          '    if (err) {\n' +
          "      process.nextTick(() => this.emit('error', err));\n" +
          '      return;\n' +
          '    }\n' +
          '    this.onSocket(socket);\n' +
          '    this._deferToConnect(null, null, () => this._flush());\n' +
          '  };\n' +
          '\n' +
          '  // initiate connection\n' +
          '  if (this.agent) {\n' +
          '    this.agent.addRequest(this, options);\n' +
          '  } else {\n' +
          '    // No agent, default to Connection:close.\n' +
          '    this._last = true;\n' +
          '    this.shouldKeepAlive = false;\n' +
          "    if (typeof options.createConnection === 'function') {\n" +
          '      const newSocket = options.createConnection(options, oncreate);\n' +
          '      if (newSocket && !called) {\n' +
          '        called = true;\n' +
          '        this.onSocket(newSocket);\n' +
          '      } else {\n' +
          '        return;\n' +
          '      }\n' +
          '    } else {\n' +
          "      debug('CLIENT use net.createConnection', options);\n" +
          '      this.onSocket(net.createConnection(options));\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  this._deferToConnect(null, null, () => this._flush());\n' +
          '}',
        IncomingMessage: '[function] function IncomingMessage(socket) {\n' +
          '  let streamOptions;\n' +
          '\n' +
          '  if (socket) {\n' +
          '    streamOptions = {\n' +
          '      highWaterMark: socket.readableHighWaterMark\n' +
          '    };\n' +
          '  }\n' +
          '\n' +
          '  Stream.Readable.call(this, { autoDestroy: false, ...streamOptions });\n' +
          '\n' +
          '  this._readableState.readingMore = true;\n' +
          '\n' +
          '  this.socket = socket;\n' +
          '\n' +
          '  this.httpVersionMajor = null;\n' +
          '  this.httpVersionMinor = null;\n' +
          '  this.httpVersion = null;\n' +
          '  this.complete = false;\n' +
          '  this.headers = {};\n' +
          '  this.rawHeaders = [];\n' +
          '  this.trailers = {};\n' +
          '  this.rawTrailers = [];\n' +
          '\n' +
          '  this.aborted = false;\n' +
          '\n' +
          '  this.upgrade = null;\n' +
          '\n' +
          '  // request (server) only\n' +
          "  this.url = '';\n" +
          '  this.method = null;\n' +
          '\n' +
          '  // response (client) only\n' +
          '  this.statusCode = null;\n' +
          '  this.statusMessage = null;\n' +
          '  this.client = socket;\n' +
          '\n' +
          '  this._consuming = false;\n' +
          '  // Flag for when we decide that this message cannot possibly be\n' +
          "  // read by the user, so there's no point continuing to handle it.\n" +
          '  this._dumped = false;\n' +
          '}',
        OutgoingMessage: '[function] function OutgoingMessage() {\n' +
          '  Stream.call(this);\n' +
          '\n' +
          '  // Queue that holds all currently pending data, until the response will be\n' +
          '  // assigned to the socket (until it will its turn in the HTTP pipeline).\n' +
          '  this.outputData = [];\n' +
          '\n' +
          '  // `outputSize` is an approximate measure of how much data is queued on this\n' +
          '  // response. `_onPendingData` will be invoked to update similar global\n' +
          '  // per-connection counter. That counter will be used to pause/unpause the\n' +
          '  // TCP socket and HTTP Parser and thus handle the backpressure.\n' +
          '  this.outputSize = 0;\n' +
          '\n' +
          '  this.writable = true;\n' +
          '  this.destroyed = false;\n' +
          '\n' +
          '  this._last = false;\n' +
          '  this.chunkedEncoding = false;\n' +
          '  this.shouldKeepAlive = true;\n' +
          '  this._defaultKeepAlive = true;\n' +
          '  this.useChunkedEncodingByDefault = true;\n' +
          '  this.sendDate = false;\n' +
          '  this._removedConnection = false;\n' +
          '  this._removedContLen = false;\n' +
          '  this._removedTE = false;\n' +
          '\n' +
          '  this._contentLength = null;\n' +
          '  this._hasBody = true;\n' +
          "  this._trailer = '';\n" +
          '  this[kNeedDrain] = false;\n' +
          '\n' +
          '  this.finished = false;\n' +
          '  this._headerSent = false;\n' +
          '  this[kCorked] = 0;\n' +
          '\n' +
          '  this.socket = null;\n' +
          '  this._header = null;\n' +
          '  this[kOutHeaders] = null;\n' +
          '\n' +
          '  this._keepAliveTimeout = 0;\n' +
          '\n' +
          '  this._onPendingData = noopPendingOutput;\n' +
          '}',
        Server: '[function] function Server(options, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(options, requestListener);\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    requestListener = options;\n' +
          '    options = {};\n' +
          "  } else if (options == null || typeof options === 'object') {\n" +
          '    options = { ...options };\n' +
          '  } else {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options', 'object', options);\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = options.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined)\n' +
          "    validateBoolean(insecureHTTPParser, 'options.insecureHTTPParser');\n" +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          '  net.Server.call(this, { allowHalfOpen: true });\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.on('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          '  // Similar option to this. Too lazy to write my own docs.\n' +
          '  // http://www.squid-cache.org/Doc/config/half_closed_clients/\n' +
          '  // https://wiki.squid-cache.org/SquidFaq/InnerWorkings#What_is_a_half-closed_filedescriptor.3F\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          "  this.on('connection', connectionListener);\n" +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        ServerResponse: '[function] function ServerResponse(req) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (req.method === 'HEAD') this._hasBody = false;\n" +
          '\n' +
          '  this.sendDate = true;\n' +
          '  this._sent100 = false;\n' +
          '  this._expect_continue = false;\n' +
          '\n' +
          '  if (req.httpVersionMajor < 1 || req.httpVersionMinor < 1) {\n' +
          '    this.useChunkedEncodingByDefault = chunkExpression.test(req.headers.te);\n' +
          '    this.shouldKeepAlive = false;\n' +
          '  }\n' +
          '\n' +
          '  const httpObserverCount = observerCounts[NODE_PERFORMANCE_ENTRY_TYPE_HTTP];\n' +
          '  if (httpObserverCount > 0) {\n' +
          '    this[kServerResponseStatistics] = {\n' +
          '      startTime: process.hrtime()\n' +
          '    };\n' +
          '  }\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        validateHeaderName: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        validateHeaderValue: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        get: '[function] function get(url, options, cb) {\n' +
          '  const req = request(url, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(url, options, cb) {\n' +
          '  return new ClientRequest(url, options, cb);\n' +
          '}',
        maxHeaderSize: 16384,
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80::\\\\.\\pipe\\dockerWebApiServer': [Array],
            'localhost:80::\\\\.\\pipe\\dockerBackendApiServer': [Array]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 10
        }
      },
      'https:': {
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  HttpAgent.call(this, options);\n' +
          '  this.defaultPort = 443;\n' +
          "  this.protocol = 'https:';\n" +
          '  this.maxCachedSessions = this.options.maxCachedSessions;\n' +
          '  if (this.maxCachedSessions === undefined)\n' +
          '    this.maxCachedSessions = 100;\n' +
          '\n' +
          '  this._sessionCache = {\n' +
          '    map: {},\n' +
          '    list: []\n' +
          '  };\n' +
          '}',
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 443,
          protocol: 'https:',
          options: { path: null },
          requests: {},
          sockets: {},
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] }
        },
        Server: '[function] function Server(opts, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(opts, requestListener);\n' +
          '\n' +
          "  if (typeof opts === 'function') {\n" +
          '    requestListener = opts;\n' +
          '    opts = undefined;\n' +
          '  }\n' +
          '  opts = { ...opts };\n' +
          '\n' +
          '  if (!opts.ALPNProtocols) {\n' +
          '    // http/1.0 is not defined as Protocol IDs in IANA\n' +
          '    // https://www.iana.org/assignments/tls-extensiontype-values\n' +
          '    //       /tls-extensiontype-values.xhtml#alpn-protocol-ids\n' +
          "    opts.ALPNProtocols = ['http/1.1'];\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = opts.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = opts.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  tls.Server.call(this, opts, _connectionListener);\n' +
          '\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.addListener('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          "  this.addListener('tlsClientError', function addListener(err, conn) {\n" +
          "    if (!this.emit('clientError', err, conn))\n" +
          '      conn.destroy(err);\n' +
          '  });\n' +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        get: '[function] function get(input, options, cb) {\n' +
          '  const req = request(input, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(...args) {\n' +
          '  let options = {};\n' +
          '\n' +
          "  if (typeof args[0] === 'string') {\n" +
          '    const urlStr = args.shift();\n' +
          '    try {\n' +
          '      options = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      options = url.parse(urlStr);\n' +
          '      if (!options.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the https module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (args[0] && args[0][searchParamsSymbol] &&\n' +
          '             args[0][searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    options = urlToOptions(args.shift());\n' +
          '  }\n' +
          '\n' +
          "  if (args[0] && typeof args[0] !== 'function') {\n" +
          '    ObjectAssign(options, args.shift());\n' +
          '  }\n' +
          '\n' +
          '  options._defaultAgent = module.exports.globalAgent;\n' +
          '  args.unshift(options);\n' +
          '\n' +
          '  return new ClientRequest(...args);\n' +
          '}'
      }
    },
    pathname: '/features'
  },
  _ended: true,
  _ending: true,
  _redirectCount: 0,
  _redirects: [],
  _requestBodyLength: 0,
  _requestBodyBuffers: [],
  _onNativeResponse: '[function] function (response) {\n    self._processResponse(response);\n  }',
  _currentUrl: 'http:/features'
}
[2021-05-13 17:53:35.811] [info]  Response error for /system/editor: connect ENOENT \\.\pipe\dockerBackendApiServer
[2021-05-13 17:53:36.085] [error] !!! get /system/editor
[2021-05-13 17:53:36.290] [error] Server did not respond to request
[2021-05-13 17:53:36.442] [error] {
  _writableState: {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: false,
    ended: false,
    finished: false,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: true,
    bufferProcessing: false,
    onwrite: '[function] function () { [native code] }',
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    buffered: [],
    bufferedIndex: 0,
    allBuffers: true,
    allNoop: true,
    pendingcb: 0,
    prefinished: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    errored: null,
    closed: false
  },
  _events: {
    response: '[function] function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '        /*eslint default-case:0*/\n' +
      "        case 'gzip':\n" +
      "        case 'compress':\n" +
      "        case 'deflate':\n" +
      '        // add the unzipper to the body stream processing pipeline\n' +
      '          stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '          // remove the content-encoding in order to not confuse downstream operations\n' +
      "          delete res.headers['content-encoding'];\n" +
      '          break;\n' +
      '        }\n' +
      '      }\n' +
      '\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      '\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {\n' +
      '            stream.destroy();\n' +
      "            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n" +
      '              config, null, lastRequest));\n' +
      '          }\n' +
      '        });\n' +
      '\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(enhanceError(err, config, null, lastRequest));\n' +
      '        });\n' +
      '\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          var responseData = Buffer.concat(responseBuffer);\n' +
      "          if (config.responseType !== 'arraybuffer') {\n" +
      '            responseData = responseData.toString(config.responseEncoding);\n' +
      "            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '              responseData = utils.stripBOM(responseData);\n' +
      '            }\n' +
      '          }\n' +
      '\n' +
      '          response.data = responseData;\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    }',
    error: '[function] function handleRequestError(err) {\n' +
      "      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n" +
      '      reject(enhanceError(err, config, null, req));\n' +
      '    }'
  },
  _eventsCount: 2,
  _options: {
    maxRedirects: 21,
    maxBodyLength: 10485760,
    protocol: 'http:',
    path: '/system/editor',
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.21.1'
    },
    agents: {},
    socketPath: '\\\\.\\pipe\\dockerBackendApiServer',
    nativeProtocols: {
      'http:': {
        _connectionListener: '[function] function connectionListener(socket) {\n' +
          '  defaultTriggerAsyncIdScope(\n' +
          '    getOrSetAsyncId(socket), connectionListenerInternal, this, socket\n' +
          '  );\n' +
          '}',
        METHODS: [
          'ACL',        'BIND',        'CHECKOUT',
          'CONNECT',    'COPY',        'DELETE',
          'GET',        'HEAD',        'LINK',
          'LOCK',       'M-SEARCH',    'MERGE',
          'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
          'MOVE',       'NOTIFY',      'OPTIONS',
          'PATCH',      'POST',        'PRI',
          'PROPFIND',   'PROPPATCH',   'PURGE',
          'PUT',        'REBIND',      'REPORT',
          'SEARCH',     'SOURCE',      'SUBSCRIBE',
          'TRACE',      'UNBIND',      'UNLINK',
          'UNLOCK',     'UNSUBSCRIBE'
        ],
        STATUS_CODES: {
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '103': 'Early Hints',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '208': 'Already Reported',
          '226': 'IM Used',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Found',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '308': 'Permanent Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Timeout',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Payload Too Large',
          '414': 'URI Too Long',
          '415': 'Unsupported Media Type',
          '416': 'Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': "I'm a Teapot",
          '421': 'Misdirected Request',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Too Early',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Timeout',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '508': 'Loop Detected',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
        },
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  EventEmitter.call(this);\n' +
          '\n' +
          '  this.defaultPort = 80;\n' +
          "  this.protocol = 'http:';\n" +
          '\n' +
          '  this.options = { ...options };\n' +
          '\n' +
          "  // Don't confuse net and make it think that we're connecting to a pipe\n" +
          '  this.options.path = null;\n' +
          '  this.requests = {};\n' +
          '  this.sockets = {};\n' +
          '  this.freeSockets = {};\n' +
          '  this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;\n' +
          '  this.keepAlive = this.options.keepAlive || false;\n' +
          '  this.maxSockets = this.options.maxSockets || Agent.defaultMaxSockets;\n' +
          '  this.maxFreeSockets = this.options.maxFreeSockets || 256;\n' +
          "  this.scheduling = this.options.scheduling || 'fifo';\n" +
          '  this.maxTotalSockets = this.options.maxTotalSockets;\n' +
          '  this.totalSocketCount = 0;\n' +
          '\n' +
          "  validateOneOf(this.scheduling, 'scheduling', ['fifo', 'lifo'], true);\n" +
          '\n' +
          '  if (this.maxTotalSockets !== undefined) {\n' +
          "    validateNumber(this.maxTotalSockets, 'maxTotalSockets');\n" +
          '    if (this.maxTotalSockets <= 0 || NumberIsNaN(this.maxTotalSockets))\n' +
          "      throw new ERR_OUT_OF_RANGE('maxTotalSockets', '> 0',\n" +
          '                                 this.maxTotalSockets);\n' +
          '  } else {\n' +
          '    this.maxTotalSockets = Infinity;\n' +
          '  }\n' +
          '\n' +
          "  this.on('free', (socket, options) => {\n" +
          '    const name = this.getName(options);\n' +
          "    debug('agent.on(free)', name);\n" +
          '\n' +
          '    // TODO(ronag): socket.destroy(err) might have been called\n' +
          "    // before coming here and have an 'error' scheduled. In the\n" +
          "    // case of socket.destroy() below this 'error' has no handler\n" +
          '    // and could cause unhandled exception.\n' +
          '\n' +
          '    if (!socket.writable) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const requests = this.requests[name];\n' +
          '    if (requests && requests.length) {\n' +
          '      const req = requests.shift();\n' +
          '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
          '      if (reqAsyncRes) {\n' +
          '        // Run request within the original async context.\n' +
          '        reqAsyncRes.runInAsyncScope(() => {\n' +
          '          asyncResetHandle(socket);\n' +
          '          setRequestSocket(this, req, socket);\n' +
          '        });\n' +
          '        req[kRequestAsyncResource] = null;\n' +
          '      } else {\n' +
          '        setRequestSocket(this, req, socket);\n' +
          '      }\n' +
          '      if (requests.length === 0) {\n' +
          '        delete this.requests[name];\n' +
          '      }\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    // If there are no pending requests, then put it in\n' +
          "    // the freeSockets pool, but only if we're allowed to do so.\n" +
          '    const req = socket._httpMessage;\n' +
          '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const freeSockets = this.freeSockets[name] || [];\n' +
          '    const freeLen = freeSockets.length;\n' +
          '    let count = freeLen;\n' +
          '    if (this.sockets[name])\n' +
          '      count += this.sockets[name].length;\n' +
          '\n' +
          '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
          '        count > this.maxSockets ||\n' +
          '        freeLen >= this.maxFreeSockets ||\n' +
          '        !this.keepSocketAlive(socket)) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    this.freeSockets[name] = freeSockets;\n' +
          '    socket[async_id_symbol] = -1;\n' +
          '    socket._httpMessage = null;\n' +
          '    this.removeSocket(socket, options);\n' +
          '\n' +
          "    socket.once('error', freeSocketErrorListener);\n" +
          '    freeSockets.push(socket);\n' +
          '  });\n' +
          '\n' +
          "  // Don't emit keylog events unless there is a listener for them.\n" +
          "  this.on('newListener', maybeEnableKeylog);\n" +
          '}',
        ClientRequest: '[function] function ClientRequest(input, options, cb) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (typeof input === 'string') {\n" +
          '    const urlStr = input;\n' +
          '    try {\n' +
          '      input = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      input = url.parse(urlStr);\n' +
          '      if (!input.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the http module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (input && input[searchParamsSymbol] &&\n' +
          '             input[searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    input = urlToOptions(input);\n' +
          '  } else {\n' +
          '    cb = options;\n' +
          '    options = input;\n' +
          '    input = null;\n' +
          '  }\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    cb = options;\n' +
          '    options = input || {};\n' +
          '  } else {\n' +
          '    options = ObjectAssign(input || {}, options);\n' +
          '  }\n' +
          '\n' +
          '  let agent = options.agent;\n' +
          '  const defaultAgent = options._defaultAgent || Agent.globalAgent;\n' +
          '  if (agent === false) {\n' +
          '    agent = new defaultAgent.constructor();\n' +
          '  } else if (agent === null || agent === undefined) {\n' +
          "    if (typeof options.createConnection !== 'function') {\n" +
          '      agent = defaultAgent;\n' +
          '    }\n' +
          '    // Explicitly pass through this statement as agent will not be used\n' +
          '    // when createConnection is provided.\n' +
          "  } else if (typeof agent.addRequest !== 'function') {\n" +
          "    throw new ERR_INVALID_ARG_TYPE('options.agent',\n" +
          "                                   ['Agent-like Object', 'undefined', 'false'],\n" +
          '                                   agent);\n' +
          '  }\n' +
          '  this.agent = agent;\n' +
          '\n' +
          '  const protocol = options.protocol || defaultAgent.protocol;\n' +
          '  let expectedProtocol = defaultAgent.protocol;\n' +
          '  if (this.agent && this.agent.protocol)\n' +
          '    expectedProtocol = this.agent.protocol;\n' +
          '\n' +
          '  if (options.path) {\n' +
          '    const path = String(options.path);\n' +
          '    if (INVALID_PATH_REGEX.test(path))\n' +
          "      throw new ERR_UNESCAPED_CHARACTERS('Request path');\n" +
          '  }\n' +
          '\n' +
          '  if (protocol !== expectedProtocol) {\n' +
          '    throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\n' +
          '  }\n' +
          '\n' +
          '  const defaultPort = options.defaultPort ||\n' +
          '                    (this.agent && this.agent.defaultPort);\n' +
          '\n' +
          '  const port = options.port = options.port || defaultPort || 80;\n' +
          "  const host = options.host = validateHost(options.hostname, 'hostname') ||\n" +
          "                            validateHost(options.host, 'host') || 'localhost';\n" +
          '\n' +
          '  const setHost = (options.setHost === undefined || Boolean(options.setHost));\n' +
          '\n' +
          '  this.socketPath = options.socketPath;\n' +
          '\n' +
          '  if (options.timeout !== undefined)\n' +
          "    this.timeout = getTimerDuration(options.timeout, 'timeout');\n" +
          '\n' +
          '  let method = options.method;\n' +
          "  const methodIsString = (typeof method === 'string');\n" +
          '  if (method !== null && method !== undefined && !methodIsString) {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options.method', 'string', method);\n" +
          '  }\n' +
          '\n' +
          '  if (methodIsString && method) {\n' +
          '    if (!checkIsHttpToken(method)) {\n' +
          "      throw new ERR_INVALID_HTTP_TOKEN('Method', method);\n" +
          '    }\n' +
          '    method = this.method = method.toUpperCase();\n' +
          '  } else {\n' +
          "    method = this.method = 'GET';\n" +
          '  }\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined &&\n' +
          "      typeof insecureHTTPParser !== 'boolean') {\n" +
          '    throw new ERR_INVALID_ARG_TYPE(\n' +
          "      'options.insecureHTTPParser', 'boolean', insecureHTTPParser);\n" +
          '  }\n' +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          "  this.path = options.path || '/';\n" +
          '  if (cb) {\n' +
          "    this.once('response', cb);\n" +
          '  }\n' +
          '\n' +
          "  if (method === 'GET' ||\n" +
          "      method === 'HEAD' ||\n" +
          "      method === 'DELETE' ||\n" +
          "      method === 'OPTIONS' ||\n" +
          "      method === 'TRACE' ||\n" +
          "      method === 'CONNECT') {\n" +
          '    this.useChunkedEncodingByDefault = false;\n' +
          '  } else {\n' +
          '    this.useChunkedEncodingByDefault = true;\n' +
          '  }\n' +
          '\n' +
          '  this._ended = false;\n' +
          '  this.res = null;\n' +
          '  this.aborted = false;\n' +
          '  this.timeoutCb = null;\n' +
          '  this.upgradeOrConnect = false;\n' +
          '  this.parser = null;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.reusedSocket = false;\n' +
          '  this.host = host;\n' +
          '  this.protocol = protocol;\n' +
          '\n' +
          '  let called = false;\n' +
          '\n' +
          '  if (this.agent) {\n' +
          '    // If there is an agent we should default to Connection:keep-alive,\n' +
          '    // but only if the Agent will actually reuse the connection!\n' +
          "    // If it's not a keepAlive agent, and the maxSockets==Infinity, then\n" +
          "    // there's never a case where this socket will actually be reused\n" +
          '    if (!this.agent.keepAlive && !NumberIsFinite(this.agent.maxSockets)) {\n' +
          '      this._last = true;\n' +
          '      this.shouldKeepAlive = false;\n' +
          '    } else {\n' +
          '      this._last = false;\n' +
          '      this.shouldKeepAlive = true;\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  const headersArray = ArrayIsArray(options.headers);\n' +
          '  if (!headersArray) {\n' +
          '    if (options.headers) {\n' +
          '      const keys = ObjectKeys(options.headers);\n' +
          '      // Retain for(;;) loop for performance reasons\n' +
          '      // Refs: https://github.com/nodejs/node/pull/30958\n' +
          '      for (let i = 0; i < keys.length; i++) {\n' +
          '        const key = keys[i];\n' +
          '        this.setHeader(key, options.headers[key]);\n' +
          '      }\n' +
          '    }\n' +
          '\n' +
          "    if (host && !this.getHeader('host') && setHost) {\n" +
          '      let hostHeader = host;\n' +
          '\n' +
          '      // For the Host header, ensure that IPv6 addresses are enclosed\n' +
          '      // in square brackets, as defined by URI formatting\n' +
          '      // https://tools.ietf.org/html/rfc3986#section-3.2.2\n' +
          "      const posColon = hostHeader.indexOf(':');\n" +
          '      if (posColon !== -1 &&\n' +
          "          hostHeader.includes(':', posColon + 1) &&\n" +
          "          hostHeader.charCodeAt(0) !== 91/* '[' */) {\n" +
          '        hostHeader = `[${hostHeader}]`;\n' +
          '      }\n' +
          '\n' +
          '      if (port && +port !== defaultPort) {\n' +
          "        hostHeader += ':' + port;\n" +
          '      }\n' +
          "      this.setHeader('Host', hostHeader);\n" +
          '    }\n' +
          '\n' +
          "    if (options.auth && !this.getHeader('Authorization')) {\n" +
          "      this.setHeader('Authorization', 'Basic ' +\n" +
          "                     Buffer.from(options.auth).toString('base64'));\n" +
          '    }\n' +
          '\n' +
          "    if (this.getHeader('expect')) {\n" +
          '      if (this._header) {\n' +
          "        throw new ERR_HTTP_HEADERS_SENT('render');\n" +
          '      }\n' +
          '\n' +
          "      this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                        this[kOutHeaders]);\n' +
          '    }\n' +
          '  } else {\n' +
          "    this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                      options.headers);\n' +
          '  }\n' +
          '\n' +
          '  const oncreate = (err, socket) => {\n' +
          '    if (called)\n' +
          '      return;\n' +
          '    called = true;\n' +
          '    if (err) {\n' +
          "      process.nextTick(() => this.emit('error', err));\n" +
          '      return;\n' +
          '    }\n' +
          '    this.onSocket(socket);\n' +
          '    this._deferToConnect(null, null, () => this._flush());\n' +
          '  };\n' +
          '\n' +
          '  // initiate connection\n' +
          '  if (this.agent) {\n' +
          '    this.agent.addRequest(this, options);\n' +
          '  } else {\n' +
          '    // No agent, default to Connection:close.\n' +
          '    this._last = true;\n' +
          '    this.shouldKeepAlive = false;\n' +
          "    if (typeof options.createConnection === 'function') {\n" +
          '      const newSocket = options.createConnection(options, oncreate);\n' +
          '      if (newSocket && !called) {\n' +
          '        called = true;\n' +
          '        this.onSocket(newSocket);\n' +
          '      } else {\n' +
          '        return;\n' +
          '      }\n' +
          '    } else {\n' +
          "      debug('CLIENT use net.createConnection', options);\n" +
          '      this.onSocket(net.createConnection(options));\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  this._deferToConnect(null, null, () => this._flush());\n' +
          '}',
        IncomingMessage: '[function] function IncomingMessage(socket) {\n' +
          '  let streamOptions;\n' +
          '\n' +
          '  if (socket) {\n' +
          '    streamOptions = {\n' +
          '      highWaterMark: socket.readableHighWaterMark\n' +
          '    };\n' +
          '  }\n' +
          '\n' +
          '  Stream.Readable.call(this, { autoDestroy: false, ...streamOptions });\n' +
          '\n' +
          '  this._readableState.readingMore = true;\n' +
          '\n' +
          '  this.socket = socket;\n' +
          '\n' +
          '  this.httpVersionMajor = null;\n' +
          '  this.httpVersionMinor = null;\n' +
          '  this.httpVersion = null;\n' +
          '  this.complete = false;\n' +
          '  this.headers = {};\n' +
          '  this.rawHeaders = [];\n' +
          '  this.trailers = {};\n' +
          '  this.rawTrailers = [];\n' +
          '\n' +
          '  this.aborted = false;\n' +
          '\n' +
          '  this.upgrade = null;\n' +
          '\n' +
          '  // request (server) only\n' +
          "  this.url = '';\n" +
          '  this.method = null;\n' +
          '\n' +
          '  // response (client) only\n' +
          '  this.statusCode = null;\n' +
          '  this.statusMessage = null;\n' +
          '  this.client = socket;\n' +
          '\n' +
          '  this._consuming = false;\n' +
          '  // Flag for when we decide that this message cannot possibly be\n' +
          "  // read by the user, so there's no point continuing to handle it.\n" +
          '  this._dumped = false;\n' +
          '}',
        OutgoingMessage: '[function] function OutgoingMessage() {\n' +
          '  Stream.call(this);\n' +
          '\n' +
          '  // Queue that holds all currently pending data, until the response will be\n' +
          '  // assigned to the socket (until it will its turn in the HTTP pipeline).\n' +
          '  this.outputData = [];\n' +
          '\n' +
          '  // `outputSize` is an approximate measure of how much data is queued on this\n' +
          '  // response. `_onPendingData` will be invoked to update similar global\n' +
          '  // per-connection counter. That counter will be used to pause/unpause the\n' +
          '  // TCP socket and HTTP Parser and thus handle the backpressure.\n' +
          '  this.outputSize = 0;\n' +
          '\n' +
          '  this.writable = true;\n' +
          '  this.destroyed = false;\n' +
          '\n' +
          '  this._last = false;\n' +
          '  this.chunkedEncoding = false;\n' +
          '  this.shouldKeepAlive = true;\n' +
          '  this._defaultKeepAlive = true;\n' +
          '  this.useChunkedEncodingByDefault = true;\n' +
          '  this.sendDate = false;\n' +
          '  this._removedConnection = false;\n' +
          '  this._removedContLen = false;\n' +
          '  this._removedTE = false;\n' +
          '\n' +
          '  this._contentLength = null;\n' +
          '  this._hasBody = true;\n' +
          "  this._trailer = '';\n" +
          '  this[kNeedDrain] = false;\n' +
          '\n' +
          '  this.finished = false;\n' +
          '  this._headerSent = false;\n' +
          '  this[kCorked] = 0;\n' +
          '\n' +
          '  this.socket = null;\n' +
          '  this._header = null;\n' +
          '  this[kOutHeaders] = null;\n' +
          '\n' +
          '  this._keepAliveTimeout = 0;\n' +
          '\n' +
          '  this._onPendingData = noopPendingOutput;\n' +
          '}',
        Server: '[function] function Server(options, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(options, requestListener);\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    requestListener = options;\n' +
          '    options = {};\n' +
          "  } else if (options == null || typeof options === 'object') {\n" +
          '    options = { ...options };\n' +
          '  } else {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options', 'object', options);\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = options.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined)\n' +
          "    validateBoolean(insecureHTTPParser, 'options.insecureHTTPParser');\n" +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          '  net.Server.call(this, { allowHalfOpen: true });\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.on('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          '  // Similar option to this. Too lazy to write my own docs.\n' +
          '  // http://www.squid-cache.org/Doc/config/half_closed_clients/\n' +
          '  // https://wiki.squid-cache.org/SquidFaq/InnerWorkings#What_is_a_half-closed_filedescriptor.3F\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          "  this.on('connection', connectionListener);\n" +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        ServerResponse: '[function] function ServerResponse(req) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (req.method === 'HEAD') this._hasBody = false;\n" +
          '\n' +
          '  this.sendDate = true;\n' +
          '  this._sent100 = false;\n' +
          '  this._expect_continue = false;\n' +
          '\n' +
          '  if (req.httpVersionMajor < 1 || req.httpVersionMinor < 1) {\n' +
          '    this.useChunkedEncodingByDefault = chunkExpression.test(req.headers.te);\n' +
          '    this.shouldKeepAlive = false;\n' +
          '  }\n' +
          '\n' +
          '  const httpObserverCount = observerCounts[NODE_PERFORMANCE_ENTRY_TYPE_HTTP];\n' +
          '  if (httpObserverCount > 0) {\n' +
          '    this[kServerResponseStatistics] = {\n' +
          '      startTime: process.hrtime()\n' +
          '    };\n' +
          '  }\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        validateHeaderName: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        validateHeaderValue: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        get: '[function] function get(url, options, cb) {\n' +
          '  const req = request(url, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(url, options, cb) {\n' +
          '  return new ClientRequest(url, options, cb);\n' +
          '}',
        maxHeaderSize: 16384,
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80::\\\\.\\pipe\\dockerWebApiServer': [Array],
            'localhost:80::\\\\.\\pipe\\dockerBackendApiServer': [Array]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 10
        }
      },
      'https:': {
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  HttpAgent.call(this, options);\n' +
          '  this.defaultPort = 443;\n' +
          "  this.protocol = 'https:';\n" +
          '  this.maxCachedSessions = this.options.maxCachedSessions;\n' +
          '  if (this.maxCachedSessions === undefined)\n' +
          '    this.maxCachedSessions = 100;\n' +
          '\n' +
          '  this._sessionCache = {\n' +
          '    map: {},\n' +
          '    list: []\n' +
          '  };\n' +
          '}',
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 443,
          protocol: 'https:',
          options: { path: null },
          requests: {},
          sockets: {},
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] }
        },
        Server: '[function] function Server(opts, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(opts, requestListener);\n' +
          '\n' +
          "  if (typeof opts === 'function') {\n" +
          '    requestListener = opts;\n' +
          '    opts = undefined;\n' +
          '  }\n' +
          '  opts = { ...opts };\n' +
          '\n' +
          '  if (!opts.ALPNProtocols) {\n' +
          '    // http/1.0 is not defined as Protocol IDs in IANA\n' +
          '    // https://www.iana.org/assignments/tls-extensiontype-values\n' +
          '    //       /tls-extensiontype-values.xhtml#alpn-protocol-ids\n' +
          "    opts.ALPNProtocols = ['http/1.1'];\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = opts.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = opts.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  tls.Server.call(this, opts, _connectionListener);\n' +
          '\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.addListener('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          "  this.addListener('tlsClientError', function addListener(err, conn) {\n" +
          "    if (!this.emit('clientError', err, conn))\n" +
          '      conn.destroy(err);\n' +
          '  });\n' +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        get: '[function] function get(input, options, cb) {\n' +
          '  const req = request(input, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(...args) {\n' +
          '  let options = {};\n' +
          '\n' +
          "  if (typeof args[0] === 'string') {\n" +
          '    const urlStr = args.shift();\n' +
          '    try {\n' +
          '      options = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      options = url.parse(urlStr);\n' +
          '      if (!options.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the https module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (args[0] && args[0][searchParamsSymbol] &&\n' +
          '             args[0][searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    options = urlToOptions(args.shift());\n' +
          '  }\n' +
          '\n' +
          "  if (args[0] && typeof args[0] !== 'function') {\n" +
          '    ObjectAssign(options, args.shift());\n' +
          '  }\n' +
          '\n' +
          '  options._defaultAgent = module.exports.globalAgent;\n' +
          '  args.unshift(options);\n' +
          '\n' +
          '  return new ClientRequest(...args);\n' +
          '}'
      }
    },
    pathname: '/system/editor'
  },
  _ended: true,
  _ending: true,
  _redirectCount: 0,
  _redirects: [],
  _requestBodyLength: 0,
  _requestBodyBuffers: [],
  _onNativeResponse: '[function] function (response) {\n    self._processResponse(response);\n  }',
  _currentUrl: 'http:/system/editor'
}
[2021-05-13 17:53:42.408] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-13 17:53:46.483] [verbose] POST /registry/login data = { username: '', password: '' }
[2021-05-13 17:53:50.878] [info]  Response success for /usage
[2021-05-13 17:53:50.991] [info]  Response for POST /usage
[2021-05-13 17:53:51.102] [verbose] 
[2021-05-13 17:53:51.210] [info]  Response success for /usage
[2021-05-13 17:53:51.304] [info]  Response for POST /usage
[2021-05-13 17:53:51.404] [verbose] 
[2021-05-13 17:53:54.215] [info]  Response success for /kubernetes
[2021-05-13 17:53:54.355] [info]  Response for GET /kubernetes
[2021-05-13 17:53:54.491] [verbose] { state: 'stopped', enabled: true }
[2021-05-13 17:53:54.609] [info]  Response success for /docker
[2021-05-13 17:53:54.614] [info]  Response for GET /docker
[2021-05-13 17:53:54.732] [verbose] { state: 'stopped', mode: 'windows' }
[2021-05-13 17:53:54.857] [info]  Response success for /update
[2021-05-13 17:53:54.978] [info]  Response for GET /update
[2021-05-13 17:53:55.291] [verbose] { updateAvailableTime: 0 }
[2021-05-13 17:53:55.521] [info]  Response success for /registry/user
[2021-05-13 17:53:55.777] [info]  Response for GET /registry/user
[2021-05-13 17:53:56.003] [verbose] { username: 'neuromancer0001' }
[2021-05-13 17:53:56.155] [info]  Response success for /settings
[2021-05-13 17:53:56.355] [info]  Response for GET /settings
[2021-05-13 17:53:56.550] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 17:53:56.743] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-13 17:53:56.926] [info]  ping received
[2021-05-13 17:53:57.149] [verbose] GET /features params = null
[2021-05-13 17:53:57.350] [info]  Response success for /registry/login
[2021-05-13 17:53:57.518] [info]  Response for POST /registry/login
[2021-05-13 17:53:57.686] [verbose] 
[2021-05-13 17:53:57.869] [info]  Response error for /features: connect ENOENT \\.\pipe\dockerBackendApiServer
[2021-05-13 17:53:58.037] [error] !!! get /features
[2021-05-13 17:53:58.213] [error] Server did not respond to request
[2021-05-13 17:53:58.390] [error] {
  _writableState: {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: false,
    ended: false,
    finished: false,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: true,
    bufferProcessing: false,
    onwrite: '[function] function () { [native code] }',
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    buffered: [],
    bufferedIndex: 0,
    allBuffers: true,
    allNoop: true,
    pendingcb: 0,
    prefinished: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    errored: null,
    closed: false
  },
  _events: {
    response: '[function] function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '        /*eslint default-case:0*/\n' +
      "        case 'gzip':\n" +
      "        case 'compress':\n" +
      "        case 'deflate':\n" +
      '        // add the unzipper to the body stream processing pipeline\n' +
      '          stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '          // remove the content-encoding in order to not confuse downstream operations\n' +
      "          delete res.headers['content-encoding'];\n" +
      '          break;\n' +
      '        }\n' +
      '      }\n' +
      '\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      '\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {\n' +
      '            stream.destroy();\n' +
      "            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n" +
      '              config, null, lastRequest));\n' +
      '          }\n' +
      '        });\n' +
      '\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(enhanceError(err, config, null, lastRequest));\n' +
      '        });\n' +
      '\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          var responseData = Buffer.concat(responseBuffer);\n' +
      "          if (config.responseType !== 'arraybuffer') {\n" +
      '            responseData = responseData.toString(config.responseEncoding);\n' +
      "            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '              responseData = utils.stripBOM(responseData);\n' +
      '            }\n' +
      '          }\n' +
      '\n' +
      '          response.data = responseData;\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    }',
    error: '[function] function handleRequestError(err) {\n' +
      "      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n" +
      '      reject(enhanceError(err, config, null, req));\n' +
      '    }'
  },
  _eventsCount: 2,
  _options: {
    maxRedirects: 21,
    maxBodyLength: 10485760,
    protocol: 'http:',
    path: '/features',
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.21.1'
    },
    agents: {},
    socketPath: '\\\\.\\pipe\\dockerBackendApiServer',
    nativeProtocols: {
      'http:': {
        _connectionListener: '[function] function connectionListener(socket) {\n' +
          '  defaultTriggerAsyncIdScope(\n' +
          '    getOrSetAsyncId(socket), connectionListenerInternal, this, socket\n' +
          '  );\n' +
          '}',
        METHODS: [
          'ACL',        'BIND',        'CHECKOUT',
          'CONNECT',    'COPY',        'DELETE',
          'GET',        'HEAD',        'LINK',
          'LOCK',       'M-SEARCH',    'MERGE',
          'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
          'MOVE',       'NOTIFY',      'OPTIONS',
          'PATCH',      'POST',        'PRI',
          'PROPFIND',   'PROPPATCH',   'PURGE',
          'PUT',        'REBIND',      'REPORT',
          'SEARCH',     'SOURCE',      'SUBSCRIBE',
          'TRACE',      'UNBIND',      'UNLINK',
          'UNLOCK',     'UNSUBSCRIBE'
        ],
        STATUS_CODES: {
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '103': 'Early Hints',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '208': 'Already Reported',
          '226': 'IM Used',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Found',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '308': 'Permanent Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Timeout',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Payload Too Large',
          '414': 'URI Too Long',
          '415': 'Unsupported Media Type',
          '416': 'Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': "I'm a Teapot",
          '421': 'Misdirected Request',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Too Early',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Timeout',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '508': 'Loop Detected',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
        },
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  EventEmitter.call(this);\n' +
          '\n' +
          '  this.defaultPort = 80;\n' +
          "  this.protocol = 'http:';\n" +
          '\n' +
          '  this.options = { ...options };\n' +
          '\n' +
          "  // Don't confuse net and make it think that we're connecting to a pipe\n" +
          '  this.options.path = null;\n' +
          '  this.requests = {};\n' +
          '  this.sockets = {};\n' +
          '  this.freeSockets = {};\n' +
          '  this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;\n' +
          '  this.keepAlive = this.options.keepAlive || false;\n' +
          '  this.maxSockets = this.options.maxSockets || Agent.defaultMaxSockets;\n' +
          '  this.maxFreeSockets = this.options.maxFreeSockets || 256;\n' +
          "  this.scheduling = this.options.scheduling || 'fifo';\n" +
          '  this.maxTotalSockets = this.options.maxTotalSockets;\n' +
          '  this.totalSocketCount = 0;\n' +
          '\n' +
          "  validateOneOf(this.scheduling, 'scheduling', ['fifo', 'lifo'], true);\n" +
          '\n' +
          '  if (this.maxTotalSockets !== undefined) {\n' +
          "    validateNumber(this.maxTotalSockets, 'maxTotalSockets');\n" +
          '    if (this.maxTotalSockets <= 0 || NumberIsNaN(this.maxTotalSockets))\n' +
          "      throw new ERR_OUT_OF_RANGE('maxTotalSockets', '> 0',\n" +
          '                                 this.maxTotalSockets);\n' +
          '  } else {\n' +
          '    this.maxTotalSockets = Infinity;\n' +
          '  }\n' +
          '\n' +
          "  this.on('free', (socket, options) => {\n" +
          '    const name = this.getName(options);\n' +
          "    debug('agent.on(free)', name);\n" +
          '\n' +
          '    // TODO(ronag): socket.destroy(err) might have been called\n' +
          "    // before coming here and have an 'error' scheduled. In the\n" +
          "    // case of socket.destroy() below this 'error' has no handler\n" +
          '    // and could cause unhandled exception.\n' +
          '\n' +
          '    if (!socket.writable) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const requests = this.requests[name];\n' +
          '    if (requests && requests.length) {\n' +
          '      const req = requests.shift();\n' +
          '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
          '      if (reqAsyncRes) {\n' +
          '        // Run request within the original async context.\n' +
          '        reqAsyncRes.runInAsyncScope(() => {\n' +
          '          asyncResetHandle(socket);\n' +
          '          setRequestSocket(this, req, socket);\n' +
          '        });\n' +
          '        req[kRequestAsyncResource] = null;\n' +
          '      } else {\n' +
          '        setRequestSocket(this, req, socket);\n' +
          '      }\n' +
          '      if (requests.length === 0) {\n' +
          '        delete this.requests[name];\n' +
          '      }\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    // If there are no pending requests, then put it in\n' +
          "    // the freeSockets pool, but only if we're allowed to do so.\n" +
          '    const req = socket._httpMessage;\n' +
          '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    const freeSockets = this.freeSockets[name] || [];\n' +
          '    const freeLen = freeSockets.length;\n' +
          '    let count = freeLen;\n' +
          '    if (this.sockets[name])\n' +
          '      count += this.sockets[name].length;\n' +
          '\n' +
          '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
          '        count > this.maxSockets ||\n' +
          '        freeLen >= this.maxFreeSockets ||\n' +
          '        !this.keepSocketAlive(socket)) {\n' +
          '      socket.destroy();\n' +
          '      return;\n' +
          '    }\n' +
          '\n' +
          '    this.freeSockets[name] = freeSockets;\n' +
          '    socket[async_id_symbol] = -1;\n' +
          '    socket._httpMessage = null;\n' +
          '    this.removeSocket(socket, options);\n' +
          '\n' +
          "    socket.once('error', freeSocketErrorListener);\n" +
          '    freeSockets.push(socket);\n' +
          '  });\n' +
          '\n' +
          "  // Don't emit keylog events unless there is a listener for them.\n" +
          "  this.on('newListener', maybeEnableKeylog);\n" +
          '}',
        ClientRequest: '[function] function ClientRequest(input, options, cb) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (typeof input === 'string') {\n" +
          '    const urlStr = input;\n' +
          '    try {\n' +
          '      input = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      input = url.parse(urlStr);\n' +
          '      if (!input.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the http module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (input && input[searchParamsSymbol] &&\n' +
          '             input[searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    input = urlToOptions(input);\n' +
          '  } else {\n' +
          '    cb = options;\n' +
          '    options = input;\n' +
          '    input = null;\n' +
          '  }\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    cb = options;\n' +
          '    options = input || {};\n' +
          '  } else {\n' +
          '    options = ObjectAssign(input || {}, options);\n' +
          '  }\n' +
          '\n' +
          '  let agent = options.agent;\n' +
          '  const defaultAgent = options._defaultAgent || Agent.globalAgent;\n' +
          '  if (agent === false) {\n' +
          '    agent = new defaultAgent.constructor();\n' +
          '  } else if (agent === null || agent === undefined) {\n' +
          "    if (typeof options.createConnection !== 'function') {\n" +
          '      agent = defaultAgent;\n' +
          '    }\n' +
          '    // Explicitly pass through this statement as agent will not be used\n' +
          '    // when createConnection is provided.\n' +
          "  } else if (typeof agent.addRequest !== 'function') {\n" +
          "    throw new ERR_INVALID_ARG_TYPE('options.agent',\n" +
          "                                   ['Agent-like Object', 'undefined', 'false'],\n" +
          '                                   agent);\n' +
          '  }\n' +
          '  this.agent = agent;\n' +
          '\n' +
          '  const protocol = options.protocol || defaultAgent.protocol;\n' +
          '  let expectedProtocol = defaultAgent.protocol;\n' +
          '  if (this.agent && this.agent.protocol)\n' +
          '    expectedProtocol = this.agent.protocol;\n' +
          '\n' +
          '  if (options.path) {\n' +
          '    const path = String(options.path);\n' +
          '    if (INVALID_PATH_REGEX.test(path))\n' +
          "      throw new ERR_UNESCAPED_CHARACTERS('Request path');\n" +
          '  }\n' +
          '\n' +
          '  if (protocol !== expectedProtocol) {\n' +
          '    throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\n' +
          '  }\n' +
          '\n' +
          '  const defaultPort = options.defaultPort ||\n' +
          '                    (this.agent && this.agent.defaultPort);\n' +
          '\n' +
          '  const port = options.port = options.port || defaultPort || 80;\n' +
          "  const host = options.host = validateHost(options.hostname, 'hostname') ||\n" +
          "                            validateHost(options.host, 'host') || 'localhost';\n" +
          '\n' +
          '  const setHost = (options.setHost === undefined || Boolean(options.setHost));\n' +
          '\n' +
          '  this.socketPath = options.socketPath;\n' +
          '\n' +
          '  if (options.timeout !== undefined)\n' +
          "    this.timeout = getTimerDuration(options.timeout, 'timeout');\n" +
          '\n' +
          '  let method = options.method;\n' +
          "  const methodIsString = (typeof method === 'string');\n" +
          '  if (method !== null && method !== undefined && !methodIsString) {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options.method', 'string', method);\n" +
          '  }\n' +
          '\n' +
          '  if (methodIsString && method) {\n' +
          '    if (!checkIsHttpToken(method)) {\n' +
          "      throw new ERR_INVALID_HTTP_TOKEN('Method', method);\n" +
          '    }\n' +
          '    method = this.method = method.toUpperCase();\n' +
          '  } else {\n' +
          "    method = this.method = 'GET';\n" +
          '  }\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined &&\n' +
          "      typeof insecureHTTPParser !== 'boolean') {\n" +
          '    throw new ERR_INVALID_ARG_TYPE(\n' +
          "      'options.insecureHTTPParser', 'boolean', insecureHTTPParser);\n" +
          '  }\n' +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          "  this.path = options.path || '/';\n" +
          '  if (cb) {\n' +
          "    this.once('response', cb);\n" +
          '  }\n' +
          '\n' +
          "  if (method === 'GET' ||\n" +
          "      method === 'HEAD' ||\n" +
          "      method === 'DELETE' ||\n" +
          "      method === 'OPTIONS' ||\n" +
          "      method === 'TRACE' ||\n" +
          "      method === 'CONNECT') {\n" +
          '    this.useChunkedEncodingByDefault = false;\n' +
          '  } else {\n' +
          '    this.useChunkedEncodingByDefault = true;\n' +
          '  }\n' +
          '\n' +
          '  this._ended = false;\n' +
          '  this.res = null;\n' +
          '  this.aborted = false;\n' +
          '  this.timeoutCb = null;\n' +
          '  this.upgradeOrConnect = false;\n' +
          '  this.parser = null;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.reusedSocket = false;\n' +
          '  this.host = host;\n' +
          '  this.protocol = protocol;\n' +
          '\n' +
          '  let called = false;\n' +
          '\n' +
          '  if (this.agent) {\n' +
          '    // If there is an agent we should default to Connection:keep-alive,\n' +
          '    // but only if the Agent will actually reuse the connection!\n' +
          "    // If it's not a keepAlive agent, and the maxSockets==Infinity, then\n" +
          "    // there's never a case where this socket will actually be reused\n" +
          '    if (!this.agent.keepAlive && !NumberIsFinite(this.agent.maxSockets)) {\n' +
          '      this._last = true;\n' +
          '      this.shouldKeepAlive = false;\n' +
          '    } else {\n' +
          '      this._last = false;\n' +
          '      this.shouldKeepAlive = true;\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  const headersArray = ArrayIsArray(options.headers);\n' +
          '  if (!headersArray) {\n' +
          '    if (options.headers) {\n' +
          '      const keys = ObjectKeys(options.headers);\n' +
          '      // Retain for(;;) loop for performance reasons\n' +
          '      // Refs: https://github.com/nodejs/node/pull/30958\n' +
          '      for (let i = 0; i < keys.length; i++) {\n' +
          '        const key = keys[i];\n' +
          '        this.setHeader(key, options.headers[key]);\n' +
          '      }\n' +
          '    }\n' +
          '\n' +
          "    if (host && !this.getHeader('host') && setHost) {\n" +
          '      let hostHeader = host;\n' +
          '\n' +
          '      // For the Host header, ensure that IPv6 addresses are enclosed\n' +
          '      // in square brackets, as defined by URI formatting\n' +
          '      // https://tools.ietf.org/html/rfc3986#section-3.2.2\n' +
          "      const posColon = hostHeader.indexOf(':');\n" +
          '      if (posColon !== -1 &&\n' +
          "          hostHeader.includes(':', posColon + 1) &&\n" +
          "          hostHeader.charCodeAt(0) !== 91/* '[' */) {\n" +
          '        hostHeader = `[${hostHeader}]`;\n' +
          '      }\n' +
          '\n' +
          '      if (port && +port !== defaultPort) {\n' +
          "        hostHeader += ':' + port;\n" +
          '      }\n' +
          "      this.setHeader('Host', hostHeader);\n" +
          '    }\n' +
          '\n' +
          "    if (options.auth && !this.getHeader('Authorization')) {\n" +
          "      this.setHeader('Authorization', 'Basic ' +\n" +
          "                     Buffer.from(options.auth).toString('base64'));\n" +
          '    }\n' +
          '\n' +
          "    if (this.getHeader('expect')) {\n" +
          '      if (this._header) {\n' +
          "        throw new ERR_HTTP_HEADERS_SENT('render');\n" +
          '      }\n' +
          '\n' +
          "      this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                        this[kOutHeaders]);\n' +
          '    }\n' +
          '  } else {\n' +
          "    this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\n" +
          '                      options.headers);\n' +
          '  }\n' +
          '\n' +
          '  const oncreate = (err, socket) => {\n' +
          '    if (called)\n' +
          '      return;\n' +
          '    called = true;\n' +
          '    if (err) {\n' +
          "      process.nextTick(() => this.emit('error', err));\n" +
          '      return;\n' +
          '    }\n' +
          '    this.onSocket(socket);\n' +
          '    this._deferToConnect(null, null, () => this._flush());\n' +
          '  };\n' +
          '\n' +
          '  // initiate connection\n' +
          '  if (this.agent) {\n' +
          '    this.agent.addRequest(this, options);\n' +
          '  } else {\n' +
          '    // No agent, default to Connection:close.\n' +
          '    this._last = true;\n' +
          '    this.shouldKeepAlive = false;\n' +
          "    if (typeof options.createConnection === 'function') {\n" +
          '      const newSocket = options.createConnection(options, oncreate);\n' +
          '      if (newSocket && !called) {\n' +
          '        called = true;\n' +
          '        this.onSocket(newSocket);\n' +
          '      } else {\n' +
          '        return;\n' +
          '      }\n' +
          '    } else {\n' +
          "      debug('CLIENT use net.createConnection', options);\n" +
          '      this.onSocket(net.createConnection(options));\n' +
          '    }\n' +
          '  }\n' +
          '\n' +
          '  this._deferToConnect(null, null, () => this._flush());\n' +
          '}',
        IncomingMessage: '[function] function IncomingMessage(socket) {\n' +
          '  let streamOptions;\n' +
          '\n' +
          '  if (socket) {\n' +
          '    streamOptions = {\n' +
          '      highWaterMark: socket.readableHighWaterMark\n' +
          '    };\n' +
          '  }\n' +
          '\n' +
          '  Stream.Readable.call(this, { autoDestroy: false, ...streamOptions });\n' +
          '\n' +
          '  this._readableState.readingMore = true;\n' +
          '\n' +
          '  this.socket = socket;\n' +
          '\n' +
          '  this.httpVersionMajor = null;\n' +
          '  this.httpVersionMinor = null;\n' +
          '  this.httpVersion = null;\n' +
          '  this.complete = false;\n' +
          '  this.headers = {};\n' +
          '  this.rawHeaders = [];\n' +
          '  this.trailers = {};\n' +
          '  this.rawTrailers = [];\n' +
          '\n' +
          '  this.aborted = false;\n' +
          '\n' +
          '  this.upgrade = null;\n' +
          '\n' +
          '  // request (server) only\n' +
          "  this.url = '';\n" +
          '  this.method = null;\n' +
          '\n' +
          '  // response (client) only\n' +
          '  this.statusCode = null;\n' +
          '  this.statusMessage = null;\n' +
          '  this.client = socket;\n' +
          '\n' +
          '  this._consuming = false;\n' +
          '  // Flag for when we decide that this message cannot possibly be\n' +
          "  // read by the user, so there's no point continuing to handle it.\n" +
          '  this._dumped = false;\n' +
          '}',
        OutgoingMessage: '[function] function OutgoingMessage() {\n' +
          '  Stream.call(this);\n' +
          '\n' +
          '  // Queue that holds all currently pending data, until the response will be\n' +
          '  // assigned to the socket (until it will its turn in the HTTP pipeline).\n' +
          '  this.outputData = [];\n' +
          '\n' +
          '  // `outputSize` is an approximate measure of how much data is queued on this\n' +
          '  // response. `_onPendingData` will be invoked to update similar global\n' +
          '  // per-connection counter. That counter will be used to pause/unpause the\n' +
          '  // TCP socket and HTTP Parser and thus handle the backpressure.\n' +
          '  this.outputSize = 0;\n' +
          '\n' +
          '  this.writable = true;\n' +
          '  this.destroyed = false;\n' +
          '\n' +
          '  this._last = false;\n' +
          '  this.chunkedEncoding = false;\n' +
          '  this.shouldKeepAlive = true;\n' +
          '  this._defaultKeepAlive = true;\n' +
          '  this.useChunkedEncodingByDefault = true;\n' +
          '  this.sendDate = false;\n' +
          '  this._removedConnection = false;\n' +
          '  this._removedContLen = false;\n' +
          '  this._removedTE = false;\n' +
          '\n' +
          '  this._contentLength = null;\n' +
          '  this._hasBody = true;\n' +
          "  this._trailer = '';\n" +
          '  this[kNeedDrain] = false;\n' +
          '\n' +
          '  this.finished = false;\n' +
          '  this._headerSent = false;\n' +
          '  this[kCorked] = 0;\n' +
          '\n' +
          '  this.socket = null;\n' +
          '  this._header = null;\n' +
          '  this[kOutHeaders] = null;\n' +
          '\n' +
          '  this._keepAliveTimeout = 0;\n' +
          '\n' +
          '  this._onPendingData = noopPendingOutput;\n' +
          '}',
        Server: '[function] function Server(options, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(options, requestListener);\n' +
          '\n' +
          "  if (typeof options === 'function') {\n" +
          '    requestListener = options;\n' +
          '    options = {};\n' +
          "  } else if (options == null || typeof options === 'object') {\n" +
          '    options = { ...options };\n' +
          '  } else {\n' +
          "    throw new ERR_INVALID_ARG_TYPE('options', 'object', options);\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = options.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  const maxHeaderSize = options.maxHeaderSize;\n' +
          '  if (maxHeaderSize !== undefined)\n' +
          "    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\n" +
          '  this.maxHeaderSize = maxHeaderSize;\n' +
          '\n' +
          '  const insecureHTTPParser = options.insecureHTTPParser;\n' +
          '  if (insecureHTTPParser !== undefined)\n' +
          "    validateBoolean(insecureHTTPParser, 'options.insecureHTTPParser');\n" +
          '  this.insecureHTTPParser = insecureHTTPParser;\n' +
          '\n' +
          '  net.Server.call(this, { allowHalfOpen: true });\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.on('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          '  // Similar option to this. Too lazy to write my own docs.\n' +
          '  // http://www.squid-cache.org/Doc/config/half_closed_clients/\n' +
          '  // https://wiki.squid-cache.org/SquidFaq/InnerWorkings#What_is_a_half-closed_filedescriptor.3F\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          "  this.on('connection', connectionListener);\n" +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        ServerResponse: '[function] function ServerResponse(req) {\n' +
          '  OutgoingMessage.call(this);\n' +
          '\n' +
          "  if (req.method === 'HEAD') this._hasBody = false;\n" +
          '\n' +
          '  this.sendDate = true;\n' +
          '  this._sent100 = false;\n' +
          '  this._expect_continue = false;\n' +
          '\n' +
          '  if (req.httpVersionMajor < 1 || req.httpVersionMinor < 1) {\n' +
          '    this.useChunkedEncodingByDefault = chunkExpression.test(req.headers.te);\n' +
          '    this.shouldKeepAlive = false;\n' +
          '  }\n' +
          '\n' +
          '  const httpObserverCount = observerCounts[NODE_PERFORMANCE_ENTRY_TYPE_HTTP];\n' +
          '  if (httpObserverCount > 0) {\n' +
          '    this[kServerResponseStatistics] = {\n' +
          '      startTime: process.hrtime()\n' +
          '    };\n' +
          '  }\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        validateHeaderName: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        validateHeaderValue: '[function] function hidden(...args) {\n' +
          '    // Make sure the most outer `hideStackFrames()` function is used.\n' +
          '    let setStackFn = false;\n' +
          '    if (excludedStackFn === undefined) {\n' +
          '      excludedStackFn = hidden;\n' +
          '      setStackFn = true;\n' +
          '    }\n' +
          '    try {\n' +
          '      return fn(...args);\n' +
          '    } finally {\n' +
          '      if (setStackFn === true) {\n' +
          '        excludedStackFn = undefined;\n' +
          '      }\n' +
          '    }\n' +
          '  }',
        get: '[function] function get(url, options, cb) {\n' +
          '  const req = request(url, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(url, options, cb) {\n' +
          '  return new ClientRequest(url, options, cb);\n' +
          '}',
        maxHeaderSize: 16384,
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80::\\\\.\\pipe\\dockerWebApiServer': [Array],
            'localhost:80::\\\\.\\pipe\\dockerBackendApiServer': [Array]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 6
        }
      },
      'https:': {
        Agent: '[function] function Agent(options) {\n' +
          '  if (!(this instanceof Agent))\n' +
          '    return new Agent(options);\n' +
          '\n' +
          '  HttpAgent.call(this, options);\n' +
          '  this.defaultPort = 443;\n' +
          "  this.protocol = 'https:';\n" +
          '  this.maxCachedSessions = this.options.maxCachedSessions;\n' +
          '  if (this.maxCachedSessions === undefined)\n' +
          '    this.maxCachedSessions = 100;\n' +
          '\n' +
          '  this._sessionCache = {\n' +
          '    map: {},\n' +
          '    list: []\n' +
          '  };\n' +
          '}',
        globalAgent: {
          _events: {
            free: '[function] (socket, options) => {\n' +
              '    const name = this.getName(options);\n' +
              "    debug('agent.on(free)', name);\n" +
              '\n' +
              '    // TODO(ronag): socket.destroy(err) might have been called\n' +
              "    // before coming here and have an 'error' scheduled. In the\n" +
              "    // case of socket.destroy() below this 'error' has no handler\n" +
              '    // and could cause unhandled exception.\n' +
              '\n' +
              '    if (!socket.writable) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const requests = this.requests[name];\n' +
              '    if (requests && requests.length) {\n' +
              '      const req = requests.shift();\n' +
              '      const reqAsyncRes = req[kRequestAsyncResource];\n' +
              '      if (reqAsyncRes) {\n' +
              '        // Run request within the original async context.\n' +
              '        reqAsyncRes.runInAsyncScope(() => {\n' +
              '          asyncResetHandle(socket);\n' +
              '          setRequestSocket(this, req, socket);\n' +
              '        });\n' +
              '        req[kRequestAsyncResource] = null;\n' +
              '      } else {\n' +
              '        setRequestSocket(this, req, socket);\n' +
              '      }\n' +
              '      if (requests.length === 0) {\n' +
              '        delete this.requests[name];\n' +
              '      }\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    // If there are no pending requests, then put it in\n' +
              "    // the freeSockets pool, but only if we're allowed to do so.\n" +
              '    const req = socket._httpMessage;\n' +
              '    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    const freeSockets = this.freeSockets[name] || [];\n' +
              '    const freeLen = freeSockets.length;\n' +
              '    let count = freeLen;\n' +
              '    if (this.sockets[name])\n' +
              '      count += this.sockets[name].length;\n' +
              '\n' +
              '    if (this.totalSocketCount > this.maxTotalSockets ||\n' +
              '        count > this.maxSockets ||\n' +
              '        freeLen >= this.maxFreeSockets ||\n' +
              '        !this.keepSocketAlive(socket)) {\n' +
              '      socket.destroy();\n' +
              '      return;\n' +
              '    }\n' +
              '\n' +
              '    this.freeSockets[name] = freeSockets;\n' +
              '    socket[async_id_symbol] = -1;\n' +
              '    socket._httpMessage = null;\n' +
              '    this.removeSocket(socket, options);\n' +
              '\n' +
              "    socket.once('error', freeSocketErrorListener);\n" +
              '    freeSockets.push(socket);\n' +
              '  }',
            newListener: '[function] function maybeEnableKeylog(eventName) {\n' +
              "  if (eventName === 'keylog') {\n" +
              "    this.removeListener('newListener', maybeEnableKeylog);\n" +
              '    // Future sockets will listen on keylog at creation.\n' +
              '    const agent = this;\n' +
              '    this[kOnKeylog] = function onkeylog(keylog) {\n' +
              "      agent.emit('keylog', keylog, this);\n" +
              '    };\n' +
              '    // Existing sockets will start listening on keylog now.\n' +
              '    for (const socket of ObjectValues(this.sockets)) {\n' +
              "      socket.on('keylog', this[kOnKeylog]);\n" +
              '    }\n' +
              '  }\n' +
              '}'
          },
          _eventsCount: 2,
          defaultPort: 443,
          protocol: 'https:',
          options: { path: null },
          requests: {},
          sockets: {},
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: null,
          maxFreeSockets: 256,
          scheduling: 'fifo',
          maxTotalSockets: null,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] }
        },
        Server: '[function] function Server(opts, requestListener) {\n' +
          '  if (!(this instanceof Server)) return new Server(opts, requestListener);\n' +
          '\n' +
          "  if (typeof opts === 'function') {\n" +
          '    requestListener = opts;\n' +
          '    opts = undefined;\n' +
          '  }\n' +
          '  opts = { ...opts };\n' +
          '\n' +
          '  if (!opts.ALPNProtocols) {\n' +
          '    // http/1.0 is not defined as Protocol IDs in IANA\n' +
          '    // https://www.iana.org/assignments/tls-extensiontype-values\n' +
          '    //       /tls-extensiontype-values.xhtml#alpn-protocol-ids\n' +
          "    opts.ALPNProtocols = ['http/1.1'];\n" +
          '  }\n' +
          '\n' +
          '  this[kIncomingMessage] = opts.IncomingMessage || IncomingMessage;\n' +
          '  this[kServerResponse] = opts.ServerResponse || ServerResponse;\n' +
          '\n' +
          '  tls.Server.call(this, opts, _connectionListener);\n' +
          '\n' +
          '  this.httpAllowHalfOpen = false;\n' +
          '\n' +
          '  if (requestListener) {\n' +
          "    this.addListener('request', requestListener);\n" +
          '  }\n' +
          '\n' +
          "  this.addListener('tlsClientError', function addListener(err, conn) {\n" +
          "    if (!this.emit('clientError', err, conn))\n" +
          '      conn.destroy(err);\n' +
          '  });\n' +
          '\n' +
          '  this.timeout = 0;\n' +
          '  this.keepAliveTimeout = 5000;\n' +
          '  this.maxHeadersCount = null;\n' +
          '  this.headersTimeout = 60 * 1000; // 60 seconds\n' +
          '  this.requestTimeout = 0;\n' +
          '}',
        createServer: '[function] function createServer(opts, requestListener) {\n' +
          '  return new Server(opts, requestListener);\n' +
          '}',
        get: '[function] function get(input, options, cb) {\n' +
          '  const req = request(input, options, cb);\n' +
          '  req.end();\n' +
          '  return req;\n' +
          '}',
        request: '[function] function request(...args) {\n' +
          '  let options = {};\n' +
          '\n' +
          "  if (typeof args[0] === 'string') {\n" +
          '    const urlStr = args.shift();\n' +
          '    try {\n' +
          '      options = urlToOptions(new URL(urlStr));\n' +
          '    } catch (err) {\n' +
          '      options = url.parse(urlStr);\n' +
          '      if (!options.hostname) {\n' +
          '        throw err;\n' +
          '      }\n' +
          '      if (!urlWarningEmitted && !process.noDeprecation) {\n' +
          '        urlWarningEmitted = true;\n' +
          '        process.emitWarning(\n' +
          '          `The provided URL ${urlStr} is not a valid URL, and is supported ` +\n' +
          "          'in the https module solely for compatibility.',\n" +
          "          'DeprecationWarning', 'DEP0109');\n" +
          '      }\n' +
          '    }\n' +
          '  } else if (args[0] && args[0][searchParamsSymbol] &&\n' +
          '             args[0][searchParamsSymbol][searchParamsSymbol]) {\n' +
          '    // url.URL instance\n' +
          '    options = urlToOptions(args.shift());\n' +
          '  }\n' +
          '\n' +
          "  if (args[0] && typeof args[0] !== 'function') {\n" +
          '    ObjectAssign(options, args.shift());\n' +
          '  }\n' +
          '\n' +
          '  options._defaultAgent = module.exports.globalAgent;\n' +
          '  args.unshift(options);\n' +
          '\n' +
          '  return new ClientRequest(...args);\n' +
          '}'
      }
    },
    pathname: '/features'
  },
  _ended: true,
  _ending: true,
  _redirectCount: 0,
  _redirects: [],
  _requestBodyLength: 0,
  _requestBodyBuffers: [],
  _onNativeResponse: '[function] function (response) {\n    self._processResponse(response);\n  }',
  _currentUrl: 'http:/features'
}
[2021-05-13 17:53:58.630] [info]  Response success for /notifications/subscriptions
[2021-05-13 17:53:58.635] [info]  Response for POST /notifications/subscriptions
[2021-05-13 17:53:58.823] [verbose] 
[2021-05-13 17:54:11.205] [info]  Response success for /versions
[2021-05-13 17:54:11.306] [info]  Response for GET /versions
[2021-05-13 17:54:11.489] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-13 17:59:34.481] [verbose] GET /settings params = null
[2021-05-13 17:59:34.560] [verbose] GET /features params = null
[2021-05-13 17:59:38.017] [info]  Response success for /features
[2021-05-13 17:59:38.119] [info]  Response for GET /features
[2021-05-13 17:59:38.203] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-13 17:59:43.706] [info]  Response success for /settings
[2021-05-13 17:59:43.764] [info]  Response for GET /settings
[2021-05-13 17:59:43.858] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-13 17:59:44.003] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-13 18:00:00.084] [info]  Response success for /system/disk-usage
[2021-05-13 18:00:00.168] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-13 18:00:00.270] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 95732
}
[2021-05-13 18:00:01.919] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: true }
[2021-05-13 18:00:23.718] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:23.822] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:24.051] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 18:00:24.435] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-13 18:00:31.154] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:31.270] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:31.491] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 18:00:35.944] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:36.050] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:36.245] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 18:00:36.428] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:36.603] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-13 18:00:36.814] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-13 18:00:47.622] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-13 18:00:48.319] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-13 18:00:48.587] [info]  Response success for /usage
[2021-05-13 18:00:48.693] [info]  Response for POST /usage
[2021-05-13 18:00:48.347] [info]  application ready
[2021-05-14 15:50:02.757] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 15:50:02.773] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 15:50:02.775] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 15:50:02.944] [info]  application ready
[2021-05-14 15:50:02.968] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:50:03.171] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:50:03.174] [info]  using production config /dashboard
[2021-05-14 15:50:03.258] [info]  ping received
[2021-05-14 15:50:03.320] [info]  Response success for /notifications/subscriptions
[2021-05-14 15:50:03.323] [info]  Response for POST /notifications/subscriptions
[2021-05-14 15:50:03.327] [verbose] 
[2021-05-14 15:50:03.965] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-14 15:50:04.148] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 15:50:04.169] [info]  Response success for /usage
[2021-05-14 15:50:04.170] [info]  Response for POST /usage
[2021-05-14 15:50:04.173] [verbose] 
[2021-05-14 15:50:04.248] [verbose] GET /features params = null
[2021-05-14 15:50:04.251] [verbose] GET /settings params = null
[2021-05-14 15:50:04.255] [verbose] GET /versions params = null
[2021-05-14 15:50:04.260] [verbose] GET /system/editor params = null
[2021-05-14 15:50:04.263] [verbose] GET /kubernetes params = null
[2021-05-14 15:50:04.266] [verbose] GET /registry/user params = null
[2021-05-14 15:50:04.269] [verbose] GET /docker params = null
[2021-05-14 15:50:04.273] [verbose] GET /update params = null
[2021-05-14 15:50:04.302] [info]  Response success for /registry/user
[2021-05-14 15:50:04.368] [info]  Response for GET /registry/user
[2021-05-14 15:50:04.376] [verbose] { username: 'neuromancer0001' }
[2021-05-14 15:50:04.386] [info]  Response success for /docker
[2021-05-14 15:50:04.395] [info]  Response for GET /docker
[2021-05-14 15:50:04.403] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-14 15:50:04.413] [info]  Response success for /features
[2021-05-14 15:50:04.419] [info]  Response for GET /features
[2021-05-14 15:50:04.425] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:50:04.443] [info]  Response success for /kubernetes
[2021-05-14 15:50:04.455] [info]  Response for GET /kubernetes
[2021-05-14 15:50:04.463] [verbose] { state: 'stopped', enabled: true }
[2021-05-14 15:50:04.468] [info]  Response success for /settings
[2021-05-14 15:50:04.470] [info]  Response for GET /settings
[2021-05-14 15:50:04.475] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1620385041894,
    tipLastId: 13,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 15:50:04.480] [info]  Response success for /update
[2021-05-14 15:50:04.482] [info]  Response for GET /update
[2021-05-14 15:50:04.485] [verbose] { updateAvailableTime: 0 }
[2021-05-14 15:50:04.489] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-14 15:50:04.502] [verbose] GET /features params = null
[2021-05-14 15:50:04.506] [info]  Response success for /features
[2021-05-14 15:50:04.511] [info]  Response for GET /features
[2021-05-14 15:50:04.513] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:50:04.527] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-14 15:50:04.546] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 15:50:04.620] [info]  Response success for /system/disk-usage
[2021-05-14 15:50:04.621] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 15:50:04.625] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81761
}
[2021-05-14 15:50:04.755] [verbose] POST /tip/last-viewed data = { timestamp: 1621000204754, id: 16 }
[2021-05-14 15:50:04.758] [verbose] POST /analytics/track data = { event: 'actionShowTip', body: { tipId: 16 } }
[2021-05-14 15:50:04.803] [info]  Response success for /tip/last-viewed
[2021-05-14 15:50:04.807] [info]  Response for POST /tip/last-viewed
[2021-05-14 15:50:04.811] [verbose] 
[2021-05-14 15:50:05.736] [info]  Response success for /analytics/track
[2021-05-14 15:50:05.738] [info]  Response for POST /analytics/track
[2021-05-14 15:50:05.744] [verbose] 
[2021-05-14 15:50:07.160] [info]  Response success for /versions
[2021-05-14 15:50:07.161] [info]  Response for GET /versions
[2021-05-14 15:50:07.163] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-14 15:50:08.298] [verbose] POST /analytics/track data = { event: 'actionLearnMoreAboutTip', body: { tipId: 16 } }
[2021-05-14 15:50:09.264] [info]  Response success for /analytics/track
[2021-05-14 15:50:09.266] [info]  Response for POST /analytics/track
[2021-05-14 15:50:09.273] [verbose] 
[2021-05-14 15:50:45.477] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-14 15:50:46.520] [info]  Response success for /usage
[2021-05-14 15:50:46.522] [info]  Response for POST /usage
[2021-05-14 15:50:46.526] [verbose] 
[2021-05-14 15:50:48.617] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 15:50:48.633] [info]  Response success for /usage
[2021-05-14 15:50:48.634] [info]  Response for POST /usage
[2021-05-14 15:50:48.639] [verbose] 
[2021-05-14 15:50:51.489] [verbose] GET /settings params = null
[2021-05-14 15:50:51.492] [verbose] GET /features params = null
[2021-05-14 15:50:51.501] [info]  Response success for /features
[2021-05-14 15:50:51.503] [info]  Response for GET /features
[2021-05-14 15:50:51.510] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:50:51.517] [info]  Response success for /settings
[2021-05-14 15:50:51.518] [info]  Response for GET /settings
[2021-05-14 15:50:51.521] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 15:50:51.536] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 15:50:51.554] [info]  Response success for /system/disk-usage
[2021-05-14 15:50:51.555] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 15:50:51.558] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81744
}
[2021-05-14 15:51:08.029] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:51:08.083] [info]  application ready
[2021-05-14 15:51:08.127] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:51:08.220] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:51:08.247] [info]  using production config /tutorial
[2021-05-14 15:51:30.293] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-14 15:51:30.296] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5078.63499999803,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-14 15:51:30.300] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 3382.920000000013,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-14 15:51:30.305] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2462.4499999990803,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-14 15:51:30.311] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2895.985000002838,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-14 15:51:30.430] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 15:51:31.226] [info]  Response success for /analytics/track
[2021-05-14 15:51:31.228] [info]  Response for POST /analytics/track
[2021-05-14 15:51:31.233] [verbose] 
[2021-05-14 15:51:31.314] [info]  Response success for /analytics/track
[2021-05-14 15:51:31.317] [info]  Response for POST /analytics/track
[2021-05-14 15:51:31.326] [verbose] 
[2021-05-14 15:51:31.335] [info]  Response success for /analytics/track
[2021-05-14 15:51:31.337] [info]  Response for POST /analytics/track
[2021-05-14 15:51:31.341] [verbose] 
[2021-05-14 15:51:31.345] [info]  Response success for /analytics/track
[2021-05-14 15:51:31.346] [info]  Response for POST /analytics/track
[2021-05-14 15:51:31.349] [verbose] 
[2021-05-14 15:51:31.352] [info]  Response success for /analytics/track
[2021-05-14 15:51:31.355] [info]  Response for POST /analytics/track
[2021-05-14 15:51:31.357] [verbose] 
[2021-05-14 15:51:31.361] [info]  Response success for /usage
[2021-05-14 15:51:31.362] [info]  Response for POST /usage
[2021-05-14 15:51:31.365] [verbose] 
[2021-05-14 15:51:43.925] [verbose] GET /settings params = null
[2021-05-14 15:51:43.927] [verbose] GET /features params = null
[2021-05-14 15:51:43.933] [info]  Response success for /features
[2021-05-14 15:51:43.960] [info]  Response for GET /features
[2021-05-14 15:51:43.964] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:51:43.980] [info]  Response success for /settings
[2021-05-14 15:51:43.981] [info]  Response for GET /settings
[2021-05-14 15:51:43.988] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 15:51:43.993] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 15:51:44.009] [info]  Response success for /system/disk-usage
[2021-05-14 15:51:44.010] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 15:51:44.013] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81735
}
[2021-05-14 15:52:00.574] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: true }
[2021-05-14 15:52:00.644] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-14 15:52:00.648] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-14 15:52:00.655] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-14 15:52:00.687] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-14 15:53:41.640] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-14 15:53:41.642] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-14 15:53:41.647] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-14 15:53:41.672] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-14 15:55:22.364] [info]  Response error for /desktop/cleanup: Request failed with status code 500
[2021-05-14 15:55:22.366] [error] !!! post /desktop/cleanup
[2021-05-14 15:55:22.369] [error] Error response from server
[2021-05-14 15:55:22.372] [error] Exception trying to execute middleware. See logs for details.

[2021-05-14 15:55:22.377] [error] 500
[2021-05-14 15:55:22.380] [error] {}
[2021-05-14 15:55:55.139] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 15:55:55.147] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 15:55:55.149] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 15:55:55.254] [info]  application ready
[2021-05-14 15:55:55.280] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:55:55.350] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 15:55:55.352] [info]  using production config /dashboard
[2021-05-14 15:55:55.387] [info]  ping received
[2021-05-14 15:55:55.420] [info]  Response success for /notifications/subscriptions
[2021-05-14 15:55:55.427] [info]  Response for POST /notifications/subscriptions
[2021-05-14 15:55:55.431] [verbose] 
[2021-05-14 15:55:56.082] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-14 15:55:56.283] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 15:55:56.377] [verbose] GET /features params = null
[2021-05-14 15:55:56.384] [verbose] GET /settings params = null
[2021-05-14 15:55:56.390] [verbose] GET /versions params = null
[2021-05-14 15:55:56.395] [verbose] GET /system/editor params = null
[2021-05-14 15:55:56.401] [verbose] GET /kubernetes params = null
[2021-05-14 15:55:56.406] [verbose] GET /registry/user params = null
[2021-05-14 15:55:56.411] [verbose] GET /docker params = null
[2021-05-14 15:55:56.416] [verbose] GET /update params = null
[2021-05-14 15:55:56.427] [info]  Response success for /features
[2021-05-14 15:55:56.432] [info]  Response for GET /features
[2021-05-14 15:55:56.436] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:55:56.503] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-14 15:55:57.689] [info]  Response success for /registry/user
[2021-05-14 15:55:57.690] [info]  Response for GET /registry/user
[2021-05-14 15:55:57.695] [verbose] { username: 'neuromancer0001' }
[2021-05-14 15:55:57.700] [info]  Response success for /docker
[2021-05-14 15:55:57.704] [info]  Response for GET /docker
[2021-05-14 15:55:57.709] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-14 15:55:57.715] [verbose] GET /features params = null
[2021-05-14 15:55:57.728] [info]  Response success for /usage
[2021-05-14 15:55:57.748] [info]  Response for POST /usage
[2021-05-14 15:55:57.753] [verbose] 
[2021-05-14 15:55:57.758] [info]  Response success for /update
[2021-05-14 15:55:57.767] [info]  Response for GET /update
[2021-05-14 15:55:57.771] [verbose] { updateAvailableTime: 0 }
[2021-05-14 15:55:57.780] [info]  Response success for /features
[2021-05-14 15:55:57.785] [info]  Response for GET /features
[2021-05-14 15:55:57.788] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:55:57.792] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-14 15:55:57.795] [info]  Response success for /settings
[2021-05-14 15:55:57.797] [info]  Response for GET /settings
[2021-05-14 15:55:57.800] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 15:55:57.806] [info]  Response success for /kubernetes
[2021-05-14 15:55:57.808] [info]  Response for GET /kubernetes
[2021-05-14 15:55:57.811] [verbose] { state: 'stopped', enabled: true }
[2021-05-14 15:55:57.845] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 15:55:57.943] [info]  Response success for /system/disk-usage
[2021-05-14 15:55:57.945] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 15:55:57.953] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81711
}
[2021-05-14 15:56:00.017] [info]  Response success for /versions
[2021-05-14 15:56:00.019] [info]  Response for GET /versions
[2021-05-14 15:56:00.301] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-14 15:56:25.460] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-14 15:56:27.630] [info]  Response success for /analytics/track
[2021-05-14 15:56:27.631] [info]  Response for POST /analytics/track
[2021-05-14 15:56:27.633] [verbose] 
[2021-05-14 15:57:11.877] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-14 15:57:12.906] [info]  Response success for /usage
[2021-05-14 15:57:12.907] [info]  Response for POST /usage
[2021-05-14 15:57:12.910] [verbose] 
[2021-05-14 15:57:13.694] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-14 15:57:13.709] [info]  Response success for /usage
[2021-05-14 15:57:13.711] [info]  Response for POST /usage
[2021-05-14 15:57:13.724] [verbose] 
[2021-05-14 15:57:13.733] [verbose] GET /registry/token params = null
[2021-05-14 15:57:13.736] [verbose] GET /registry/token params = null
[2021-05-14 15:57:13.747] [info]  Response success for /registry/token
[2021-05-14 15:57:13.750] [info]  Response for GET /registry/token
[2021-05-14 15:57:13.753] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-14 15:57:13.760] [info]  Response success for /registry/token
[2021-05-14 15:57:13.761] [info]  Response for GET /registry/token
[2021-05-14 15:57:13.763] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-14 15:57:14.263] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-14 15:57:14.265] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-14 15:57:15.007] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-14 15:57:15.009] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-14 15:57:15.018] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-14 15:57:15.026] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-14 15:57:15.033] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-14 15:57:15.039] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-14 15:57:15.044] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-14 15:57:15.405] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-14 15:57:15.406] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 15:57:15.417] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-14 15:57:15.418] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 15:57:15.422] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-14 15:57:15.423] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-14 15:57:15.433] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-14 15:57:15.434] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 15:57:15.439] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-14 15:57:15.440] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-14 15:57:15.473] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-14 15:57:15.476] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-14 15:57:15.479] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-14 15:57:15.483] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-14 15:57:15.486] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-14 15:57:15.893] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-14 15:57:15.895] [verbose] 
[2021-05-14 15:57:15.902] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-14 15:57:15.909] [verbose] 
[2021-05-14 15:57:15.916] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-14 15:57:15.919] [verbose] 
[2021-05-14 15:57:15.924] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-14 15:57:15.925] [verbose] 
[2021-05-14 15:57:15.931] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-14 15:57:15.932] [verbose] 
[2021-05-14 15:57:20.762] [verbose] POST /usage data = { command: 'imageRemotePull', count: 1 }
[2021-05-14 15:57:20.773] [info]  Response success for /usage
[2021-05-14 15:57:20.774] [info]  Response for POST /usage
[2021-05-14 15:57:20.776] [verbose] 
[2021-05-14 15:57:24.686] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 15:57:24.698] [info]  Response success for /usage
[2021-05-14 15:57:24.700] [info]  Response for POST /usage
[2021-05-14 15:57:24.704] [verbose] 
[2021-05-14 15:57:33.961] [verbose] GET /settings params = null
[2021-05-14 15:57:33.963] [verbose] GET /features params = null
[2021-05-14 15:57:33.969] [info]  Response success for /features
[2021-05-14 15:57:33.971] [info]  Response for GET /features
[2021-05-14 15:57:33.975] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 15:57:33.985] [info]  Response success for /settings
[2021-05-14 15:57:33.986] [info]  Response for GET /settings
[2021-05-14 15:57:33.989] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 15:57:34.001] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 15:57:34.015] [info]  Response success for /system/disk-usage
[2021-05-14 15:57:34.016] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 15:57:34.019] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81700
}
[2021-05-14 15:57:45.562] [verbose] POST /diagnostics/gather data = null
[2021-05-14 15:57:45.569] [info]  Response success for /diagnostics/gather
[2021-05-14 15:57:45.580] [info]  Response for POST /diagnostics/gather
[2021-05-14 15:57:45.585] [verbose] {
  id: '5F6D035B-6A45-4D55-B1A0-36391A1FC0DF/20210514135745',
  path: 'C:\\Users\\Neuro\\AppData\\Local\\Temp\\5F6D035B-6A45-4D55-B1A0-36391A1FC0DF\\20210514135745.zip',
  status: ''
}
[2021-05-14 15:57:50.567] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:57:50.570] [info]  Response success for /diagnostics/status
[2021-05-14 15:57:50.571] [info]  Response for GET /diagnostics/status
[2021-05-14 15:57:50.574] [verbose] { status: 'running' }
[2021-05-14 15:57:56.287] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:57:56.292] [info]  Response success for /diagnostics/status
[2021-05-14 15:57:56.295] [info]  Response for GET /diagnostics/status
[2021-05-14 15:57:56.298] [verbose] { status: 'running' }
[2021-05-14 15:58:01.281] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:01.284] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:01.285] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:01.287] [verbose] { status: 'running' }
[2021-05-14 15:58:06.285] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:06.289] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:06.293] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:06.298] [verbose] { status: 'running' }
[2021-05-14 15:58:11.283] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:11.290] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:11.295] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:11.301] [verbose] { status: 'running' }
[2021-05-14 15:58:16.288] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:16.291] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:16.292] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:16.296] [verbose] { status: 'running' }
[2021-05-14 15:58:21.286] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:21.290] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:21.293] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:21.296] [verbose] { status: 'running' }
[2021-05-14 15:58:26.292] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:26.296] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:26.298] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:26.301] [verbose] { status: 'running' }
[2021-05-14 15:58:31.281] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:31.284] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:31.292] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:31.298] [verbose] { status: 'running' }
[2021-05-14 15:58:35.602] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:35.661] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:35.713] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:35.719] [verbose] { status: 'running' }
[2021-05-14 15:58:40.563] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:40.582] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:40.632] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:40.638] [verbose] { status: 'running' }
[2021-05-14 15:58:45.572] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:45.592] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:45.600] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:45.643] [verbose] { status: 'running' }
[2021-05-14 15:58:50.606] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:50.629] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:59.421] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:59.440] [verbose] { status: 'running' }
[2021-05-14 15:58:59.458] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:58:59.500] [info]  Response success for /diagnostics/status
[2021-05-14 15:58:59.516] [info]  Response for GET /diagnostics/status
[2021-05-14 15:58:59.549] [verbose] { status: 'running' }
[2021-05-14 15:59:00.583] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:00.596] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:00.608] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:00.623] [verbose] { status: 'running' }
[2021-05-14 15:59:05.584] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:05.593] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:05.613] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:05.633] [verbose] { status: 'running' }
[2021-05-14 15:59:10.561] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:10.570] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:10.590] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:10.595] [verbose] { status: 'running' }
[2021-05-14 15:59:15.575] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:15.581] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:15.600] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:15.605] [verbose] { status: 'running' }
[2021-05-14 15:59:20.567] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:23.784] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:23.789] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:23.796] [verbose] { status: 'running' }
[2021-05-14 15:59:25.561] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:25.568] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:25.574] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:25.581] [verbose] { status: 'running' }
[2021-05-14 15:59:30.564] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:30.576] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:30.597] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:30.605] [verbose] { status: 'running' }
[2021-05-14 15:59:35.580] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:35.587] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:36.105] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:36.112] [verbose] { status: 'running' }
[2021-05-14 15:59:40.619] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:43.181] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:43.186] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:43.192] [verbose] { status: 'running' }
[2021-05-14 15:59:45.589] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:46.720] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:46.730] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:46.735] [verbose] { status: 'running' }
[2021-05-14 15:59:50.615] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:50.650] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:52.259] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:52.268] [verbose] { status: 'running' }
[2021-05-14 15:59:55.597] [verbose] GET /diagnostics/status params = null
[2021-05-14 15:59:55.682] [info]  Response success for /diagnostics/status
[2021-05-14 15:59:57.471] [info]  Response for GET /diagnostics/status
[2021-05-14 15:59:57.477] [verbose] { status: 'running' }
[2021-05-14 16:00:00.608] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:00.968] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:00.977] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:00.989] [verbose] { status: 'running' }
[2021-05-14 16:00:05.607] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:05.636] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:06.871] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:06.883] [verbose] { status: 'running' }
[2021-05-14 16:00:10.730] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:10.903] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:14.691] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:14.712] [verbose] { status: 'running' }
[2021-05-14 16:00:15.657] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:17.638] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:21.495] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:21.511] [verbose] { status: 'running' }
[2021-05-14 16:00:21.519] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:21.532] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:21.540] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:21.547] [verbose] { status: 'running' }
[2021-05-14 16:00:25.561] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:25.570] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:25.591] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:25.600] [verbose] { status: 'running' }
[2021-05-14 16:00:30.568] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:30.595] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:30.612] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:30.618] [verbose] { status: 'running' }
[2021-05-14 16:00:35.625] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:35.747] [info]  Response success for /diagnostics/status
[2021-05-14 16:00:59.546] [info]  Response for GET /diagnostics/status
[2021-05-14 16:00:59.592] [verbose] { status: 'running' }
[2021-05-14 16:00:59.844] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:00:59.963] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:00.161] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:00.364] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:00.516] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:00.682] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:00.818] [verbose] { status: 'running' }
[2021-05-14 16:01:01.011] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:01.206] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:01.305] [verbose] { status: 'running' }
[2021-05-14 16:01:01.495] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:01.668] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:01.833] [verbose] { status: 'running' }
[2021-05-14 16:01:01.949] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:02.068] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:02.223] [verbose] { status: 'running' }
[2021-05-14 16:01:11.291] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:56.595] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:56.751] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:56.757] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:56.930] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.127] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.228] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.384] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.589] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.596] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:01:57.825] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:57.900] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:58.124] [verbose] { status: 'running' }
[2021-05-14 16:01:58.318] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:58.375] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:58.594] [verbose] { status: 'running' }
[2021-05-14 16:01:58.822] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:58.910] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:58.914] [verbose] { status: 'running' }
[2021-05-14 16:01:59.173] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:59.365] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:59.462] [verbose] { status: 'running' }
[2021-05-14 16:01:59.584] [info]  Response success for /diagnostics/status
[2021-05-14 16:01:59.735] [info]  Response for GET /diagnostics/status
[2021-05-14 16:01:59.844] [verbose] { status: 'running' }
[2021-05-14 16:02:00.001] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:00.078] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:00.279] [verbose] { status: 'running' }
[2021-05-14 16:02:00.447] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:00.619] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:00.714] [verbose] { status: 'running' }
[2021-05-14 16:02:00.877] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:01.026] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:01.190] [verbose] { status: 'running' }
[2021-05-14 16:02:01.307] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:01.452] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:01.558] [verbose] { status: 'running' }
[2021-05-14 16:02:01.791] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:02.048] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:02.193] [verbose] { status: 'running' }
[2021-05-14 16:02:03.470] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:03.619] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:03.678] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:03.825] [verbose] { status: 'running' }
[2021-05-14 16:02:06.286] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:06.448] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:06.454] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:06.513] [verbose] { status: 'running' }
[2021-05-14 16:02:11.286] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:11.443] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:11.448] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:11.601] [verbose] { status: 'running' }
[2021-05-14 16:02:17.722] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:17.792] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:17.987] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:19.511] [verbose] { status: 'running' }
[2021-05-14 16:02:21.278] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:21.482] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:21.537] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:21.736] [verbose] { status: 'running' }
[2021-05-14 16:02:26.277] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:55.860] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:55.944] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:56.168] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:56.397] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:56.684] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:56.884] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:02:57.105] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:57.187] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:57.492] [verbose] { status: 'running' }
[2021-05-14 16:02:57.621] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:57.755] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:57.853] [verbose] { status: 'running' }
[2021-05-14 16:02:57.977] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:58.127] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:58.325] [verbose] { status: 'running' }
[2021-05-14 16:02:58.365] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:58.570] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:58.733] [verbose] { status: 'running' }
[2021-05-14 16:02:58.856] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:58.872] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:59.012] [verbose] { status: 'running' }
[2021-05-14 16:02:59.127] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:59.259] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:59.360] [verbose] { status: 'running' }
[2021-05-14 16:02:59.477] [info]  Response success for /diagnostics/status
[2021-05-14 16:02:59.488] [info]  Response for GET /diagnostics/status
[2021-05-14 16:02:59.609] [verbose] { status: 'running' }
[2021-05-14 16:03:12.344] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:12.757] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:55.274] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:55.431] [verbose] { status: 'running' }
[2021-05-14 16:03:55.554] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:55.704] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:55.848] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.034] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.152] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.295] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.498] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.598] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.720] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:03:56.792] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:56.937] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:57.138] [verbose] { status: 'running' }
[2021-05-14 16:03:57.262] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:57.403] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:57.591] [verbose] { status: 'running' }
[2021-05-14 16:03:57.674] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:57.824] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:58.005] [verbose] { status: 'running' }
[2021-05-14 16:03:58.099] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:58.290] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:58.492] [verbose] { status: 'running' }
[2021-05-14 16:03:58.553] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:58.767] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:59.002] [verbose] { status: 'running' }
[2021-05-14 16:03:59.057] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:59.270] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:59.476] [verbose] { status: 'running' }
[2021-05-14 16:03:59.540] [info]  Response success for /diagnostics/status
[2021-05-14 16:03:59.709] [info]  Response for GET /diagnostics/status
[2021-05-14 16:03:59.767] [verbose] { status: 'running' }
[2021-05-14 16:03:59.974] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:00.141] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:00.255] [verbose] { status: 'running' }
[2021-05-14 16:04:00.411] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:00.519] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:00.656] [verbose] { status: 'running' }
[2021-05-14 16:04:04.596] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:04.847] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:42.705] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:43.375] [verbose] { status: 'running' }
[2021-05-14 16:04:43.856] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:44.372] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:44.705] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:45.164] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:45.609] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:45.804] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:46.184] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:46.533] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:46.562] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:46.566] [verbose] { status: 'running' }
[2021-05-14 16:04:46.992] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:46.997] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:47.542] [verbose] { status: 'running' }
[2021-05-14 16:04:48.010] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:48.447] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:48.891] [verbose] { status: 'running' }
[2021-05-14 16:04:49.330] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:50.151] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:50.641] [verbose] { status: 'running' }
[2021-05-14 16:04:51.027] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:51.538] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:51.980] [verbose] { status: 'running' }
[2021-05-14 16:04:52.498] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:52.864] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:53.384] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:53.863] [verbose] { status: 'running' }
[2021-05-14 16:04:54.384] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:54.880] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:55.403] [verbose] { status: 'running' }
[2021-05-14 16:04:55.779] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:56.230] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:56.692] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:57.246] [verbose] { status: 'running' }
[2021-05-14 16:04:57.741] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:04:58.048] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:58.398] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:58.808] [verbose] { status: 'running' }
[2021-05-14 16:04:59.342] [info]  Response success for /diagnostics/status
[2021-05-14 16:04:59.450] [info]  Response for GET /diagnostics/status
[2021-05-14 16:04:59.837] [verbose] { status: 'running' }
[2021-05-14 16:05:08.731] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:38.015] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:38.546] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:40.546] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:43.553] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:45.764] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:47.307] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:49.482] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:50.521] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:51.482] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:52.265] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:52.697] [verbose] { status: 'running' }
[2021-05-14 16:05:53.084] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:05:53.612] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:54.150] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:54.827] [verbose] { status: 'running' }
[2021-05-14 16:05:55.268] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:55.623] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:55.931] [verbose] { status: 'running' }
[2021-05-14 16:05:56.180] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:56.475] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:56.807] [verbose] { status: 'running' }
[2021-05-14 16:05:57.181] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:57.538] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:57.862] [verbose] { status: 'running' }
[2021-05-14 16:05:58.261] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:58.654] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:58.960] [verbose] { status: 'running' }
[2021-05-14 16:05:59.142] [info]  Response success for /diagnostics/status
[2021-05-14 16:05:59.545] [info]  Response for GET /diagnostics/status
[2021-05-14 16:05:59.910] [verbose] { status: 'running' }
[2021-05-14 16:06:00.197] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:00.785] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:01.089] [verbose] { status: 'running' }
[2021-05-14 16:06:01.818] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:02.247] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:02.687] [verbose] { status: 'running' }
[2021-05-14 16:06:03.023] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:03.763] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:04.271] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:04.699] [verbose] { status: 'running' }
[2021-05-14 16:06:05.783] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:06.012] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:06.417] [verbose] { status: 'running' }
[2021-05-14 16:06:06.657] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:07.479] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:07.599] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:07.954] [verbose] { status: 'running' }
[2021-05-14 16:06:11.278] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:44.041] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:44.475] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:45.051] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:45.367] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:50.275] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:50.940] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:51.440] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:51.827] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:52.157] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:52.557] [verbose] { status: 'running' }
[2021-05-14 16:06:52.742] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:06:52.976] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:53.208] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:53.438] [verbose] { status: 'running' }
[2021-05-14 16:06:53.671] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:53.969] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:54.170] [verbose] { status: 'running' }
[2021-05-14 16:06:54.467] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:54.733] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:54.985] [verbose] { status: 'running' }
[2021-05-14 16:06:55.248] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:55.519] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:55.773] [verbose] { status: 'running' }
[2021-05-14 16:06:55.905] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:56.143] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:56.371] [verbose] { status: 'running' }
[2021-05-14 16:06:56.539] [info]  Response success for /diagnostics/status
[2021-05-14 16:06:56.728] [info]  Response for GET /diagnostics/status
[2021-05-14 16:06:56.939] [verbose] { status: 'running' }
[2021-05-14 16:06:57.005] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:19.576] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:20.675] [verbose] { status: 'running' }
[2021-05-14 16:07:21.306] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:21.798] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:22.114] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:22.419] [verbose] { status: 'running' }
[2021-05-14 16:07:23.892] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:25.828] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:26.326] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:26.577] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:26.764] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:26.937] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:27.217] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:27.258] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:27.417] [verbose] { status: 'running' }
[2021-05-14 16:07:27.481] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:27.759] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:28.007] [verbose] { status: 'running' }
[2021-05-14 16:07:28.266] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:28.540] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:29.478] [verbose] { status: 'running' }
[2021-05-14 16:07:30.060] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:30.383] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:30.868] [verbose] { status: 'running' }
[2021-05-14 16:07:31.216] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:31.338] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:31.741] [verbose] { status: 'running' }
[2021-05-14 16:07:32.002] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:32.442] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:32.687] [verbose] { status: 'running' }
[2021-05-14 16:07:33.173] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:07:33.488] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:33.732] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:34.044] [verbose] { status: 'running' }
[2021-05-14 16:07:34.763] [info]  Response success for /diagnostics/status
[2021-05-14 16:07:35.025] [info]  Response for GET /diagnostics/status
[2021-05-14 16:07:35.436] [verbose] { status: 'running' }
[2021-05-14 16:07:35.874] [verbose] GET /diagnostics/status params = null
[2021-05-14 16:59:41.750] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 16:59:41.784] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 16:59:42.216] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 16:59:45.250] [info]  application ready
[2021-05-14 16:59:45.734] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 16:59:46.954] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 16:59:47.453] [info]  using production config /dashboard
[2021-05-14 16:59:48.215] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 16:59:50.880] [info]  application ready
[2021-05-14 16:59:51.367] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 16:59:52.517] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 16:59:52.990] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-14 16:59:53.141] [info]  using production config /dashboard
[2021-05-14 16:59:53.960] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 16:59:54.251] [verbose] GET /features params = null
[2021-05-14 16:59:54.679] [verbose] GET /settings params = null
[2021-05-14 16:59:55.404] [verbose] GET /versions params = null
[2021-05-14 16:59:56.035] [verbose] GET /system/editor params = null
[2021-05-14 16:59:56.713] [verbose] GET /kubernetes params = null
[2021-05-14 16:59:57.233] [verbose] GET /registry/user params = null
[2021-05-14 16:59:57.773] [verbose] GET /docker params = null
[2021-05-14 16:59:58.341] [verbose] GET /update params = null
[2021-05-14 16:59:59.533] [info]  Response success for /usage
[2021-05-14 16:59:59.541] [info]  Response for POST /usage
[2021-05-14 17:00:00.042] [verbose] 
[2021-05-14 17:00:00.468] [info]  ping received
[2021-05-14 17:00:01.029] [info]  Response success for /features
[2021-05-14 17:00:01.510] [info]  Response for GET /features
[2021-05-14 17:00:01.803] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 17:00:02.359] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-14 17:00:02.794] [info]  Response success for /kubernetes
[2021-05-14 17:00:03.260] [info]  Response for GET /kubernetes
[2021-05-14 17:00:03.697] [verbose] { state: 'stopped', enabled: true }
[2021-05-14 17:00:04.176] [info]  Response success for /docker
[2021-05-14 17:00:04.718] [info]  Response for GET /docker
[2021-05-14 17:00:05.159] [verbose] { state: 'stopped', mode: 'linux' }
[2021-05-14 17:00:05.654] [info]  Response success for /registry/user
[2021-05-14 17:00:06.209] [info]  Response for GET /registry/user
[2021-05-14 17:00:06.761] [verbose] { username: 'neuromancer0001' }
[2021-05-14 17:00:07.328] [info]  ping received
[2021-05-14 17:00:07.914] [info]  Response success for /update
[2021-05-14 17:00:08.555] [info]  Response for GET /update
[2021-05-14 17:00:09.152] [verbose] { updateAvailableTime: 0 }
[2021-05-14 17:00:09.758] [info]  Response success for /settings
[2021-05-14 17:00:10.355] [info]  Response for GET /settings
[2021-05-14 17:00:10.984] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 17:00:11.746] [info]  Response error for /notifications/subscriptions: Request failed with status code 400
[2021-05-14 17:00:12.020] [error] !!! post /notifications/subscriptions
[2021-05-14 17:00:12.646] [error] Error response from server
[2021-05-14 17:00:13.218] [error] {
  message: 'Could not connect to requested named pipe: dockerFrontendApiServer. Is the server listening? System.Threading.Tasks.TaskCanceledException: Cancellation token triggered before we finished reading from the stream.'
}
[2021-05-14 17:00:13.977] [error] 400
[2021-05-14 17:00:14.601] [error] {
  'content-type': 'application/json; charset=utf-8',
  'content-length': '225'
}
[2021-05-14 17:00:15.298] [error] notification-subscribe error Bad Request
[2021-05-14 17:00:17.082] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-14 17:00:17.463] [verbose] GET /features params = null
[2021-05-14 17:00:18.211] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 17:00:19.336] [info]  Response success for /system/disk-usage
[2021-05-14 17:00:19.628] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 17:00:19.634] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81329
}
[2021-05-14 17:00:27.024] [info]  Response success for /features
[2021-05-14 17:00:27.333] [info]  Response for GET /features
[2021-05-14 17:00:27.978] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 17:00:44.010] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-14 17:00:44.542] [info]  Response success for /usage
[2021-05-14 17:00:44.892] [info]  Response for POST /usage
[2021-05-14 17:00:45.581] [verbose] 
[2021-05-14 17:01:17.941] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-14 17:01:24.450] [info]  Response success for /versions
[2021-05-14 17:01:24.930] [info]  Response for GET /versions
[2021-05-14 17:01:25.659] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-14 17:01:31.540] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-14 17:01:41.350] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-14 17:01:48.272] [verbose] GET /settings params = null
[2021-05-14 17:01:48.356] [verbose] GET /features params = null
[2021-05-14 17:01:49.021] [info]  Response success for /features
[2021-05-14 17:01:49.235] [info]  Response for GET /features
[2021-05-14 17:01:49.659] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 17:02:14.404] [info]  Response success for /settings
[2021-05-14 17:02:14.594] [info]  Response for GET /settings
[2021-05-14 17:02:14.995] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 17:02:20.614] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 17:02:26.348] [info]  Response success for /system/disk-usage
[2021-05-14 17:02:26.451] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 17:02:26.650] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 81323
}
[2021-05-14 17:45:28.654] [verbose] POST /desktop/factory-reset data = null
[2021-05-14 17:45:52.992] [verbose] GET /settings params = null
[2021-05-14 17:45:53.876] [verbose] GET /features params = null
[2021-05-14 17:45:55.316] [info]  Response success for /features
[2021-05-14 17:45:55.713] [info]  Response for GET /features
[2021-05-14 17:45:56.789] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 17:46:01.063] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-14 17:46:02.583] [info]  Response success for /usage
[2021-05-14 17:46:03.064] [info]  Response for POST /usage
[2021-05-14 17:46:03.710] [verbose] 
[2021-05-14 17:46:04.565] [info]  Response success for /desktop/factory-reset
[2021-05-14 17:46:04.984] [info]  Response for POST /desktop/factory-reset
[2021-05-14 17:46:05.850] [verbose] 
[2021-05-14 17:46:07.207] [info]  Response success for /settings
[2021-05-14 17:46:08.144] [info]  Response for GET /settings
[2021-05-14 17:46:09.270] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 17:46:10.829] [info]  quitting application
[2021-05-14 17:46:11.868] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 17:46:12.652] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 17:53:44.044] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 17:53:45.472] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 17:53:46.882] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 17:54:01.096] [info]  application ready
[2021-05-14 17:54:03.043] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 17:54:13.664] [info]  application ready
[2021-05-14 17:54:15.092] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 17:54:28.757] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 17:54:31.375] [info]  using production config /settings
[2021-05-14 21:25:19.971] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 21:25:19.998] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 21:25:20.014] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 21:25:20.271] [info]  application ready
[2021-05-14 21:25:20.325] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 21:25:20.629] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 21:25:20.638] [info]  using production config /dashboard
[2021-05-14 21:25:20.791] [info]  ping received
[2021-05-14 21:25:20.925] [info]  Response success for /notifications/subscriptions
[2021-05-14 21:25:20.926] [info]  Response for POST /notifications/subscriptions
[2021-05-14 21:25:20.947] [verbose] 
[2021-05-14 21:25:23.023] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-14 21:25:23.273] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 21:25:23.299] [info]  Response success for /usage
[2021-05-14 21:25:23.300] [info]  Response for POST /usage
[2021-05-14 21:25:23.323] [verbose] 
[2021-05-14 21:25:23.362] [verbose] GET /features params = null
[2021-05-14 21:25:23.365] [verbose] GET /settings params = null
[2021-05-14 21:25:23.379] [verbose] GET /versions params = null
[2021-05-14 21:25:23.389] [verbose] GET /system/editor params = null
[2021-05-14 21:25:23.400] [verbose] GET /kubernetes params = null
[2021-05-14 21:25:23.404] [verbose] GET /registry/user params = null
[2021-05-14 21:25:23.407] [verbose] GET /docker params = null
[2021-05-14 21:25:23.409] [verbose] GET /update params = null
[2021-05-14 21:25:23.434] [info]  Response success for /features
[2021-05-14 21:25:23.447] [info]  Response for GET /features
[2021-05-14 21:25:23.460] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 21:25:23.484] [info]  Response success for /registry/user
[2021-05-14 21:25:23.491] [info]  Response for GET /registry/user
[2021-05-14 21:25:23.495] [verbose] { username: 'neuromancer0001' }
[2021-05-14 21:25:23.510] [info]  Response success for /settings
[2021-05-14 21:25:23.514] [info]  Response for GET /settings
[2021-05-14 21:25:23.524] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 21:25:23.546] [info]  Response success for /kubernetes
[2021-05-14 21:25:23.548] [info]  Response for GET /kubernetes
[2021-05-14 21:25:23.550] [verbose] { state: 'stopped', enabled: false }
[2021-05-14 21:25:23.554] [info]  Response success for /docker
[2021-05-14 21:25:23.556] [info]  Response for GET /docker
[2021-05-14 21:25:23.559] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-14 21:25:23.572] [info]  Response success for /update
[2021-05-14 21:25:23.575] [info]  Response for GET /update
[2021-05-14 21:25:23.579] [verbose] { updateAvailableTime: 0 }
[2021-05-14 21:25:23.738] [verbose] GET /features params = null
[2021-05-14 21:25:23.762] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 21:25:23.870] [info]  Response success for /features
[2021-05-14 21:25:23.897] [info]  Response for GET /features
[2021-05-14 21:25:23.920] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 21:25:23.930] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-14 21:25:23.984] [info]  Response success for /system/disk-usage
[2021-05-14 21:25:23.986] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 21:25:23.990] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 76619
}
[2021-05-14 21:25:24.008] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-14 21:25:26.127] [info]  Response success for /versions
[2021-05-14 21:25:26.128] [info]  Response for GET /versions
[2021-05-14 21:25:26.131] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-14 21:26:24.934] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-14 21:26:24.947] [info]  Response success for /usage
[2021-05-14 21:26:24.948] [info]  Response for POST /usage
[2021-05-14 21:26:24.950] [verbose] 
[2021-05-14 21:26:28.186] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-14 21:26:28.198] [info]  Response success for /usage
[2021-05-14 21:26:28.199] [info]  Response for POST /usage
[2021-05-14 21:26:28.203] [verbose] 
[2021-05-14 21:26:28.213] [verbose] GET /registry/token params = null
[2021-05-14 21:26:28.215] [verbose] GET /registry/token params = null
[2021-05-14 21:26:28.226] [info]  Response success for /registry/token
[2021-05-14 21:26:28.227] [info]  Response for GET /registry/token
[2021-05-14 21:26:28.229] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-14 21:26:28.236] [info]  Response success for /registry/token
[2021-05-14 21:26:28.238] [info]  Response for GET /registry/token
[2021-05-14 21:26:28.243] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-14 21:26:28.759] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-14 21:26:28.761] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-14 21:26:29.224] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-14 21:26:29.225] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-14 21:26:29.232] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-14 21:26:29.242] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-14 21:26:29.246] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-14 21:26:29.253] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-14 21:26:29.256] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-14 21:26:29.749] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-14 21:26:29.751] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 21:26:29.758] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-14 21:26:29.761] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 21:26:29.768] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-14 21:26:29.771] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-14 21:26:29.777] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-14 21:26:29.780] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-14 21:26:29.785] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-14 21:26:29.786] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-14 21:26:29.819] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-14 21:26:29.822] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-14 21:26:29.826] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-14 21:26:29.829] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-14 21:26:29.832] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-14 21:26:30.269] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-14 21:26:30.271] [verbose] 
[2021-05-14 21:26:30.282] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-14 21:26:30.289] [verbose] 
[2021-05-14 21:26:30.295] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-14 21:26:30.315] [verbose] 
[2021-05-14 21:26:30.320] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-14 21:26:30.322] [verbose] 
[2021-05-14 21:26:30.325] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-14 21:26:30.327] [verbose] 
[2021-05-14 21:26:41.123] [verbose] GET /settings params = null
[2021-05-14 21:26:41.125] [verbose] GET /features params = null
[2021-05-14 21:26:41.134] [info]  Response success for /features
[2021-05-14 21:26:41.138] [info]  Response for GET /features
[2021-05-14 21:26:41.141] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 21:26:41.148] [info]  Response success for /settings
[2021-05-14 21:26:41.151] [info]  Response for GET /settings
[2021-05-14 21:26:41.155] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 21:26:41.169] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 21:26:41.187] [info]  Response success for /system/disk-usage
[2021-05-14 21:26:41.190] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 21:26:41.194] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 76555
}
[2021-05-14 21:26:47.905] [verbose] POST /diagnostics/gather data = null
[2021-05-14 21:26:47.914] [info]  Response success for /diagnostics/gather
[2021-05-14 21:26:47.918] [info]  Response for POST /diagnostics/gather
[2021-05-14 21:26:47.923] [verbose] {
  id: '5F6D035B-6A45-4D55-B1A0-36391A1FC0DF/20210514192647',
  path: 'C:\\Users\\Neuro\\AppData\\Local\\Temp\\5F6D035B-6A45-4D55-B1A0-36391A1FC0DF\\20210514192647.zip',
  status: ''
}
[2021-05-14 21:26:52.910] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:26:52.915] [info]  Response success for /diagnostics/status
[2021-05-14 21:26:52.919] [info]  Response for GET /diagnostics/status
[2021-05-14 21:26:52.924] [verbose] { status: 'running' }
[2021-05-14 21:26:57.906] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:26:57.911] [info]  Response success for /diagnostics/status
[2021-05-14 21:26:57.932] [info]  Response for GET /diagnostics/status
[2021-05-14 21:26:57.935] [verbose] { status: 'running' }
[2021-05-14 21:27:03.363] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:03.369] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:03.385] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:03.398] [verbose] { status: 'running' }
[2021-05-14 21:27:08.367] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:08.371] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:08.550] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:08.569] [verbose] { status: 'running' }
[2021-05-14 21:27:13.289] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:13.294] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:13.308] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:13.313] [verbose] { status: 'running' }
[2021-05-14 21:27:18.438] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:18.444] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:18.453] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:18.459] [verbose] { status: 'running' }
[2021-05-14 21:27:22.906] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:22.910] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:22.914] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:22.917] [verbose] { status: 'running' }
[2021-05-14 21:27:27.906] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:27.910] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:27.917] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:27.920] [verbose] { status: 'running' }
[2021-05-14 21:27:33.354] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:33.359] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:33.396] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:33.402] [verbose] { status: 'running' }
[2021-05-14 21:27:38.383] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:38.392] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:38.410] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:38.414] [verbose] { status: 'running' }
[2021-05-14 21:27:43.280] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:43.283] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:43.292] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:43.298] [verbose] { status: 'running' }
[2021-05-14 21:27:48.314] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:48.318] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:48.321] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:48.326] [verbose] { status: 'running' }
[2021-05-14 21:27:53.368] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:53.371] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:53.911] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:53.916] [verbose] { status: 'running' }
[2021-05-14 21:27:58.292] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:27:58.295] [info]  Response success for /diagnostics/status
[2021-05-14 21:27:58.315] [info]  Response for GET /diagnostics/status
[2021-05-14 21:27:58.318] [verbose] { status: 'running' }
[2021-05-14 21:28:03.292] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:03.295] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:03.320] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:03.324] [verbose] { status: 'running' }
[2021-05-14 21:28:08.299] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:08.304] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:08.314] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:08.318] [verbose] { status: 'running' }
[2021-05-14 21:28:13.292] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:13.296] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:13.301] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:13.305] [verbose] { status: 'running' }
[2021-05-14 21:28:18.296] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:18.301] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:18.306] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:18.316] [verbose] { status: 'running' }
[2021-05-14 21:28:23.303] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:23.306] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:23.317] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:23.321] [verbose] { status: 'running' }
[2021-05-14 21:28:28.290] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:28.294] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:28.347] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:28.351] [verbose] { status: 'running' }
[2021-05-14 21:28:33.374] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:33.378] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:33.415] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:33.421] [verbose] { status: 'running' }
[2021-05-14 21:28:38.302] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:38.307] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:38.344] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:38.350] [verbose] { status: 'running' }
[2021-05-14 21:28:43.290] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:43.294] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:43.343] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:43.348] [verbose] { status: 'running' }
[2021-05-14 21:28:48.323] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:48.327] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:48.339] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:48.343] [verbose] { status: 'running' }
[2021-05-14 21:28:53.284] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:53.289] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:53.334] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:53.339] [verbose] { status: 'running' }
[2021-05-14 21:28:58.288] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:28:58.292] [info]  Response success for /diagnostics/status
[2021-05-14 21:28:58.309] [info]  Response for GET /diagnostics/status
[2021-05-14 21:28:58.314] [verbose] { status: 'running' }
[2021-05-14 21:29:03.304] [verbose] GET /diagnostics/status params = null
[2021-05-14 21:29:03.308] [info]  Response success for /diagnostics/status
[2021-05-14 21:29:03.346] [info]  Response for GET /diagnostics/status
[2021-05-14 21:29:03.351] [verbose] { status: 'ready' }
[2021-05-14 21:55:19.557] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-14 21:55:19.561] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-14 21:55:19.588] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-14 21:55:19.622] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-14 22:27:51.934] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-05-14 22:27:51.937] [info]  engine state notification { state: 'stopped', mode: 'linux' }
[2021-05-14 22:27:51.944] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-05-14 22:27:52.028] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-14 22:28:28.250] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-14 22:28:28.262] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-14 22:28:28.265] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-14 22:28:28.355] [info]  application ready
[2021-05-14 22:28:28.386] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 22:28:28.480] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-14 22:28:28.482] [info]  using production config /dashboard
[2021-05-14 22:28:28.546] [info]  ping received
[2021-05-14 22:28:28.730] [info]  Response success for /notifications/subscriptions
[2021-05-14 22:28:28.753] [info]  Response for POST /notifications/subscriptions
[2021-05-14 22:28:28.758] [verbose] 
[2021-05-14 22:28:29.520] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-14 22:28:29.804] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-14 22:28:29.843] [info]  Response success for /usage
[2021-05-14 22:28:29.889] [info]  Response for POST /usage
[2021-05-14 22:28:29.901] [verbose] 
[2021-05-14 22:28:29.937] [verbose] GET /features params = null
[2021-05-14 22:28:29.971] [verbose] GET /settings params = null
[2021-05-14 22:28:29.993] [verbose] GET /versions params = null
[2021-05-14 22:28:30.009] [verbose] GET /system/editor params = null
[2021-05-14 22:28:30.018] [verbose] GET /kubernetes params = null
[2021-05-14 22:28:30.027] [verbose] GET /registry/user params = null
[2021-05-14 22:28:30.036] [verbose] GET /docker params = null
[2021-05-14 22:28:30.053] [verbose] GET /update params = null
[2021-05-14 22:28:30.072] [info]  Response success for /features
[2021-05-14 22:28:30.145] [info]  Response for GET /features
[2021-05-14 22:28:30.152] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 22:28:30.192] [info]  Response success for /docker
[2021-05-14 22:28:30.212] [info]  Response for GET /docker
[2021-05-14 22:28:30.236] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-14 22:28:30.244] [info]  Response success for /update
[2021-05-14 22:28:30.250] [info]  Response for GET /update
[2021-05-14 22:28:30.255] [verbose] { updateAvailableTime: 0 }
[2021-05-14 22:28:30.264] [info]  Response success for /kubernetes
[2021-05-14 22:28:30.271] [info]  Response for GET /kubernetes
[2021-05-14 22:28:30.277] [verbose] { state: 'stopped', enabled: false }
[2021-05-14 22:28:30.283] [info]  Response success for /registry/user
[2021-05-14 22:28:30.289] [info]  Response for GET /registry/user
[2021-05-14 22:28:30.298] [verbose] { username: 'neuromancer0001' }
[2021-05-14 22:28:30.306] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-14 22:28:30.316] [info]  Response success for /settings
[2021-05-14 22:28:30.318] [info]  Response for GET /settings
[2021-05-14 22:28:30.322] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 22:28:30.332] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-14 22:28:30.339] [verbose] GET /features params = null
[2021-05-14 22:28:30.344] [info]  Response success for /features
[2021-05-14 22:28:30.347] [info]  Response for GET /features
[2021-05-14 22:28:30.351] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 22:28:30.370] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 22:28:30.492] [info]  Response success for /system/disk-usage
[2021-05-14 22:28:30.493] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 22:28:30.506] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 74187
}
[2021-05-14 22:28:32.973] [info]  Response success for /versions
[2021-05-14 22:28:32.974] [info]  Response for GET /versions
[2021-05-14 22:28:32.978] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-14 22:30:03.115] [verbose] GET /settings params = null
[2021-05-14 22:30:03.120] [verbose] GET /features params = null
[2021-05-14 22:30:03.133] [info]  Response success for /features
[2021-05-14 22:30:03.134] [info]  Response for GET /features
[2021-05-14 22:30:03.138] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-14 22:30:04.157] [info]  Response success for /settings
[2021-05-14 22:30:04.159] [info]  Response for GET /settings
[2021-05-14 22:30:04.162] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-14 22:30:04.167] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-14 22:30:04.185] [info]  Response success for /system/disk-usage
[2021-05-14 22:30:04.187] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-14 22:30:04.190] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 74140
}
[2021-05-15 04:21:20.537] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-15 04:21:20.568] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 04:21:20.581] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 04:21:20.865] [info]  application ready
[2021-05-15 04:21:20.902] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 04:21:21.230] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 04:21:21.255] [info]  using production config /dashboard
[2021-05-15 04:21:21.399] [info]  ping received
[2021-05-15 04:21:21.572] [info]  Response success for /notifications/subscriptions
[2021-05-15 04:21:21.645] [info]  Response for POST /notifications/subscriptions
[2021-05-15 04:21:21.652] [verbose] 
[2021-05-15 04:21:22.446] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-15 04:21:22.705] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 04:21:22.734] [info]  Response success for /usage
[2021-05-15 04:21:22.736] [info]  Response for POST /usage
[2021-05-15 04:21:22.751] [verbose] 
[2021-05-15 04:21:22.898] [verbose] GET /features params = null
[2021-05-15 04:21:22.901] [verbose] GET /settings params = null
[2021-05-15 04:21:23.013] [verbose] GET /versions params = null
[2021-05-15 04:21:23.046] [verbose] GET /system/editor params = null
[2021-05-15 04:21:23.053] [verbose] GET /kubernetes params = null
[2021-05-15 04:21:23.060] [verbose] GET /registry/user params = null
[2021-05-15 04:21:23.064] [verbose] GET /docker params = null
[2021-05-15 04:21:23.072] [verbose] GET /update params = null
[2021-05-15 04:21:23.156] [info]  Response success for /features
[2021-05-15 04:21:23.324] [info]  Response for GET /features
[2021-05-15 04:21:23.327] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:21:23.397] [info]  Response success for /registry/user
[2021-05-15 04:21:23.419] [info]  Response for GET /registry/user
[2021-05-15 04:21:23.433] [verbose] { username: 'neuromancer0001' }
[2021-05-15 04:21:23.440] [info]  Response success for /update
[2021-05-15 04:21:23.453] [info]  Response for GET /update
[2021-05-15 04:21:23.458] [verbose] { updateAvailableTime: 0 }
[2021-05-15 04:21:23.469] [info]  Response success for /docker
[2021-05-15 04:21:23.479] [info]  Response for GET /docker
[2021-05-15 04:21:23.488] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-15 04:21:23.499] [verbose] GET /features params = null
[2021-05-15 04:21:23.508] [info]  Response success for /settings
[2021-05-15 04:21:23.514] [info]  Response for GET /settings
[2021-05-15 04:21:23.519] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:21:23.526] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-15 04:21:23.539] [info]  Response success for /features
[2021-05-15 04:21:23.543] [info]  Response for GET /features
[2021-05-15 04:21:23.554] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:21:23.581] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 04:21:23.603] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 04:21:24.220] [info]  Response success for /kubernetes
[2021-05-15 04:21:24.222] [info]  Response for GET /kubernetes
[2021-05-15 04:21:24.226] [verbose] { state: 'stopped', enabled: false }
[2021-05-15 04:21:24.298] [info]  Response success for /system/disk-usage
[2021-05-15 04:21:24.300] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 04:21:24.303] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 73780
}
[2021-05-15 04:21:26.350] [info]  Response success for /versions
[2021-05-15 04:21:26.352] [info]  Response for GET /versions
[2021-05-15 04:21:26.356] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-15 04:21:27.980] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 04:21:27.996] [info]  Response success for /usage
[2021-05-15 04:21:28.012] [info]  Response for POST /usage
[2021-05-15 04:21:28.016] [verbose] 
[2021-05-15 04:21:37.491] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-15 04:21:38.485] [info]  Response success for /analytics/track
[2021-05-15 04:21:38.486] [info]  Response for POST /analytics/track
[2021-05-15 04:21:38.491] [verbose] 
[2021-05-15 04:26:47.061] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 04:26:47.065] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 04:26:47.071] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 04:26:47.153] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 04:47:08.067] [verbose] GET /settings params = null
[2021-05-15 04:47:08.206] [verbose] GET /features params = null
[2021-05-15 04:47:09.468] [info]  Response success for /settings
[2021-05-15 04:47:09.469] [info]  Response for GET /settings
[2021-05-15 04:47:09.540] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:47:11.854] [info]  Response success for /features
[2021-05-15 04:47:11.855] [info]  Response for GET /features
[2021-05-15 04:47:11.895] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:47:11.910] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 04:47:12.382] [info]  Response success for /system/disk-usage
[2021-05-15 04:47:12.536] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 04:47:12.572] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 70637
}
[2021-05-15 04:49:33.847] [verbose] GET /settings params = null
[2021-05-15 04:49:33.893] [info]  Response success for /settings
[2021-05-15 04:49:33.899] [info]  Response for GET /settings
[2021-05-15 04:49:33.905] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:49:36.184] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false,"features":{"buildkit":true},"builder":{"gc":{"enabled":true,"defaultKeepStorage":"20GB"}}}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-05-15 04:49:36.398] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 04:49:36.399] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 04:49:36.417] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 04:49:36.444] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 04:49:45.023] [info]  Response success for /settings
[2021-05-15 04:49:45.024] [info]  Response for POST /settings
[2021-05-15 04:49:45.032] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:49:45.051] [debug] kubernetes state notification, req.body:  { state: 'starting', enabled: true }
[2021-05-15 04:49:45.128] [info]  kubernetes state notification { state: 'starting', enabled: true }
[2021-05-15 04:49:45.134] [info]  notification : {"type":"kubernetes.success","payload":{"state":"starting","enabled":true}}
[2021-05-15 04:49:45.142] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 04:49:45.209] [verbose] GET /features params = null
[2021-05-15 04:49:45.222] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 04:49:45.229] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 04:49:45.295] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 04:49:45.349] [info]  Response success for /features
[2021-05-15 04:49:45.396] [info]  Response for GET /features
[2021-05-15 04:49:45.401] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:49:46.094] [info]  Response success for /system/disk-usage
[2021-05-15 04:49:46.152] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 04:49:46.158] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 70052
}
[2021-05-15 04:49:47.172] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 04:49:47.199] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-05-15 04:49:47.219] [info]  kubernetes state notification { state: 'failed to start', enabled: true }
[2021-05-15 04:49:47.226] [info]  notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-05-15 04:50:34.882] [verbose] POST /kubernetes/reset data = null
[2021-05-15 04:50:34.962] [info]  Response success for /kubernetes/reset
[2021-05-15 04:50:35.159] [info]  Response for POST /kubernetes/reset
[2021-05-15 04:50:35.164] [verbose] 
[2021-05-15 04:50:35.183] [debug] kubernetes state notification, req.body:  { state: 'stopping', enabled: true }
[2021-05-15 04:50:35.190] [info]  kubernetes state notification { state: 'stopping', enabled: true }
[2021-05-15 04:50:35.195] [info]  notification : {"type":"kubernetes.success","payload":{"state":"stopping","enabled":true}}
[2021-05-15 04:50:35.210] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-05-15 04:50:35.299] [info]  kubernetes state notification { state: 'failed to start', enabled: true }
[2021-05-15 04:50:35.304] [info]  notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-05-15 04:50:35.360] [debug] kubernetes state notification, req.body:  { state: 'failed to start', enabled: true }
[2021-05-15 04:50:35.386] [info]  kubernetes state notification { state: 'failed to start', enabled: true }
[2021-05-15 04:50:35.391] [info]  notification : {"type":"kubernetes.success","payload":{"state":"failed to start","enabled":true}}
[2021-05-15 04:53:03.664] [verbose] POST /analytics/track data = { event: 'actionElectronTitlebarUpgradePlan' }
[2021-05-15 04:53:04.986] [info]  Response success for /analytics/track
[2021-05-15 04:53:04.987] [info]  Response for POST /analytics/track
[2021-05-15 04:53:05.021] [verbose] 
[2021-05-15 04:53:17.546] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 04:53:17.636] [info]  application ready
[2021-05-15 04:53:17.980] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 04:53:18.325] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 04:53:19.166] [info]  using production config /tutorial
[2021-05-15 04:55:00.934] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-15 04:55:00.938] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 14828.284999999916,
    action: true,
    skip: false,
    terminal: true,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-15 04:55:00.973] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 7318.850000000093,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-15 04:55:00.980] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 9173.660000000382,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-15 04:55:00.987] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5363.48499999987,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-15 04:55:01.113] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 04:55:01.661] [info]  Response success for /usage
[2021-05-15 04:55:01.752] [info]  Response for POST /usage
[2021-05-15 04:55:01.757] [verbose] 
[2021-05-15 04:55:02.014] [info]  Response success for /analytics/track
[2021-05-15 04:55:02.016] [info]  Response for POST /analytics/track
[2021-05-15 04:55:02.020] [verbose] 
[2021-05-15 04:55:02.045] [info]  Response success for /analytics/track
[2021-05-15 04:55:02.051] [info]  Response for POST /analytics/track
[2021-05-15 04:55:02.057] [verbose] 
[2021-05-15 04:55:02.063] [info]  Response success for /analytics/track
[2021-05-15 04:55:02.068] [info]  Response for POST /analytics/track
[2021-05-15 04:55:02.072] [verbose] 
[2021-05-15 04:55:02.077] [info]  Response success for /analytics/track
[2021-05-15 04:55:02.082] [info]  Response for POST /analytics/track
[2021-05-15 04:55:02.086] [verbose] 
[2021-05-15 04:55:02.219] [info]  Response success for /analytics/track
[2021-05-15 04:55:02.221] [info]  Response for POST /analytics/track
[2021-05-15 04:55:02.227] [verbose] 
[2021-05-15 04:55:11.647] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 04:55:11.714] [info]  Response success for /usage
[2021-05-15 04:55:11.722] [info]  Response for POST /usage
[2021-05-15 04:55:11.727] [verbose] 
[2021-05-15 04:55:25.453] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-15 04:55:25.455] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-15 04:55:25.464] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-15 04:55:25.509] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 04:55:48.863] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'windows' }
[2021-05-15 04:55:48.865] [info]  engine state notification { state: 'stopped', mode: 'windows' }
[2021-05-15 04:55:48.904] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"windows"}}
[2021-05-15 04:55:48.934] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-15 04:55:49.225] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-15 04:55:49.233] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-15 04:55:49.239] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-15 04:55:49.290] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 04:56:00.658] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-15 04:56:01.651] [info]  Response success for /analytics/track
[2021-05-15 04:56:01.652] [info]  Response for POST /analytics/track
[2021-05-15 04:56:01.658] [verbose] 
[2021-05-15 04:56:10.599] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 04:56:10.636] [info]  Response success for /usage
[2021-05-15 04:56:10.657] [info]  Response for POST /usage
[2021-05-15 04:56:10.675] [verbose] 
[2021-05-15 04:56:15.682] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-15 04:56:15.733] [verbose] GET /registry/token params = null
[2021-05-15 04:56:15.864] [verbose] GET /registry/token params = null
[2021-05-15 04:56:15.872] [info]  Response success for /usage
[2021-05-15 04:56:15.939] [info]  Response for POST /usage
[2021-05-15 04:56:15.944] [verbose] 
[2021-05-15 04:56:15.955] [info]  Response success for /registry/token
[2021-05-15 04:56:15.960] [info]  Response for GET /registry/token
[2021-05-15 04:56:15.966] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-15 04:56:15.976] [info]  Response success for /registry/token
[2021-05-15 04:56:15.985] [info]  Response for GET /registry/token
[2021-05-15 04:56:16.011] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-15 04:56:16.738] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-15 04:56:16.740] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-15 04:56:17.364] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-15 04:56:17.365] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-15 04:56:17.388] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:17.397] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:17.406] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:17.416] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:17.423] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:17.791] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:17.793] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:17.803] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:17.807] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:17.816] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:17.820] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-15 04:56:17.827] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:17.834] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-15 04:56:17.842] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:17.849] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:17.902] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:17.927] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:17.938] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:17.951] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:17.958] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:18.402] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:18.403] [verbose] 
[2021-05-15 04:56:18.412] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:18.429] [verbose] 
[2021-05-15 04:56:18.435] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:18.444] [verbose] 
[2021-05-15 04:56:18.459] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:18.460] [verbose] 
[2021-05-15 04:56:18.542] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:18.543] [verbose] 
[2021-05-15 04:56:21.530] [verbose] POST /usage data = { command: 'imageChangeNamespace', count: 1 }
[2021-05-15 04:56:21.538] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0000?page_size=5
[2021-05-15 04:56:21.567] [info]  Response success for /usage
[2021-05-15 04:56:21.576] [info]  Response for POST /usage
[2021-05-15 04:56:21.583] [verbose] 
[2021-05-15 04:56:22.375] [info]  Response for GET /v2/repositories/neuromancer0000/?page_size=5
[2021-05-15 04:56:22.377] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0000',
      name: 'nic',
      namespace: 'neuromancer0000',
      repository_type: null,
      status: 0,
      description: 'docker tag local-image:tagname new-repo:tagname docker push new-repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-15 04:56:22.387] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0000/nic/tags/?page_size=11
[2021-05-15 04:56:22.765] [info]  Response for GET /v2/repositories/neuromancer0000/nic/tags/?page_size=11
[2021-05-15 04:56:22.766] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:22.803] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0000/nic
[2021-05-15 04:56:23.455] [info]  Response for GET /api/scan/v1/accounts/neuromancer0000/nic
[2021-05-15 04:56:23.456] [verbose] 
[2021-05-15 04:56:27.801] [verbose] POST /usage data = { command: 'imageChangeNamespace', count: 1 }
[2021-05-15 04:56:27.813] [info]  ==> GET https://hub.docker.com/v2/repositories/nic11c22ccc?page_size=5
[2021-05-15 04:56:27.856] [info]  Response success for /usage
[2021-05-15 04:56:27.867] [info]  Response for POST /usage
[2021-05-15 04:56:27.871] [verbose] 
[2021-05-15 04:56:28.768] [info]  Response for GET /v2/repositories/nic11c22ccc/?page_size=5
[2021-05-15 04:56:28.769] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      user: 'nic11c22ccc',
      name: 'quokka',
      namespace: 'nic11c22ccc',
      repository_type: null,
      status: 0,
      description: 'C:\\.quokka\\interactive-examples\\JavaScript\\json\\node-v0.10.29-darwin-x64/quokka:tagname\n',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'nic11c22ccc'
    }
  ]
}
[2021-05-15 04:56:28.775] [info]  ==> GET https://hub.docker.com/v2/repositories/nic11c22ccc/quokka/tags/?page_size=11
[2021-05-15 04:56:29.217] [info]  Response for GET /v2/repositories/nic11c22ccc/quokka/tags/?page_size=11
[2021-05-15 04:56:29.219] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:29.254] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/nic11c22ccc/quokka
[2021-05-15 04:56:29.715] [info]  Response for GET /api/scan/v1/accounts/nic11c22ccc/quokka
[2021-05-15 04:56:29.717] [verbose] 
[2021-05-15 04:56:33.722] [verbose] POST /usage data = { command: 'imageChangeNamespace', count: 1 }
[2021-05-15 04:56:33.728] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-15 04:56:33.775] [info]  Response success for /usage
[2021-05-15 04:56:33.782] [info]  Response for POST /usage
[2021-05-15 04:56:33.787] [verbose] 
[2021-05-15 04:56:34.597] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-15 04:56:34.598] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-15 04:56:34.605] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:34.614] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:34.628] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:34.668] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:34.676] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:35.187] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:35.189] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-15 04:56:35.209] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:35.219] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:35.226] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:35.234] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:35.240] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:35.247] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:35.270] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:35.274] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-15 04:56:35.328] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:35.429] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:35.437] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:35.446] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:35.452] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:35.885] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:35.886] [verbose] 
[2021-05-15 04:56:35.893] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:35.897] [verbose] 
[2021-05-15 04:56:35.917] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:35.920] [verbose] 
[2021-05-15 04:56:35.927] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:35.932] [verbose] 
[2021-05-15 04:56:36.037] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:36.039] [verbose] 
[2021-05-15 04:56:45.506] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-15 04:56:45.520] [info]  Response success for /usage
[2021-05-15 04:56:45.560] [info]  Response for POST /usage
[2021-05-15 04:56:45.568] [verbose] 
[2021-05-15 04:56:45.573] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-15 04:56:45.583] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-15 04:56:45.964] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-15 04:56:45.966] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-15 04:56:46.453] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-15 04:56:46.455] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-15 04:56:46.486] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:46.494] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:46.505] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:46.512] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:46.526] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:46.964] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:46.966] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:46.973] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:46.977] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:46.988] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:46.993] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-15 04:56:47.002] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:47.016] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:47.024] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:47.179] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-15 04:56:47.222] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:47.271] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:47.278] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:47.286] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:47.294] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:47.695] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:47.696] [verbose] 
[2021-05-15 04:56:47.713] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:56:47.716] [verbose] 
[2021-05-15 04:56:47.722] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:47.724] [verbose] 
[2021-05-15 04:56:47.730] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:47.734] [verbose] 
[2021-05-15 04:56:47.740] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:47.774] [verbose] 
[2021-05-15 04:56:52.800] [verbose] POST /usage data = { command: 'imageRemotePull', count: 1 }
[2021-05-15 04:56:52.851] [info]  Response success for /usage
[2021-05-15 04:56:52.868] [info]  Response for POST /usage
[2021-05-15 04:56:52.874] [verbose] 
[2021-05-15 04:56:58.298] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-15 04:56:58.327] [info]  Response success for /usage
[2021-05-15 04:56:58.369] [info]  Response for POST /usage
[2021-05-15 04:56:58.373] [verbose] 
[2021-05-15 04:56:58.402] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-15 04:56:58.414] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-15 04:56:58.818] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-15 04:56:58.820] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-15 04:56:59.328] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-15 04:56:59.330] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-15 04:56:59.348] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:59.355] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:59.361] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:59.367] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:59.371] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:59.736] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-15 04:56:59.738] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-15 04:56:59.750] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-15 04:56:59.755] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:59.761] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-15 04:56:59.767] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:59.775] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-15 04:56:59.786] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-15 04:56:59.792] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-15 04:56:59.798] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-15 04:56:59.841] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:56:59.890] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:56:59.899] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:56:59.907] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:56:59.917] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:57:00.322] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-15 04:57:00.324] [verbose] 
[2021-05-15 04:57:00.347] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-15 04:57:00.349] [verbose] 
[2021-05-15 04:57:00.363] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-15 04:57:00.369] [verbose] 
[2021-05-15 04:57:00.375] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-15 04:57:00.384] [verbose] 
[2021-05-15 04:57:00.391] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-15 04:57:00.400] [verbose] 
[2021-05-15 04:57:04.698] [verbose] POST /usage data = { command: 'imageRemotePull', count: 1 }
[2021-05-15 04:57:04.805] [info]  Response success for /usage
[2021-05-15 04:57:04.814] [info]  Response for POST /usage
[2021-05-15 04:57:04.819] [verbose] 
[2021-05-15 04:57:14.934] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 04:57:14.979] [info]  Response success for /usage
[2021-05-15 04:57:14.985] [info]  Response for POST /usage
[2021-05-15 04:57:14.990] [verbose] 
[2021-05-15 04:57:21.227] [verbose] GET /settings params = null
[2021-05-15 04:57:21.229] [verbose] GET /features params = null
[2021-05-15 04:57:21.304] [info]  Response success for /features
[2021-05-15 04:57:21.348] [info]  Response for GET /features
[2021-05-15 04:57:21.355] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:57:21.391] [info]  Response success for /settings
[2021-05-15 04:57:21.401] [info]  Response for GET /settings
[2021-05-15 04:57:21.406] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:57:21.472] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 04:57:21.559] [info]  Response success for /system/disk-usage
[2021-05-15 04:57:21.582] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 04:57:21.599] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 69995
}
[2021-05-15 04:58:05.424] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-05-15 04:58:05.426] [info]  engine state notification { state: 'failed to start', mode: 'windows' }
[2021-05-15 04:58:05.443] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-05-15 04:58:05.664] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 04:59:23.882] [verbose] GET /settings params = null
[2021-05-15 04:59:23.885] [verbose] GET /features params = null
[2021-05-15 04:59:23.932] [info]  Response success for /features
[2021-05-15 04:59:23.938] [info]  Response for GET /features
[2021-05-15 04:59:23.943] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 04:59:26.426] [info]  Response success for /settings
[2021-05-15 04:59:26.427] [info]  Response for GET /settings
[2021-05-15 04:59:26.431] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 04:59:26.439] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 04:59:26.469] [info]  Response success for /system/disk-usage
[2021-05-15 04:59:26.474] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 04:59:26.478] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 69987
}
[2021-05-15 05:07:06.347] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 05:07:06.428] [info]  application ready
[2021-05-15 05:07:06.459] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 05:07:06.589] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 05:07:06.591] [info]  using production config /tutorial
[2021-05-15 05:09:49.665] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-15 05:09:49.668] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 15677.895000000019,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-15 05:09:49.683] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 4735.354999999981,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-15 05:09:49.690] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2950.8549999999814,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-15 05:09:49.697] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 4691.9350000005215,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-15 05:09:49.796] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 05:09:50.036] [info]  Response success for /usage
[2021-05-15 05:09:50.037] [info]  Response for POST /usage
[2021-05-15 05:09:50.041] [verbose] 
[2021-05-15 05:09:50.637] [info]  Response success for /analytics/track
[2021-05-15 05:09:50.638] [info]  Response for POST /analytics/track
[2021-05-15 05:09:50.641] [verbose] 
[2021-05-15 05:09:50.657] [info]  Response success for /analytics/track
[2021-05-15 05:09:50.658] [info]  Response for POST /analytics/track
[2021-05-15 05:09:50.663] [verbose] 
[2021-05-15 05:09:50.670] [info]  Response success for /analytics/track
[2021-05-15 05:09:50.673] [info]  Response for POST /analytics/track
[2021-05-15 05:09:50.676] [verbose] 
[2021-05-15 05:09:50.680] [info]  Response success for /analytics/track
[2021-05-15 05:09:50.684] [info]  Response for POST /analytics/track
[2021-05-15 05:09:50.687] [verbose] 
[2021-05-15 05:09:50.695] [info]  Response success for /analytics/track
[2021-05-15 05:09:50.696] [info]  Response for POST /analytics/track
[2021-05-15 05:09:50.700] [verbose] 
[2021-05-15 05:11:14.323] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 05:11:14.337] [info]  Response success for /usage
[2021-05-15 05:11:14.339] [info]  Response for POST /usage
[2021-05-15 05:11:14.342] [verbose] 
[2021-05-15 05:11:24.204] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-15 05:11:25.281] [info]  Response success for /analytics/track
[2021-05-15 05:11:25.282] [info]  Response for POST /analytics/track
[2021-05-15 05:11:25.289] [verbose] 
[2021-05-15 05:18:57.967] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 05:18:58.996] [info]  Response success for /usage
[2021-05-15 05:18:58.998] [info]  Response for POST /usage
[2021-05-15 05:18:59.001] [verbose] 
[2021-05-15 05:18:59.598] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 05:18:59.612] [info]  Response success for /usage
[2021-05-15 05:18:59.616] [info]  Response for POST /usage
[2021-05-15 05:18:59.623] [verbose] 
[2021-05-15 05:19:13.833] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-15 05:19:13.852] [info]  Response success for /usage
[2021-05-15 05:19:13.855] [info]  Response for POST /usage
[2021-05-15 05:19:13.858] [verbose] 
[2021-05-15 05:19:17.943] [verbose] GET /settings params = null
[2021-05-15 05:19:17.946] [verbose] GET /features params = null
[2021-05-15 05:19:17.956] [info]  Response success for /features
[2021-05-15 05:19:17.963] [info]  Response for GET /features
[2021-05-15 05:19:17.975] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 05:19:17.996] [info]  Response success for /settings
[2021-05-15 05:19:17.999] [info]  Response for GET /settings
[2021-05-15 05:19:18.004] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 05:19:18.012] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 05:19:18.058] [info]  Response success for /system/disk-usage
[2021-05-15 05:19:18.060] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 05:19:18.065] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 67181
}
[2021-05-15 05:24:05.231] [verbose] GET /settings params = null
[2021-05-15 05:24:05.259] [info]  Response success for /settings
[2021-05-15 05:24:05.263] [info]  Response for GET /settings
[2021-05-15 05:24:05.268] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 05:24:05.281] [verbose] POST /settings data = {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":true,"features":{"buildkit":true},"builder":{"gc":{"enabled":true,"defaultKeepStorage":"20GB"}}}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true },
  experimentalFeatures: {
    ApplicationDesigner: {
      name: 'Application Designer',
      label: 'Enable Application Designer',
      enabled: false,
      type: 1
    },
    DevEnvironmentsV0: {
      name: 'Painted Door Dev Environments',
      label: 'Enable Painted Door Dev Environments',
      description: 'Display Painted Door Dev Environments in the dashboard',
      enabled: true,
      type: 1
    },
    ProUser: {
      name: 'ProUser',
      label: 'free',
      description: 'You can upgrade your current plan [here](URL)',
      enabled: false,
      type: 3
    },
    UpdateNotificationBox: {
      name: 'Update Notification Box',
      label: 'Update Notification Box',
      description: 'Enable update notification box in the UI',
      enabled: false,
      type: 1
    },
    UpdateRedesign: {
      name: 'Update Redesign',
      label: 'Enable Update Redesign',
      description: 'Enable Update Redesign',
      enabled: true,
      type: 1
    },
    VolumesPanel: {
      name: 'Volumes panel',
      label: 'Enable Volumes panel',
      description: 'Display the container volumes in the dashboard',
      enabled: false,
      type: 1
    },
    grpcfuseV2: {
      name: 'Grpcfuse',
      label: 'Use grpcfuse for filesharing by default',
      description: 'Switch off to use the legacy osxfs file sharing instead.',
      enabled: true,
      type: 1
    },
    mutagenV0: {
      name: 'Mutagen',
      label: 'Two-way file synchronisation',
      description: 'Use Mutagen to synchronize files in a container with your local disk.',
      enabled: false,
      type: 1
    }
  },
  cli: { useGrpcfuse: false }
}
[2021-05-15 05:24:05.321] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 05:24:05.326] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 05:24:05.332] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 05:24:05.351] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 05:24:05.424] [info]  Response success for /settings
[2021-05-15 05:24:05.426] [info]  Response for POST /settings
[2021-05-15 05:24:05.432] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 05:24:05.440] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 05:24:05.448] [verbose] GET /features params = null
[2021-05-15 05:24:05.459] [info]  Response success for /features
[2021-05-15 05:24:05.464] [info]  Response for GET /features
[2021-05-15 05:24:05.469] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 05:24:05.478] [info]  Response success for /system/disk-usage
[2021-05-15 05:24:05.484] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 05:24:05.491] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 67159
}
[2021-05-15 05:29:55.362] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:55.370] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:55.598] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 05:29:57.708] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:57.865] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:58.112] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 05:29:59.018] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:59.066] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 05:29:59.170] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 05:30:06.433] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 05:43:57.970] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-15 05:43:57.989] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 05:43:57.991] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 05:43:58.150] [info]  application ready
[2021-05-15 05:43:58.181] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 05:43:58.399] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 05:43:58.403] [info]  using production config /dashboard
[2021-05-15 05:43:59.403] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-15 05:43:59.563] [info]  ping received
[2021-05-15 05:43:59.595] [info]  Response success for /notifications/subscriptions
[2021-05-15 05:43:59.600] [info]  Response for POST /notifications/subscriptions
[2021-05-15 05:43:59.610] [verbose] 
[2021-05-15 05:43:59.653] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 05:43:59.674] [info]  Response success for /usage
[2021-05-15 05:43:59.677] [info]  Response for POST /usage
[2021-05-15 05:43:59.680] [verbose] 
[2021-05-15 05:43:59.778] [verbose] GET /features params = null
[2021-05-15 05:43:59.782] [verbose] GET /settings params = null
[2021-05-15 05:43:59.804] [verbose] GET /versions params = null
[2021-05-15 05:43:59.808] [verbose] GET /system/editor params = null
[2021-05-15 05:43:59.813] [verbose] GET /kubernetes params = null
[2021-05-15 05:43:59.817] [verbose] GET /registry/user params = null
[2021-05-15 05:43:59.824] [verbose] GET /docker params = null
[2021-05-15 05:43:59.830] [verbose] GET /update params = null
[2021-05-15 05:43:59.875] [info]  Response success for /docker
[2021-05-15 05:43:59.946] [info]  Response for GET /docker
[2021-05-15 05:43:59.949] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-15 05:43:59.955] [info]  Response success for /update
[2021-05-15 05:43:59.961] [info]  Response for GET /update
[2021-05-15 05:43:59.965] [verbose] { updateAvailableTime: 0 }
[2021-05-15 05:43:59.971] [info]  Response success for /registry/user
[2021-05-15 05:43:59.975] [info]  Response for GET /registry/user
[2021-05-15 05:43:59.978] [verbose] { username: 'neuromancer0001' }
[2021-05-15 05:43:59.989] [info]  Response success for /features
[2021-05-15 05:43:59.995] [info]  Response for GET /features
[2021-05-15 05:44:00.000] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 05:44:00.013] [info]  Response success for /kubernetes
[2021-05-15 05:44:00.046] [info]  Response for GET /kubernetes
[2021-05-15 05:44:00.050] [verbose] { state: 'stopped', enabled: true }
[2021-05-15 05:44:00.059] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-15 05:44:00.063] [info]  Response success for /settings
[2021-05-15 05:44:00.065] [info]  Response for GET /settings
[2021-05-15 05:44:00.068] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": true,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 05:44:00.147] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 05:44:00.157] [verbose] GET /features params = null
[2021-05-15 05:44:00.178] [info]  Response success for /features
[2021-05-15 05:44:00.182] [info]  Response for GET /features
[2021-05-15 05:44:00.188] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 05:44:00.197] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 05:44:00.286] [info]  Response success for /system/disk-usage
[2021-05-15 05:44:00.295] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 05:44:00.299] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 66101
}
[2021-05-15 05:44:02.825] [info]  Response success for /versions
[2021-05-15 05:44:02.827] [info]  Response for GET /versions
[2021-05-15 05:44:02.831] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-15 06:18:19.116] [info]  quitting application
[2021-05-15 06:18:19.131] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 06:18:19.296] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 10:08:46.606] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-15 10:08:46.635] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 10:08:46.636] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 10:08:46.904] [info]  application ready
[2021-05-15 10:08:46.929] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:08:47.404] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:08:47.410] [info]  using production config /dashboard
[2021-05-15 10:08:47.606] [info]  ping received
[2021-05-15 10:08:47.711] [info]  Response success for /notifications/subscriptions
[2021-05-15 10:08:47.712] [info]  Response for POST /notifications/subscriptions
[2021-05-15 10:08:47.714] [verbose] 
[2021-05-15 10:08:48.536] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-15 10:08:48.826] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 10:08:48.850] [info]  Response success for /usage
[2021-05-15 10:08:48.851] [info]  Response for POST /usage
[2021-05-15 10:08:48.854] [verbose] 
[2021-05-15 10:08:48.892] [verbose] GET /features params = null
[2021-05-15 10:08:48.895] [verbose] GET /settings params = null
[2021-05-15 10:08:48.903] [verbose] GET /versions params = null
[2021-05-15 10:08:48.912] [verbose] GET /system/editor params = null
[2021-05-15 10:08:48.915] [verbose] GET /kubernetes params = null
[2021-05-15 10:08:48.919] [verbose] GET /registry/user params = null
[2021-05-15 10:08:48.930] [verbose] GET /docker params = null
[2021-05-15 10:08:48.934] [verbose] GET /update params = null
[2021-05-15 10:08:48.954] [info]  Response success for /features
[2021-05-15 10:08:48.992] [info]  Response for GET /features
[2021-05-15 10:08:49.011] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:08:49.024] [info]  Response success for /kubernetes
[2021-05-15 10:08:49.025] [info]  Response for GET /kubernetes
[2021-05-15 10:08:49.043] [verbose] { state: 'stopped', enabled: true }
[2021-05-15 10:08:49.061] [info]  Response success for /update
[2021-05-15 10:08:49.075] [info]  Response for GET /update
[2021-05-15 10:08:49.079] [verbose] { updateAvailableTime: 0 }
[2021-05-15 10:08:49.084] [info]  Response success for /docker
[2021-05-15 10:08:49.091] [info]  Response for GET /docker
[2021-05-15 10:08:49.095] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-15 10:08:49.107] [info]  Response success for /registry/user
[2021-05-15 10:08:49.111] [info]  Response for GET /registry/user
[2021-05-15 10:08:49.115] [verbose] { username: 'neuromancer0001' }
[2021-05-15 10:08:49.122] [info]  Response success for /settings
[2021-05-15 10:08:49.129] [info]  Response for GET /settings
[2021-05-15 10:08:49.134] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 10:08:49.146] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-15 10:08:49.213] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 10:08:49.217] [verbose] GET /features params = null
[2021-05-15 10:08:49.225] [info]  Response success for /features
[2021-05-15 10:08:49.226] [info]  Response for GET /features
[2021-05-15 10:08:49.229] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:08:49.242] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 10:08:49.387] [info]  Response success for /system/disk-usage
[2021-05-15 10:08:49.389] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 10:08:49.396] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 65476
}
[2021-05-15 10:08:52.152] [info]  Response success for /versions
[2021-05-15 10:08:52.154] [info]  Response for GET /versions
[2021-05-15 10:08:52.158] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-15 10:09:44.368] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:09:44.428] [info]  application ready
[2021-05-15 10:09:44.463] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:09:44.619] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:09:44.901] [info]  using production config /tutorial
[2021-05-15 10:15:57.517] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-15 10:15:57.521] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 25390.885000000708,
    action: true,
    skip: false,
    terminal: true,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-15 10:15:57.526] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 5887.204999999958,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-15 10:15:57.532] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2511.1149999993504,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-15 10:15:57.538] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 4260.285000000324,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-15 10:15:57.633] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 10:15:57.655] [info]  Response success for /usage
[2021-05-15 10:15:57.679] [info]  Response for POST /usage
[2021-05-15 10:15:57.686] [verbose] 
[2021-05-15 10:15:58.505] [info]  Response success for /analytics/track
[2021-05-15 10:15:58.506] [info]  Response for POST /analytics/track
[2021-05-15 10:15:58.509] [verbose] 
[2021-05-15 10:15:58.524] [info]  Response success for /analytics/track
[2021-05-15 10:15:58.525] [info]  Response for POST /analytics/track
[2021-05-15 10:15:58.527] [verbose] 
[2021-05-15 10:15:58.531] [info]  Response success for /analytics/track
[2021-05-15 10:15:58.533] [info]  Response for POST /analytics/track
[2021-05-15 10:15:58.536] [verbose] 
[2021-05-15 10:15:58.540] [info]  Response success for /analytics/track
[2021-05-15 10:15:58.542] [info]  Response for POST /analytics/track
[2021-05-15 10:15:58.544] [verbose] 
[2021-05-15 10:15:58.548] [info]  Response success for /analytics/track
[2021-05-15 10:15:58.550] [info]  Response for POST /analytics/track
[2021-05-15 10:15:58.553] [verbose] 
[2021-05-15 10:16:13.082] [verbose] POST /desktop/cleanup data = { hyperv: true, wsl2: true, windowsContainers: false }
[2021-05-15 10:16:13.164] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 10:16:13.168] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 10:16:13.174] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 10:16:13.205] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 10:17:53.155] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 10:17:53.157] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 10:17:53.162] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 10:17:53.197] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 10:17:58.819] [info]  Response error for /desktop/cleanup: Request failed with status code 500
[2021-05-15 10:17:58.821] [error] !!! post /desktop/cleanup
[2021-05-15 10:17:58.837] [error] Error response from server
[2021-05-15 10:17:58.845] [error] Exception trying to execute middleware. See logs for details.

[2021-05-15 10:17:58.853] [error] 500
[2021-05-15 10:17:58.877] [error] {}
[2021-05-15 10:25:54.257] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-15 10:25:54.263] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 10:25:54.266] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 10:25:54.333] [info]  application ready
[2021-05-15 10:25:54.355] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:25:54.421] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:25:54.424] [info]  using production config /dashboard
[2021-05-15 10:25:54.461] [info]  ping received
[2021-05-15 10:25:54.515] [info]  Response success for /notifications/subscriptions
[2021-05-15 10:25:54.575] [info]  Response for POST /notifications/subscriptions
[2021-05-15 10:25:54.579] [verbose] 
[2021-05-15 10:25:55.183] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-15 10:25:55.398] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 10:25:55.459] [verbose] GET /features params = null
[2021-05-15 10:25:55.467] [verbose] GET /settings params = null
[2021-05-15 10:25:55.475] [verbose] GET /versions params = null
[2021-05-15 10:25:55.480] [verbose] GET /system/editor params = null
[2021-05-15 10:25:55.485] [verbose] GET /kubernetes params = null
[2021-05-15 10:25:55.488] [verbose] GET /registry/user params = null
[2021-05-15 10:25:55.493] [verbose] GET /docker params = null
[2021-05-15 10:25:55.499] [verbose] GET /update params = null
[2021-05-15 10:25:55.521] [info]  Response success for /usage
[2021-05-15 10:25:55.541] [info]  Response for POST /usage
[2021-05-15 10:25:55.545] [verbose] 
[2021-05-15 10:25:55.575] [info]  Response success for /features
[2021-05-15 10:25:55.588] [info]  Response for GET /features
[2021-05-15 10:25:55.592] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:25:55.633] [info]  Response success for /docker
[2021-05-15 10:25:55.673] [info]  Response for GET /docker
[2021-05-15 10:25:55.680] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-15 10:25:55.690] [info]  Response success for /kubernetes
[2021-05-15 10:25:55.697] [info]  Response for GET /kubernetes
[2021-05-15 10:25:55.701] [verbose] { state: 'stopped', enabled: true }
[2021-05-15 10:25:55.704] [info]  Response success for /settings
[2021-05-15 10:25:55.707] [info]  Response for GET /settings
[2021-05-15 10:25:55.710] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 10:25:55.716] [info]  Response success for /registry/user
[2021-05-15 10:25:55.718] [info]  Response for GET /registry/user
[2021-05-15 10:25:55.722] [verbose] { username: 'neuromancer0001' }
[2021-05-15 10:25:55.726] [info]  Response success for /update
[2021-05-15 10:25:55.729] [info]  Response for GET /update
[2021-05-15 10:25:55.732] [verbose] { updateAvailableTime: 0 }
[2021-05-15 10:25:55.736] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-15 10:25:55.786] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 10:25:55.812] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 10:25:55.836] [verbose] GET /features params = null
[2021-05-15 10:25:55.903] [info]  Response success for /features
[2021-05-15 10:25:55.904] [info]  Response for GET /features
[2021-05-15 10:25:55.910] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:25:55.944] [info]  Response success for /system/disk-usage
[2021-05-15 10:25:55.949] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 10:25:55.953] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 65405
}
[2021-05-15 10:25:58.174] [info]  Response success for /versions
[2021-05-15 10:25:58.175] [info]  Response for GET /versions
[2021-05-15 10:25:58.179] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-15 10:26:44.836] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:26:44.893] [info]  application ready
[2021-05-15 10:26:44.937] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:26:44.972] [verbose] GET /settings params = null
[2021-05-15 10:26:44.991] [verbose] GET /features params = null
[2021-05-15 10:26:45.046] [info]  Response success for /features
[2021-05-15 10:26:45.048] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:26:45.100] [info]  using production config /settings
[2021-05-15 10:26:45.109] [info]  Response for GET /features
[2021-05-15 10:26:45.188] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:26:45.240] [info]  Response success for /settings
[2021-05-15 10:26:45.315] [info]  Response for GET /settings
[2021-05-15 10:26:45.320] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 10:26:45.334] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 10:26:45.380] [info]  Response success for /system/disk-usage
[2021-05-15 10:26:45.396] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 10:26:45.400] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 65405
}
[2021-05-15 10:26:49.768] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 10:26:49.785] [info]  Response success for /usage
[2021-05-15 10:26:49.786] [info]  Response for POST /usage
[2021-05-15 10:26:49.789] [verbose] 
[2021-05-15 10:26:51.740] [verbose] GET /settings params = null
[2021-05-15 10:26:51.743] [verbose] GET /features params = null
[2021-05-15 10:26:51.750] [info]  Response success for /features
[2021-05-15 10:26:51.753] [info]  Response for GET /features
[2021-05-15 10:26:51.758] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 10:26:51.768] [info]  Response success for /settings
[2021-05-15 10:26:51.770] [info]  Response for GET /settings
[2021-05-15 10:26:51.773] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: true, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 10:26:51.781] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 10:26:51.797] [info]  Response success for /system/disk-usage
[2021-05-15 10:26:51.799] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 10:26:51.802] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 65405
}
[2021-05-15 10:27:12.904] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:27:13.002] [info]  application ready
[2021-05-15 10:27:13.042] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:27:13.111] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"settings","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 10:27:13.113] [info]  using production config /settings
[2021-05-15 10:27:22.227] [verbose] POST /desktop/factory-reset data = null
[2021-05-15 10:27:22.316] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 10:27:22.320] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 10:27:22.325] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 10:27:22.340] [info]  Response success for /desktop/factory-reset
[2021-05-15 10:27:22.348] [info]  Response for POST /desktop/factory-reset
[2021-05-15 10:27:22.364] [verbose] 
[2021-05-15 10:27:22.375] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 10:27:22.422] [info]  quitting application
[2021-05-15 10:27:22.431] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 10:27:22.436] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 16:49:49.673] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-15 16:49:49.701] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 16:49:49.720] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-15 16:49:49.962] [info]  application ready
[2021-05-15 16:49:50.029] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 16:49:50.335] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 16:49:50.339] [info]  using production config /dashboard
[2021-05-15 16:49:50.467] [info]  ping received
[2021-05-15 16:49:50.555] [info]  Response success for /notifications/subscriptions
[2021-05-15 16:49:50.589] [info]  Response for POST /notifications/subscriptions
[2021-05-15 16:49:50.593] [verbose] 
[2021-05-15 16:49:51.325] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-15 16:49:51.620] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 16:49:51.641] [info]  Response success for /usage
[2021-05-15 16:49:51.642] [info]  Response for POST /usage
[2021-05-15 16:49:51.645] [verbose] 
[2021-05-15 16:49:51.765] [verbose] GET /features params = null
[2021-05-15 16:49:51.770] [verbose] GET /settings params = null
[2021-05-15 16:49:51.789] [verbose] GET /versions params = null
[2021-05-15 16:49:51.806] [verbose] GET /system/editor params = null
[2021-05-15 16:49:51.812] [verbose] GET /kubernetes params = null
[2021-05-15 16:49:51.825] [verbose] GET /registry/user params = null
[2021-05-15 16:49:51.830] [verbose] GET /docker params = null
[2021-05-15 16:49:51.835] [verbose] GET /update params = null
[2021-05-15 16:49:51.914] [info]  Response success for /features
[2021-05-15 16:49:51.919] [info]  Response for GET /features
[2021-05-15 16:49:51.933] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 16:49:51.941] [info]  Response success for /settings
[2021-05-15 16:49:51.945] [info]  Response for GET /settings
[2021-05-15 16:49:51.956] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-15 16:49:51.964] [info]  Response success for /registry/user
[2021-05-15 16:49:51.971] [info]  Response for GET /registry/user
[2021-05-15 16:49:51.981] [verbose] { username: 'neuromancer0001' }
[2021-05-15 16:49:51.998] [info]  Response success for /docker
[2021-05-15 16:49:52.007] [info]  Response for GET /docker
[2021-05-15 16:49:52.011] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-15 16:49:52.021] [info]  Response success for /update
[2021-05-15 16:49:52.026] [info]  Response for GET /update
[2021-05-15 16:49:52.030] [verbose] { updateAvailableTime: 0 }
[2021-05-15 16:49:52.035] [info]  Response success for /kubernetes
[2021-05-15 16:49:52.038] [info]  Response for GET /kubernetes
[2021-05-15 16:49:52.041] [verbose] { state: 'stopped', enabled: false }
[2021-05-15 16:49:52.073] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-15 16:49:52.108] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-15 16:49:52.125] [verbose] GET /features params = null
[2021-05-15 16:49:52.219] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 16:49:52.276] [info]  Response success for /features
[2021-05-15 16:49:52.280] [info]  Response for GET /features
[2021-05-15 16:49:52.285] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-15 16:49:52.294] [info]  Response success for /system/disk-usage
[2021-05-15 16:49:52.302] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-15 16:49:52.306] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 63547
}
[2021-05-15 16:49:54.576] [info]  Response success for /versions
[2021-05-15 16:49:54.577] [info]  Response for GET /versions
[2021-05-15 16:49:54.580] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-15 16:51:08.814] [verbose] POST /desktop/cleanup data = { hyperv: false, wsl2: true, windowsContainers: false }
[2021-05-15 16:55:44.838] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 16:55:44.841] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 16:55:44.845] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 16:55:44.879] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 16:59:45.079] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-05-15 16:59:45.081] [info]  engine state notification { state: 'stopped', mode: 'linux' }
[2021-05-15 16:59:45.086] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-05-15 16:59:45.123] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-15 16:59:45.138] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 16:59:45.143] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 16:59:45.146] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 16:59:45.164] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-15 16:59:45.175] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-15 16:59:45.183] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-15 16:59:45.189] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 16:59:45.215] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-15 17:05:45.474] [debug] engine state notification, req.body:  { state: 'stopped', mode: 'linux' }
[2021-05-15 17:05:45.476] [info]  engine state notification { state: 'stopped', mode: 'linux' }
[2021-05-15 17:05:45.498] [info]  notification : {"type":"engine.success","payload":{"state":"stopped","mode":"linux"}}
[2021-05-15 17:05:45.528] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-15 17:05:45.714] [info]  engine state notification { state: 'starting', mode: 'linux' }
[2021-05-15 17:05:45.768] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-15 17:05:45.777] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: stopped
[2021-05-15 17:05:45.806] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-15 17:31:48.426] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-15 17:31:48.427] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-15 17:31:48.446] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-15 17:31:48.453] [info]  Response success for /desktop/cleanup
[2021-05-15 17:31:48.457] [info]  Response for POST /desktop/cleanup
[2021-05-15 17:31:48.461] [verbose] 
[2021-05-15 17:31:48.521] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-15 20:19:08.844] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:19:15.357] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-15 20:19:22.890] [info]  Response success for /usage
[2021-05-15 20:19:22.892] [info]  Response for POST /usage
[2021-05-15 20:19:30.294] [verbose] 
[2021-05-15 20:19:30.428] [info]  application ready
[2021-05-15 20:19:30.484] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:19:31.544] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:19:31.546] [info]  using production config /dashboard
[2021-05-15 20:45:38.985] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:45:44.216] [info]  application ready
[2021-05-15 20:45:44.688] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:45:50.541] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-15 20:45:50.555] [info]  using production config /dashboard
[2021-05-15 21:34:10.299] [info]  quitting application
[2021-05-15 21:34:10.368] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-15 21:34:10.403] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 01:33:04.768] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-16 01:33:04.786] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 01:33:04.799] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 01:33:04.975] [info]  application ready
[2021-05-16 01:33:05.005] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 01:33:05.250] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 01:33:05.253] [info]  using production config /dashboard
[2021-05-16 01:33:05.352] [info]  ping received
[2021-05-16 01:33:05.598] [info]  Response success for /notifications/subscriptions
[2021-05-16 01:33:05.646] [info]  Response for POST /notifications/subscriptions
[2021-05-16 01:33:05.651] [verbose] 
[2021-05-16 01:33:05.947] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-16 01:33:05.951] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-16 01:33:05.956] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-16 01:33:06.517] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-16 01:33:06.811] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-16 01:33:06.875] [info]  Response success for /usage
[2021-05-16 01:33:06.876] [info]  Response for POST /usage
[2021-05-16 01:33:06.879] [verbose] 
[2021-05-16 01:33:07.126] [verbose] GET /features params = null
[2021-05-16 01:33:07.129] [verbose] GET /settings params = null
[2021-05-16 01:33:07.145] [verbose] GET /versions params = null
[2021-05-16 01:33:07.152] [verbose] GET /system/editor params = null
[2021-05-16 01:33:07.163] [verbose] GET /kubernetes params = null
[2021-05-16 01:33:07.176] [verbose] GET /registry/user params = null
[2021-05-16 01:33:07.205] [verbose] GET /docker params = null
[2021-05-16 01:33:07.211] [verbose] GET /update params = null
[2021-05-16 01:33:07.355] [info]  Response success for /docker
[2021-05-16 01:33:07.492] [info]  Response for GET /docker
[2021-05-16 01:33:07.498] [verbose] { state: 'starting', mode: 'windows' }
[2021-05-16 01:33:07.503] [info]  Response success for /registry/user
[2021-05-16 01:33:07.508] [info]  Response for GET /registry/user
[2021-05-16 01:33:07.514] [verbose] { username: 'neuromancer0001' }
[2021-05-16 01:33:07.521] [info]  Response success for /update
[2021-05-16 01:33:07.526] [info]  Response for GET /update
[2021-05-16 01:33:07.529] [verbose] { updateAvailableTime: 0 }
[2021-05-16 01:33:07.533] [info]  Response success for /kubernetes
[2021-05-16 01:33:07.536] [info]  Response for GET /kubernetes
[2021-05-16 01:33:07.539] [verbose] { state: 'stopped', enabled: false }
[2021-05-16 01:33:07.545] [info]  Response success for /features
[2021-05-16 01:33:07.547] [info]  Response for GET /features
[2021-05-16 01:33:07.550] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 01:33:07.588] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-16 01:33:07.601] [verbose] GET /features params = null
[2021-05-16 01:33:07.768] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-16 01:33:07.811] [info]  Response success for /features
[2021-05-16 01:33:07.870] [info]  Response for GET /features
[2021-05-16 01:33:07.875] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 01:33:07.884] [info]  Response success for /settings
[2021-05-16 01:33:07.888] [info]  Response for GET /settings
[2021-05-16 01:33:07.897] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 1621000204754,
    tipLastId: 16,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 1620388551662,
    exportInsecureDaemon: true,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: true
  },
  vm: {
    daemon: '{"registry-mirrors":[],"insecure-registries":[],"debug":false,"experimental":false,"features":{"buildkit":true},"builder":{"gc":{"enabled":true,"defaultKeepStorage":"20GB"}}}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: true },
    network: {
      automaticDNS: false,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-16 01:33:07.934] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-16 01:33:08.041] [info]  Response success for /versions
[2021-05-16 01:33:08.055] [info]  Response for GET /versions
[2021-05-16 01:33:08.059] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-16 01:33:08.111] [info]  Response success for /system/disk-usage
[2021-05-16 01:33:08.125] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-16 01:33:08.129] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 65245
}
[2021-05-16 01:33:20.312] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-16 01:33:20.314] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-16 01:33:20.320] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-16 01:33:20.365] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-16 01:33:34.657] [info]  quitting application
[2021-05-16 01:33:34.658] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 01:33:34.672] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 05:04:09.657] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:04:09.691] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:04:09.732] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 05:04:10.096] [info]  application ready
[2021-05-16 05:04:10.131] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:04:10.474] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:04:10.480] [info]  using production config /dashboard
[2021-05-16 05:04:10.622] [info]  ping received
[2021-05-16 05:04:10.677] [info]  Response success for /notifications/subscriptions
[2021-05-16 05:04:10.697] [info]  Response for POST /notifications/subscriptions
[2021-05-16 05:04:10.705] [verbose] 
[2021-05-16 05:04:11.666] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-16 05:04:12.081] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-16 05:04:12.170] [verbose] GET /features params = null
[2021-05-16 05:04:12.174] [verbose] GET /settings params = null
[2021-05-16 05:04:12.203] [verbose] GET /versions params = null
[2021-05-16 05:04:12.210] [verbose] GET /system/editor params = null
[2021-05-16 05:04:12.220] [verbose] GET /kubernetes params = null
[2021-05-16 05:04:12.228] [verbose] GET /registry/user params = null
[2021-05-16 05:04:12.236] [verbose] GET /docker params = null
[2021-05-16 05:04:12.239] [verbose] GET /update params = null
[2021-05-16 05:04:12.288] [info]  Response success for /usage
[2021-05-16 05:04:12.424] [info]  Response for POST /usage
[2021-05-16 05:04:12.429] [verbose] 
[2021-05-16 05:04:12.446] [info]  Response success for /features
[2021-05-16 05:04:12.455] [info]  Response for GET /features
[2021-05-16 05:04:12.460] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 05:04:12.479] [info]  Response success for /settings
[2021-05-16 05:04:12.492] [info]  Response for GET /settings
[2021-05-16 05:04:12.498] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: false },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-16 05:04:12.507] [info]  Response success for /registry/user
[2021-05-16 05:04:12.513] [info]  Response for GET /registry/user
[2021-05-16 05:04:12.518] [verbose] { username: 'neuromancer0001' }
[2021-05-16 05:04:12.527] [info]  Response success for /docker
[2021-05-16 05:04:12.534] [info]  Response for GET /docker
[2021-05-16 05:04:12.538] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-16 05:04:12.544] [info]  Response success for /kubernetes
[2021-05-16 05:04:12.548] [info]  Response for GET /kubernetes
[2021-05-16 05:04:12.552] [verbose] { state: 'stopped', enabled: false }
[2021-05-16 05:04:12.556] [info]  Response success for /update
[2021-05-16 05:04:12.559] [info]  Response for GET /update
[2021-05-16 05:04:12.564] [verbose] { updateAvailableTime: 0 }
[2021-05-16 05:04:12.571] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-16 05:04:12.634] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-16 05:04:12.646] [verbose] GET /features params = null
[2021-05-16 05:04:12.694] [info]  Response success for /features
[2021-05-16 05:04:12.695] [info]  Response for GET /features
[2021-05-16 05:04:12.707] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 05:04:12.717] [info]  Response success for /system/disk-usage
[2021-05-16 05:04:12.720] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-16 05:04:12.724] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 35029
}
[2021-05-16 05:04:12.730] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-16 05:04:13.333] [info]  Response success for /versions
[2021-05-16 05:04:13.334] [info]  Response for GET /versions
[2021-05-16 05:04:13.337] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-16 05:05:08.742] [verbose] GET /settings params = null
[2021-05-16 05:05:08.746] [verbose] GET /features params = null
[2021-05-16 05:05:08.758] [info]  Response success for /features
[2021-05-16 05:05:08.766] [info]  Response for GET /features
[2021-05-16 05:05:08.771] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 05:05:08.787] [info]  Response success for /settings
[2021-05-16 05:05:08.799] [info]  Response for GET /settings
[2021-05-16 05:05:08.805] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: false },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-16 05:05:08.818] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-16 05:05:08.834] [info]  Response success for /system/disk-usage
[2021-05-16 05:05:08.838] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-16 05:05:08.842] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 35019
}
[2021-05-16 05:05:29.516] [info]  quitting application
[2021-05-16 05:05:29.518] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:05:29.550] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 05:05:40.957] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:05:40.965] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:05:40.967] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 05:05:41.040] [info]  application ready
[2021-05-16 05:05:41.066] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:05:41.130] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:05:41.143] [info]  using production config /dashboard
[2021-05-16 05:05:41.194] [info]  Response success for /notifications/subscriptions
[2021-05-16 05:05:41.397] [info]  Response for POST /notifications/subscriptions
[2021-05-16 05:05:41.402] [verbose] 
[2021-05-16 05:05:42.127] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-16 05:05:42.379] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-16 05:05:42.396] [info]  Response success for /usage
[2021-05-16 05:05:42.400] [info]  Response for POST /usage
[2021-05-16 05:05:42.405] [verbose] 
[2021-05-16 05:05:42.423] [verbose] GET /features params = null
[2021-05-16 05:05:42.441] [verbose] GET /settings params = null
[2021-05-16 05:05:42.448] [verbose] GET /versions params = null
[2021-05-16 05:05:42.459] [verbose] GET /system/editor params = null
[2021-05-16 05:05:42.467] [verbose] GET /kubernetes params = null
[2021-05-16 05:05:42.472] [verbose] GET /registry/user params = null
[2021-05-16 05:05:42.478] [verbose] GET /docker params = null
[2021-05-16 05:05:42.484] [verbose] GET /update params = null
[2021-05-16 05:05:42.523] [info]  Response success for /features
[2021-05-16 05:05:42.601] [info]  Response for GET /features
[2021-05-16 05:05:42.606] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 05:05:42.617] [info]  Response success for /update
[2021-05-16 05:05:42.623] [info]  Response for GET /update
[2021-05-16 05:05:42.639] [verbose] { updateAvailableTime: 0 }
[2021-05-16 05:05:42.645] [info]  Response success for /registry/user
[2021-05-16 05:05:42.655] [info]  Response for GET /registry/user
[2021-05-16 05:05:42.659] [verbose] { username: 'neuromancer0001' }
[2021-05-16 05:05:42.668] [info]  Response success for /settings
[2021-05-16 05:05:42.688] [info]  Response for GET /settings
[2021-05-16 05:05:42.695] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: false },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-16 05:05:42.703] [info]  Response success for /docker
[2021-05-16 05:05:42.709] [info]  Response for GET /docker
[2021-05-16 05:05:42.716] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-16 05:05:42.738] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-16 05:05:42.745] [info]  Response success for /kubernetes
[2021-05-16 05:05:42.749] [info]  Response for GET /kubernetes
[2021-05-16 05:05:42.754] [verbose] { state: 'stopped', enabled: false }
[2021-05-16 05:05:42.792] [verbose] GET /features params = null
[2021-05-16 05:05:42.819] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-16 05:05:42.861] [info]  Response success for /features
[2021-05-16 05:05:42.888] [info]  Response for GET /features
[2021-05-16 05:05:42.893] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 05:05:42.903] [info]  Response success for /system/disk-usage
[2021-05-16 05:05:42.924] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-16 05:05:42.933] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 35022
}
[2021-05-16 05:05:42.938] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-16 05:05:42.952] [info]  Response success for /versions
[2021-05-16 05:05:42.956] [info]  Response for GET /versions
[2021-05-16 05:05:42.971] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-16 05:05:50.187] [info]  open with action : loadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","allow-file-access-from-files":true,"backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:05:50.250] [info]  application ready
[2021-05-16 05:05:50.345] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:05:50.448] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"tutorial","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 05:05:50.491] [info]  using production config /tutorial
[2021-05-16 05:06:37.595] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: false,
    time: 0,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Start'
  }
}
[2021-05-16 05:06:37.601] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 8965.029999999388,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Clone'
  }
}
[2021-05-16 05:06:37.618] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 7220.319999999447,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Build'
  }
}
[2021-05-16 05:06:37.627] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 2318.720000000212,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Run'
  }
}
[2021-05-16 05:06:37.633] [verbose] POST /analytics/track data = {
  event: 'actionFinishTutorial',
  body: {
    signedIn: true,
    time: 16979.874999999993,
    action: true,
    skip: false,
    terminal: false,
    signIn: false,
    done: true,
    name: 'Share'
  }
}
[2021-05-16 05:06:37.789] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-16 05:06:37.811] [info]  Response success for /usage
[2021-05-16 05:06:37.820] [info]  Response for POST /usage
[2021-05-16 05:06:37.824] [verbose] 
[2021-05-16 05:06:38.809] [info]  Response success for /analytics/track
[2021-05-16 05:06:38.811] [info]  Response for POST /analytics/track
[2021-05-16 05:06:38.814] [verbose] 
[2021-05-16 05:06:38.819] [info]  Response success for /analytics/track
[2021-05-16 05:06:38.822] [info]  Response for POST /analytics/track
[2021-05-16 05:06:38.825] [verbose] 
[2021-05-16 05:06:38.831] [info]  Response success for /analytics/track
[2021-05-16 05:06:38.834] [info]  Response for POST /analytics/track
[2021-05-16 05:06:38.837] [verbose] 
[2021-05-16 05:06:38.842] [info]  Response success for /analytics/track
[2021-05-16 05:06:38.846] [info]  Response for POST /analytics/track
[2021-05-16 05:06:38.849] [verbose] 
[2021-05-16 05:06:38.852] [info]  Response success for /analytics/track
[2021-05-16 05:06:38.856] [info]  Response for POST /analytics/track
[2021-05-16 05:06:38.859] [verbose] 
[2021-05-16 05:08:55.253] [info]  quitting application
[2021-05-16 05:08:55.254] [debug] unregister from backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 05:08:55.277] [verbose] DELETE /notifications/subscriptions params = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 23:54:43.894] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-16 23:54:43.933] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-16 23:54:43.967] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-16 23:54:44.246] [info]  application ready
[2021-05-16 23:54:44.280] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 23:54:44.583] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-16 23:54:44.596] [info]  using production config /dashboard
[2021-05-16 23:54:45.644] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-16 23:54:45.846] [info]  ping received
[2021-05-16 23:54:45.880] [info]  Response success for /notifications/subscriptions
[2021-05-16 23:54:45.921] [info]  Response for POST /notifications/subscriptions
[2021-05-16 23:54:45.928] [verbose] 
[2021-05-16 23:54:45.958] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-16 23:54:45.983] [info]  Response success for /usage
[2021-05-16 23:54:45.986] [info]  Response for POST /usage
[2021-05-16 23:54:45.990] [verbose] 
[2021-05-16 23:54:46.011] [verbose] GET /features params = null
[2021-05-16 23:54:46.018] [verbose] GET /settings params = null
[2021-05-16 23:54:46.028] [verbose] GET /versions params = null
[2021-05-16 23:54:46.039] [verbose] GET /system/editor params = null
[2021-05-16 23:54:46.060] [verbose] GET /kubernetes params = null
[2021-05-16 23:54:46.071] [verbose] GET /registry/user params = null
[2021-05-16 23:54:46.077] [verbose] GET /docker params = null
[2021-05-16 23:54:46.083] [verbose] GET /update params = null
[2021-05-16 23:54:46.127] [info]  Response success for /settings
[2021-05-16 23:54:46.335] [info]  Response for GET /settings
[2021-05-16 23:54:46.348] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: false },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-16 23:54:46.356] [info]  Response success for /kubernetes
[2021-05-16 23:54:46.363] [info]  Response for GET /kubernetes
[2021-05-16 23:54:46.369] [verbose] { state: 'stopped', enabled: false }
[2021-05-16 23:54:46.375] [info]  Response success for /update
[2021-05-16 23:54:46.381] [info]  Response for GET /update
[2021-05-16 23:54:46.387] [verbose] { updateAvailableTime: 0 }
[2021-05-16 23:54:46.399] [info]  Response success for /features
[2021-05-16 23:54:46.405] [info]  Response for GET /features
[2021-05-16 23:54:46.409] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 23:54:46.417] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-16 23:54:46.424] [info]  Response success for /registry/user
[2021-05-16 23:54:46.428] [info]  Response for GET /registry/user
[2021-05-16 23:54:46.432] [verbose] { username: 'neuromancer0001' }
[2021-05-16 23:54:46.441] [info]  Response success for /docker
[2021-05-16 23:54:46.448] [info]  Response for GET /docker
[2021-05-16 23:54:46.453] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-16 23:54:46.536] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-16 23:54:46.540] [verbose] GET /features params = null
[2021-05-16 23:54:46.589] [info]  Response success for /features
[2021-05-16 23:54:46.601] [info]  Response for GET /features
[2021-05-16 23:54:46.605] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-16 23:54:46.618] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-16 23:54:46.623] [info]  Response success for /system/disk-usage
[2021-05-16 23:54:46.632] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-16 23:54:46.637] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 51721
}
[2021-05-16 23:54:47.198] [info]  Response success for /versions
[2021-05-16 23:54:47.199] [info]  Response for GET /versions
[2021-05-16 23:54:47.203] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-17 00:14:44.260] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:14:44.265] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:14:44.269] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 00:14:44.321] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:14:58.366] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 00:14:58.368] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 00:14:58.907] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 00:14:58.992] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 00:16:38.347] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:16:38.349] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:16:38.356] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 00:16:38.401] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:26:58.288] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 00:26:58.292] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 00:26:58.300] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 00:26:58.613] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 00:28:38.148] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:28:38.150] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:28:38.157] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 00:28:40.283] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:28:41.972] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 00:28:41.974] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 00:28:41.980] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 00:28:42.412] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 00:30:21.903] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:30:21.905] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:30:21.910] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 00:30:22.168] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:30:26.213] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 00:30:26.215] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 00:30:26.224] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 00:30:26.463] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 00:32:06.192] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:32:06.194] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 00:32:06.207] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 00:32:06.396] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:57:53.188] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 00:57:53.190] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 00:57:53.197] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 00:57:53.612] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 00:58:07.848] [debug] engine state notification, req.body:  { state: 'starting', mode: 'windows' }
[2021-05-17 00:58:07.850] [info]  engine state notification { state: 'starting', mode: 'windows' }
[2021-05-17 00:58:07.862] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"windows"}}
[2021-05-17 00:58:07.933] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-17 00:59:33.172] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-05-17 00:59:33.174] [info]  engine state notification { state: 'failed to start', mode: 'windows' }
[2021-05-17 00:59:33.186] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-05-17 00:59:33.254] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 00:59:37.858] [debug] engine state notification, req.body:  { state: 'updating', mode: 'windows' }
[2021-05-17 00:59:37.860] [info]  engine state notification { state: 'updating', mode: 'windows' }
[2021-05-17 00:59:37.871] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"windows"}}
[2021-05-17 00:59:38.024] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 01:00:48.172] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'windows' }
[2021-05-17 01:00:48.173] [info]  engine state notification { state: 'failed to start', mode: 'windows' }
[2021-05-17 01:00:48.182] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"windows"}}
[2021-05-17 01:00:48.345] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 01:00:51.688] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-17 01:00:51.690] [info]  engine state notification { state: 'starting', mode: 'linux' }
[2021-05-17 01:00:51.694] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-17 01:00:51.717] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-17 01:01:00.694] [debug] engine state notification, req.body:  { state: 'starting', mode: 'linux' }
[2021-05-17 01:01:00.696] [info]  engine state notification { state: 'starting', mode: 'linux' }
[2021-05-17 01:01:00.705] [info]  notification : {"type":"engine.success","payload":{"state":"starting","mode":"linux"}}
[2021-05-17 01:01:17.797] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 01:01:17.799] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 01:01:17.805] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 01:01:18.076] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 01:22:53.184] [debug] engine state notification, req.body:  { state: 'updating', mode: 'linux' }
[2021-05-17 01:22:53.186] [info]  engine state notification { state: 'updating', mode: 'linux' }
[2021-05-17 01:22:53.210] [info]  notification : {"type":"engine.success","payload":{"state":"updating","mode":"linux"}}
[2021-05-17 01:22:53.396] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: updating
[2021-05-17 01:24:34.117] [debug] engine state notification, req.body:  { state: 'failed to start', mode: 'linux' }
[2021-05-17 01:24:34.119] [info]  engine state notification { state: 'failed to start', mode: 'linux' }
[2021-05-17 01:24:34.124] [info]  notification : {"type":"engine.success","payload":{"state":"failed to start","mode":"linux"}}
[2021-05-17 01:24:34.184] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: failed to start
[2021-05-17 23:00:37.213] [info]  server listening on \\.\pipe\dockerFrontendApiServer
[2021-05-17 23:00:37.257] [debug] register to backend \\.\pipe\dockerFrontendApiServer
[2021-05-17 23:00:37.298] [verbose] POST /notifications/subscriptions data = { address: '\\\\.\\pipe\\dockerFrontendApiServer' }
[2021-05-17 23:00:37.681] [info]  application ready
[2021-05-17 23:00:37.712] [info]  open with action : createAndLoadView, opts: {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-17 23:00:38.133] [info]  main window options {"_":["C:\\Program Files\\Docker\\Docker\\frontend\\Docker Desktop.exe"],"name":"containers","backend":"\\\\.\\pipe\\dockerWebApiServer","dockerBackend":"\\\\.\\pipe\\dockerBackendApiServer","frontend":"\\\\.\\pipe\\dockerFrontendApiServer","volumeContentsBackend":"\\\\.\\pipe\\volumeContents"}
[2021-05-17 23:00:46.164] [info]  using production config /dashboard
[2021-05-17 23:00:48.409] [info]  ping received
[2021-05-17 23:00:49.695] [info]  Response success for /notifications/subscriptions
[2021-05-17 23:00:49.697] [info]  Response for POST /notifications/subscriptions
[2021-05-17 23:00:49.710] [verbose] 
[2021-05-17 23:00:50.515] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: null
[2021-05-17 23:00:50.812] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-17 23:00:50.865] [verbose] GET /features params = null
[2021-05-17 23:00:50.949] [verbose] GET /settings params = null
[2021-05-17 23:00:51.041] [verbose] GET /versions params = null
[2021-05-17 23:00:51.142] [verbose] GET /system/editor params = null
[2021-05-17 23:00:51.245] [verbose] GET /kubernetes params = null
[2021-05-17 23:00:51.310] [verbose] GET /registry/user params = null
[2021-05-17 23:00:51.334] [verbose] GET /docker params = null
[2021-05-17 23:00:51.342] [verbose] GET /update params = null
[2021-05-17 23:00:51.393] [info]  Response success for /features
[2021-05-17 23:00:51.559] [info]  Response for GET /features
[2021-05-17 23:00:51.563] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-17 23:00:51.579] [info]  Response error for /system/editor: Request failed with status code 404
[2021-05-17 23:00:52.189] [info]  Response success for /registry/user
[2021-05-17 23:00:52.190] [info]  Response for GET /registry/user
[2021-05-17 23:00:52.208] [verbose] { username: '' }
[2021-05-17 23:00:52.213] [info]  Response success for /kubernetes
[2021-05-17 23:00:52.229] [info]  Response for GET /kubernetes
[2021-05-17 23:00:52.238] [verbose] { state: 'stopped', enabled: false }
[2021-05-17 23:00:52.244] [verbose] GET /features params = null
[2021-05-17 23:00:52.252] [info]  Response success for /usage
[2021-05-17 23:00:52.257] [info]  Response for POST /usage
[2021-05-17 23:00:52.263] [verbose] 
[2021-05-17 23:00:52.283] [info]  Response success for /update
[2021-05-17 23:00:52.289] [info]  Response for GET /update
[2021-05-17 23:00:52.294] [verbose] { updateAvailableTime: 0 }
[2021-05-17 23:00:52.304] [info]  Response success for /settings
[2021-05-17 23:00:52.309] [info]  Response for GET /settings
[2021-05-17 23:00:52.321] [verbose] {
  desktop: {
    disableUpdate: false,
    analyticsEnabled: true,
    autoStart: true,
    backupData: false,
    disableTips: false,
    tipLastViewedTime: 0,
    tipLastId: 0,
    updateAvailableTime: 0,
    updatePopupAppearanceTime: 0,
    exportInsecureDaemon: false,
    useCredentialHelper: true,
    wslEngineEnabled: true,
    wslPreconditionMessage: null,
    openUIOnStartupDisabled: false,
    displayedTutorial: false
  },
  vm: {
    daemon: '{\r\n' +
      '  "registry-mirrors": [],\r\n' +
      '  "insecure-registries": [],\r\n' +
      '  "debug": false,\r\n' +
      '  "experimental": false,\r\n' +
      '  "features": {\r\n' +
      '    "buildkit": true\r\n' +
      '  },\r\n' +
      '  "builder": {\r\n' +
      '    "gc": {\r\n' +
      '      "enabled": true,\r\n' +
      '      "defaultKeepStorage": "20GB"\r\n' +
      '    }\r\n' +
      '  }\r\n' +
      '}',
    fileSharing: [],
    kubernetes: { enabled: false, showSystemContainers: false },
    network: {
      automaticDNS: true,
      dns: '8.8.8.8',
      socksProxyPort: 0,
      vpnkitCIDR: '192.168.65.0/28'
    },
    proxy: { mode: 'system', http: '', https: '', exclude: '' },
    resources: {
      cpus: { value: 2, min: 1, max: 4 },
      memoryMiB: { value: 2048, min: 1024, max: 5888 },
      swapMiB: { value: 1024, min: 512, max: 4096 },
      diskSizeMiB: { value: 65536, used: 0 },
      dataFolder: 'C:\\ProgramData\\DockerDesktop\\vm-data'
    }
  },
  wslIntegration: { distros: [], enableIntegrationWithDefaultWslDistro: true }
}
[2021-05-17 23:00:52.343] [info]  Response success for /docker
[2021-05-17 23:00:52.390] [info]  Response for GET /docker
[2021-05-17 23:00:52.429] [verbose] { state: 'starting', mode: 'linux' }
[2021-05-17 23:00:52.456] [info]  Response success for /features
[2021-05-17 23:00:52.468] [info]  Response for GET /features
[2021-05-17 23:00:52.494] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-17 23:00:52.515] [verbose] GET /system/disk-usage params = { path: 'C:\\ProgramData\\DockerDesktop\\vm-data' }
[2021-05-17 23:00:52.571] [info]  received: destroy-docker-stream, context: dashboard-stream, engineState: starting
[2021-05-17 23:00:52.609] [info]  Response success for /system/disk-usage
[2021-05-17 23:00:52.637] [info]  Response for GET /system/disk-usage?path=C:%5CProgramData%5CDockerDesktop%5Cvm-data
[2021-05-17 23:00:52.642] [verbose] {
  path: 'C:\\ProgramData\\DockerDesktop\\vm-data',
  usedMiB: 0,
  freeMiB: 62579
}
[2021-05-17 23:00:55.279] [info]  Response success for /versions
[2021-05-17 23:00:55.281] [info]  Response for GET /versions
[2021-05-17 23:00:55.286] [verbose] {
  gitCommit: '68eba96de8051dcb12cf43b3a6955f1ee7156b4b',
  appVersion: '3.3.3',
  buildNumber: '64133',
  channel: 'stable',
  defaultVersionPack: 'community',
  engineVersion: '20.10.6',
  composeVersion: '1.29.1',
  notaryVersion: '0.6.1',
  credentialHelpersVersion: '0.6.3',
  kubernetesVersion: 'v1.19.7',
  snykVersion: 'v1.563.0'
}
[2021-05-17 23:02:21.942] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-17 23:02:23.107] [info]  Response success for /usage
[2021-05-17 23:02:23.109] [info]  Response for POST /usage
[2021-05-17 23:02:23.120] [verbose] 
[2021-05-17 23:02:29.572] [verbose] POST /registry/login data = { username: '', password: '' }
[2021-05-17 23:02:29.602] [info]  Response success for /registry/login
[2021-05-17 23:02:29.653] [info]  Response for POST /registry/login
[2021-05-17 23:02:29.659] [verbose] 
[2021-05-17 23:03:24.299] [debug] login state notification, req.body:  { username: 'neuromancer0001', logged: true }
[2021-05-17 23:03:24.304] [info]  login state notification { username: 'neuromancer0001', logged: true }
[2021-05-17 23:03:24.341] [info]  notification : {"type":"login.success","payload":{"username":"neuromancer0001","logged":true}}
[2021-05-17 23:03:24.359] [verbose] GET /features params = null
[2021-05-17 23:03:24.389] [info]  Response success for /features
[2021-05-17 23:03:25.187] [info]  Response for GET /features
[2021-05-17 23:03:25.193] [verbose] {
  ApplicationDesigner: {
    name: 'Application Designer',
    label: 'Enable Application Designer',
    enabled: false,
    type: 1
  },
  DevEnvironmentsV0: {
    name: 'Painted Door Dev Environments',
    label: 'Enable Painted Door Dev Environments',
    description: 'Display Painted Door Dev Environments in the dashboard',
    enabled: true,
    type: 1
  },
  ProUser: {
    name: 'ProUser',
    label: 'free',
    description: 'You can upgrade your current plan [here](URL)',
    enabled: false,
    type: 3
  },
  UpdateNotificationBox: {
    name: 'Update Notification Box',
    label: 'Update Notification Box',
    description: 'Enable update notification box in the UI',
    enabled: false,
    type: 1
  },
  UpdateRedesign: {
    name: 'Update Redesign',
    label: 'Enable Update Redesign',
    description: 'Enable Update Redesign',
    enabled: true,
    type: 1
  },
  VolumesPanel: {
    name: 'Volumes panel',
    label: 'Enable Volumes panel',
    description: 'Display the container volumes in the dashboard',
    enabled: false,
    type: 1
  },
  grpcfuseV2: {
    name: 'Grpcfuse',
    label: 'Use grpcfuse for filesharing by default',
    description: 'Switch off to use the legacy osxfs file sharing instead.',
    enabled: true,
    type: 1
  },
  mutagenV0: {
    name: 'Mutagen',
    label: 'Two-way file synchronisation',
    description: 'Use Mutagen to synchronize files in a container with your local disk.',
    enabled: false,
    type: 1
  }
}
[2021-05-17 23:03:31.648] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-17 23:03:32.123] [info]  Response success for /usage
[2021-05-17 23:03:33.490] [info]  Response for POST /usage
[2021-05-17 23:03:33.496] [verbose] 
[2021-05-17 23:03:33.585] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-17 23:03:33.768] [info]  Response success for /usage
[2021-05-17 23:03:33.807] [info]  Response for POST /usage
[2021-05-17 23:03:33.817] [verbose] 
[2021-05-17 23:03:48.045] [verbose] POST /usage data = { command: 'imagesRemoteOpened', count: 1 }
[2021-05-17 23:03:48.081] [verbose] GET /registry/token params = null
[2021-05-17 23:03:48.310] [verbose] GET /registry/token params = null
[2021-05-17 23:03:48.346] [info]  Response success for /usage
[2021-05-17 23:03:48.353] [info]  Response for POST /usage
[2021-05-17 23:03:48.364] [verbose] 
[2021-05-17 23:03:48.398] [info]  Response success for /registry/token
[2021-05-17 23:03:48.467] [info]  Response for GET /registry/token
[2021-05-17 23:03:48.529] [info]  ==> GET https://hub.docker.com/v2/user/orgs/?page_size=100
[2021-05-17 23:03:48.697] [info]  Response success for /registry/token
[2021-05-17 23:03:48.757] [info]  Response for GET /registry/token
[2021-05-17 23:03:48.764] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001?page_size=5
[2021-05-17 23:03:49.232] [info]  Response for GET /v2/user/orgs/?page_size=100
[2021-05-17 23:03:49.234] [verbose] {
  count: 2,
  next: null,
  previous: null,
  results: [
    {
      id: 'e5fc63916c1842bb93b4e0d7c964e7bd',
      orgname: 'neuromancer0000',
      full_name: '',
      location: '',
      company: 'nic.c',
      profile_url: '',
      date_joined: '2020-11-13T01:29:55.723671Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    },
    {
      id: 'a77166e06bbe4c359b0610f5c3a6b0a0',
      orgname: 'nic11c22ccc',
      full_name: '',
      location: '',
      company: 'hello-solo!',
      profile_url: '',
      date_joined: '2020-05-18T20:05:09.943702Z',
      gravatar_url: 'https://secure.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e.jpg?s=80&r=g&d=mm',
      gravatar_email: '',
      type: 'Organization'
    }
  ]
}
[2021-05-17 23:03:50.081] [info]  Response for GET /v2/repositories/neuromancer0001/?page_size=5
[2021-05-17 23:03:50.082] [verbose] {
  count: 5,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0001',
      name: 'docker101tutorial',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 56,
      last_updated: '2021-05-07T11:56:58.176528Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'local_image-new_repo',
      namespace: 'neuromancer0001',
      repository_type: 'image',
      status: 1,
      description: 'docker push neuromancer0001/local_image-new_repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 12,
      last_updated: '2021-05-07T12:13:36.906743Z',
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: '0001',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '$$',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'library',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    },
    {
      user: 'neuromancer0001',
      name: 'aacd3e',
      namespace: 'neuromancer0001',
      repository_type: null,
      status: 0,
      description: '',
      is_private: true,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-17 23:03:50.095] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-17 23:03:50.106] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-17 23:03:50.119] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-17 23:03:50.137] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-17 23:03:50.159] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-17 23:03:50.548] [info]  Response for GET /v2/repositories/neuromancer0001/docker101tutorial/tags/?page_size=11
[2021-05-17 23:03:50.844] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133363797,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:4df9569cdaa7c64028e5289ce6b8a205751d88843faf63e53d52633cd367b669',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13613747,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.554027Z',
          last_pushed: '2021-05-07T11:56:57.8766Z'
        }
      ],
      last_updated: '2021-05-07T11:56:57.8766Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 10684299,
      full_size: 13613747,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.554027Z',
      tag_last_pushed: '2021-05-07T11:56:57.8766Z'
    }
  ]
}
[2021-05-17 23:03:50.854] [info]  Response for GET /v2/repositories/neuromancer0001/library/tags/?page_size=11
[2021-05-17 23:03:50.866] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-17 23:03:50.878] [info]  Response for GET /v2/repositories/neuromancer0001/0001/tags/?page_size=11
[2021-05-17 23:03:50.886] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-17 23:03:50.896] [info]  Response for GET /v2/repositories/neuromancer0001/aacd3e/tags/?page_size=11
[2021-05-17 23:03:50.905] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-17 23:03:50.916] [info]  Response for GET /v2/repositories/neuromancer0001/local_image-new_repo/tags/?page_size=11
[2021-05-17 23:03:50.949] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      creator: 8718760,
      id: 133477718,
      image_id: null,
      images: [
        {
          architecture: 'amd64',
          features: '',
          variant: null,
          digest: 'sha256:f12b66700c402595dbe128b308c2bc9ae61458dbf533b8697cc25a85673cd1f5',
          os: 'linux',
          os_features: '',
          os_version: null,
          size: 13505166,
          status: 'active',
          last_pulled: '2021-05-12T21:39:53.731282Z',
          last_pushed: '2021-05-07T12:13:36.590539Z'
        }
      ],
      last_updated: '2021-05-07T12:13:36.590539Z',
      last_updater: 8718760,
      last_updater_username: 'neuromancer0001',
      name: 'latest',
      repository: 9667408,
      full_size: 13505166,
      v2: true,
      tag_status: 'active',
      tag_last_pulled: '2021-05-12T21:39:53.731282Z',
      tag_last_pushed: '2021-05-07T12:13:36.590539Z'
    }
  ]
}
[2021-05-17 23:03:51.052] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-17 23:03:51.708] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-17 23:03:51.842] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/0001
[2021-05-17 23:03:52.003] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/library
[2021-05-17 23:03:52.029] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-17 23:03:52.464] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/0001
[2021-05-17 23:03:52.465] [verbose] 
[2021-05-17 23:03:52.530] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/local_image-new_repo
[2021-05-17 23:03:52.550] [verbose] 
[2021-05-17 23:03:52.569] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/library
[2021-05-17 23:03:52.612] [verbose] 
[2021-05-17 23:03:52.648] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/docker101tutorial
[2021-05-17 23:03:52.661] [verbose] 
[2021-05-17 23:03:52.674] [info]  Response for GET /api/scan/v1/accounts/neuromancer0001/aacd3e
[2021-05-17 23:03:52.697] [verbose] 
[2021-05-17 23:03:53.709] [verbose] POST /usage data = { command: 'imageChangeNamespace', count: 1 }
[2021-05-17 23:03:53.719] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0000?page_size=5
[2021-05-17 23:03:53.789] [info]  Response success for /usage
[2021-05-17 23:03:53.897] [info]  Response for POST /usage
[2021-05-17 23:03:53.910] [verbose] 
[2021-05-17 23:03:54.782] [info]  Response for GET /v2/repositories/neuromancer0000/?page_size=5
[2021-05-17 23:03:54.783] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      user: 'neuromancer0000',
      name: 'nic',
      namespace: 'neuromancer0000',
      repository_type: null,
      status: 0,
      description: 'docker tag local-image:tagname new-repo:tagname docker push new-repo:tagname',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'neuromancer0001'
    }
  ]
}
[2021-05-17 23:03:54.797] [info]  ==> GET https://hub.docker.com/v2/repositories/neuromancer0000/nic/tags/?page_size=11
[2021-05-17 23:03:55.267] [info]  Response for GET /v2/repositories/neuromancer0000/nic/tags/?page_size=11
[2021-05-17 23:03:55.268] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-17 23:03:55.334] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/neuromancer0000/nic
[2021-05-17 23:03:56.210] [info]  Response for GET /api/scan/v1/accounts/neuromancer0000/nic
[2021-05-17 23:03:56.211] [verbose] 
[2021-05-17 23:03:58.148] [verbose] POST /usage data = { command: 'imageChangeNamespace', count: 1 }
[2021-05-17 23:03:58.161] [info]  Response success for /usage
[2021-05-17 23:03:58.206] [info]  Response for POST /usage
[2021-05-17 23:03:58.212] [verbose] 
[2021-05-17 23:03:58.227] [info]  ==> GET https://hub.docker.com/v2/repositories/nic11c22ccc?page_size=5
[2021-05-17 23:03:59.172] [info]  Response for GET /v2/repositories/nic11c22ccc/?page_size=5
[2021-05-17 23:03:59.227] [verbose] {
  count: 1,
  next: null,
  previous: null,
  results: [
    {
      user: 'nic11c22ccc',
      name: 'quokka',
      namespace: 'nic11c22ccc',
      repository_type: null,
      status: 0,
      description: 'C:\\.quokka\\interactive-examples\\JavaScript\\json\\node-v0.10.29-darwin-x64/quokka:tagname\n',
      is_private: false,
      is_automated: false,
      can_edit: true,
      star_count: 0,
      pull_count: 0,
      last_updated: null,
      is_migrated: false,
      collaborator_count: 0,
      affiliation: 'owner',
      hub_user: 'nic11c22ccc'
    }
  ]
}
[2021-05-17 23:03:59.234] [info]  ==> GET https://hub.docker.com/v2/repositories/nic11c22ccc/quokka/tags/?page_size=11
[2021-05-17 23:03:59.631] [info]  Response for GET /v2/repositories/nic11c22ccc/quokka/tags/?page_size=11
[2021-05-17 23:04:01.866] [verbose] { count: 0, next: null, previous: null, results: [] }
[2021-05-17 23:04:01.914] [info]  ==> GET https://hub.docker.com/api/scan/v1/accounts/nic11c22ccc/quokka
[2021-05-17 23:04:04.433] [info]  Response for GET /api/scan/v1/accounts/nic11c22ccc/quokka
[2021-05-17 23:04:04.434] [verbose] 
[2021-05-17 23:04:11.585] [verbose] POST /usage data = { command: 'containersOpened', count: 1 }
[2021-05-17 23:04:11.797] [info]  Response success for /usage
[2021-05-17 23:04:11.845] [info]  Response for POST /usage
[2021-05-17 23:04:11.850] [verbose] 
[2021-05-17 23:04:13.321] [verbose] POST /usage data = { command: 'imagesOpened', count: 1 }
[2021-05-17 23:04:13.344] [info]  Response success for /usage
[2021-05-17 23:04:13.410] [info]  Response for POST /usage
[2021-05-17 23:04:13.435] [verbose] 
[2021-05-17 23:04:19.857] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-17 23:04:21.759] [info]  Response success for /analytics/track
[2021-05-17 23:04:28.142] [info]  Response for POST /analytics/track
[2021-05-17 23:04:28.177] [verbose] 
[2021-05-17 23:04:29.037] [verbose] POST /analytics/track data = { event: 'actionDevEnvironmentsGetStarted' }
[2021-05-17 23:04:37.955] [info]  Response success for /analytics/track
[2021-05-17 23:04:38.334] [info]  Response for POST /analytics/track
[2021-05-17 23:04:38.350] [verbose] 
[2021-05-17 23:05:20.482] [verbose] POST /diagnostics/gather data = null
[2021-05-17 23:05:20.600] [info]  Response success for /diagnostics/gather
[2021-05-17 23:05:20.619] [info]  Response for POST /diagnostics/gather
[2021-05-17 23:05:20.633] [verbose] {
  id: '5F6D035B-6A45-4D55-B1A0-36391A1FC0DF/20210517210520',
  path: 'C:\\Users\\Neuro\\AppData\\Local\\Temp\\5F6D035B-6A45-4D55-B1A0-36391A1FC0DF\\20210517210520.zip',
  status: ''
}
[2021-05-17 23:05:25.515] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:25.684] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:25.718] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:25.769] [verbose] { status: 'running' }
[2021-05-17 23:05:30.561] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:33.380] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:33.401] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:33.410] [verbose] { status: 'running' }
[2021-05-17 23:05:36.351] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:36.477] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:36.486] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:36.497] [verbose] { status: 'running' }
[2021-05-17 23:05:41.672] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:42.264] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:42.281] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:42.290] [verbose] { status: 'running' }
[2021-05-17 23:05:48.399] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:48.490] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:48.501] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:48.518] [verbose] { status: 'running' }
[2021-05-17 23:05:51.283] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:56.191] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:56.196] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:56.256] [verbose] { status: 'running' }
[2021-05-17 23:05:56.295] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:05:56.387] [info]  Response success for /diagnostics/status
[2021-05-17 23:05:56.508] [info]  Response for GET /diagnostics/status
[2021-05-17 23:05:56.572] [verbose] { status: 'running' }
[2021-05-17 23:06:05.751] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:05.761] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:13.974] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:13.996] [verbose] { status: 'running' }
[2021-05-17 23:06:14.009] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:14.055] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:14.141] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:14.157] [verbose] { status: 'running' }
[2021-05-17 23:06:16.696] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:16.733] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:16.755] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:16.767] [verbose] { status: 'running' }
[2021-05-17 23:06:23.564] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:23.572] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:23.768] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:23.789] [verbose] { status: 'running' }
[2021-05-17 23:06:25.524] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:25.696] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:26.789] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:26.806] [verbose] { status: 'running' }
[2021-05-17 23:06:36.626] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:36.641] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:48.604] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:48.972] [verbose] { status: 'running' }
[2021-05-17 23:06:49.215] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:49.289] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:06:49.785] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:49.964] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:50.093] [verbose] { status: 'running' }
[2021-05-17 23:06:50.190] [info]  Response success for /diagnostics/status
[2021-05-17 23:06:50.304] [info]  Response for GET /diagnostics/status
[2021-05-17 23:06:50.379] [verbose] { status: 'running' }
[2021-05-17 23:06:54.438] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:00.005] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:00.855] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:10.227] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:10.247] [verbose] { status: 'running' }
[2021-05-17 23:07:10.278] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:10.286] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:10.298] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:10.308] [verbose] { status: 'running' }
[2021-05-17 23:07:10.319] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:10.340] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:10.348] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:10.364] [verbose] { status: 'running' }
[2021-05-17 23:07:10.371] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:10.376] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:10.381] [verbose] { status: 'running' }
[2021-05-17 23:07:14.569] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:14.589] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:14.607] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:14.614] [verbose] { status: 'running' }
[2021-05-17 23:07:15.625] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:15.705] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:18.027] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:18.035] [verbose] { status: 'running' }
[2021-05-17 23:07:23.710] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:28.756] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:43.159] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:43.397] [verbose] { status: 'running' }
[2021-05-17 23:07:48.694] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:49.183] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:49.320] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:49.419] [verbose] { status: 'running' }
[2021-05-17 23:07:50.555] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:50.681] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:50.728] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:50.760] [verbose] { status: 'running' }
[2021-05-17 23:07:58.563] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:07:58.609] [info]  Response success for /diagnostics/status
[2021-05-17 23:07:58.628] [info]  Response for GET /diagnostics/status
[2021-05-17 23:07:58.650] [verbose] { status: 'running' }
[2021-05-17 23:08:01.288] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:08:01.431] [info]  Response success for /diagnostics/status
[2021-05-17 23:08:01.484] [info]  Response for GET /diagnostics/status
[2021-05-17 23:08:01.538] [verbose] { status: 'running' }
[2021-05-17 23:08:08.064] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:08:08.484] [info]  Response success for /diagnostics/status
[2021-05-17 23:08:08.516] [info]  Response for GET /diagnostics/status
[2021-05-17 23:08:08.826] [verbose] { status: 'running' }
[2021-05-17 23:13:43.900] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:13:45.696] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:13:46.147] [info]  Response success for /diagnostics/status
[2021-05-17 23:13:46.197] [info]  Response for GET /diagnostics/status
[2021-05-17 23:13:46.206] [verbose] { status: 'running' }
[2021-05-17 23:13:46.377] [info]  Response success for /diagnostics/status
[2021-05-17 23:13:46.493] [info]  Response for GET /diagnostics/status
[2021-05-17 23:13:46.731] [verbose] { status: 'running' }
[2021-05-17 23:13:56.003] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:13:56.636] [info]  Response success for /diagnostics/status
[2021-05-17 23:13:57.011] [info]  Response for GET /diagnostics/status
[2021-05-17 23:13:57.605] [verbose] { status: 'running' }
[2021-05-17 23:14:01.277] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:01.529] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:01.604] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:01.966] [verbose] { status: 'running' }
[2021-05-17 23:14:06.290] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:06.890] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:07.058] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:07.761] [verbose] { status: 'running' }
[2021-05-17 23:14:32.226] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:32.432] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:32.755] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:33.075] [verbose] { status: 'running' }
[2021-05-17 23:14:36.033] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:36.476] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:36.748] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:37.473] [verbose] { status: 'running' }
[2021-05-17 23:14:42.316] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:45.480] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:45.486] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:45.730] [verbose] { status: 'running' }
[2021-05-17 23:14:46.281] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:46.748] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:46.974] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:47.262] [verbose] { status: 'running' }
[2021-05-17 23:14:51.287] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:14:51.453] [info]  Response success for /diagnostics/status
[2021-05-17 23:14:51.457] [info]  Response for GET /diagnostics/status
[2021-05-17 23:14:51.626] [verbose] { status: 'running' }
[2021-05-17 23:15:59.437] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:15:59.523] [info]  Response success for /diagnostics/status
[2021-05-17 23:15:59.538] [info]  Response for GET /diagnostics/status
[2021-05-17 23:15:59.543] [verbose] { status: 'running' }
[2021-05-17 23:16:00.488] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:16:00.501] [info]  Response success for /diagnostics/status
[2021-05-17 23:16:00.511] [info]  Response for GET /diagnostics/status
[2021-05-17 23:16:00.515] [verbose] { status: 'running' }
[2021-05-17 23:16:06.555] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:16:06.586] [info]  Response success for /diagnostics/status
[2021-05-17 23:16:06.594] [info]  Response for GET /diagnostics/status
[2021-05-17 23:16:06.606] [verbose] { status: 'running' }
[2021-05-17 23:16:11.728] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:16:11.752] [info]  Response success for /diagnostics/status
[2021-05-17 23:16:11.892] [info]  Response for GET /diagnostics/status
[2021-05-17 23:16:11.898] [verbose] { status: 'running' }
[2021-05-17 23:16:16.275] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:16:16.286] [info]  Response success for /diagnostics/status
[2021-05-17 23:16:16.291] [info]  Response for GET /diagnostics/status
[2021-05-17 23:16:16.297] [verbose] { status: 'running' }
[2021-05-17 23:16:23.251] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:16:23.300] [info]  Response success for /diagnostics/status
[2021-05-17 23:16:23.311] [info]  Response for GET /diagnostics/status
[2021-05-17 23:16:23.330] [verbose] { status: 'running' }
[2021-05-17 23:17:00.274] [verbose] GET /diagnostics/status params = null
[2021-05-17 23:17:00.417] [info]  Response success for /diagnostics/status
[2021-05-17 23:17:00.503] [info]  Response for GET /diagnostics/status
